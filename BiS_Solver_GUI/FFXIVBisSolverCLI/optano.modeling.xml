<?xml version="1.0"?>
<doc>
  <assembly>
    <name>optano.modeling</name>
  </assembly>
  <members>
    <member name="T:OPTANO.Modeling.Optimization.ConflictingSet">
      <summary>
            Represents the irreducible infeasible set (IIS).
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConflictingSet.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Variable},System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Variable},System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double}})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.ConflictingSet" /> class.
            </summary>
      <param name="variablesUb">
            The variables for which the upper bounds are conflicting.
            </param>
      <param name="variablesLb">
            The variables for which the lower bounds are conflicting.
            </param>
      <param name="constraintslb">
            The conflicting lower bound constraints.
            </param>
      <param name="constraintsub">
            The conflicting upper bound constraints.
            </param>
      <param name="sos">
            The conflicting SOS.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConflictingSet.ToString">
      <summary>
            Exports the conflicting variable set as a formatted list
            </summary>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConflictingSet.ConstraintsLB">
      <summary>
            Gets the conflicting constraints where the lower bound is in conflict.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConflictingSet.ConstraintsUB">
      <summary>
            Gets the conflicting constraints where the upper bound is in conflict.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConflictingSet.SOS">
      <summary>
            Gets the conflicting SOS sets.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConflictingSet.VariablesLB">
      <summary>
            Gets the variables for which the lower bounds are conflicting.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConflictingSet.VariablesUB">
      <summary>
            Gets the variables for which the upper bounds are conflicting
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Expression">
      <summary>
            An expression essentially is a tree which stores operators on subtrees which can either be Expressions or Terms themselves
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.Evaluate(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Evaluates the expression using the specified variable values.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The <c>result</c> of the evaluation.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Implicit(OPTANO.Modeling.Optimization.Variable)~OPTANO.Modeling.Optimization.Expression">
      <summary>
            Implicit conversion from <see cref="T:OPTANO.Modeling.Optimization.Variable" /> to <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </summary>
      <param name="variable">
            The variable to convert.
            </param>
      <returns>
            A new <see cref="T:OPTANO.Modeling.Optimization.Term" /> that contains the variable, casted as a general <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.Sum(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression})">
      <summary>
            Sums the specified expressions.
            </summary>
      <param name="expressions">
            The expressions.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Sums up the specified values.
            </summary>
      <param name="values">
            The expressions.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.Sum(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Term})">
      <summary>
            Sums the specified terms.
            </summary>
      <param name="expressions">
            The terms.
            </param>
            BMK: variablename: expressions? terms?
            <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns></member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.Sum(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Variable})">
      <summary>
            Sums the specified variables.
            </summary>
      <param name="variables">
            The variables.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.Sum(System.Int32,System.Int32,System.Func{System.Int32,OPTANO.Modeling.Optimization.Expression})">
      <summary>
            Sums the specified range of expressions.
            </summary>
      <param name="start">
            The start.
            </param>
      <param name="count">
            The count.
            </param>
      <param name="selector">
            The selector.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.Sum(System.Int32,System.Int32,System.Func{System.Int32,OPTANO.Modeling.Optimization.Term})">
      <summary>
            Sums the specified range of terms.
            </summary>
      <param name="start">
            The start.
            </param>
      <param name="count">
            The count.
            </param>
      <param name="selector">
            The selector.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            The evaluate recursive.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The <see cref="T:System.Double" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Multiply(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="expression">The first expression.</param>
      <param name="expression2">The second expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Multiply(System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="constant">The constant.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Multiply(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="expression">The expression.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Multiply(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="expression">The expression.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Division(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Implements the operator /.
            </summary>
      <param name="expression">The expression.</param>
      <param name="constant">The constant.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_LessThanOrEqual(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="expression">The expression.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_GreaterThanOrEqual(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="expression">The expression.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_LessThanOrEqual(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="expression1">The first expression.</param>
      <param name="expression2">The second expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Equality(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="expression1">The first expression.</param>
      <param name="expression2">The second expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Equality(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Creates a new equality constraint
            </summary>
      <param name="variable">The variable.</param>
      <param name="expression">The expression.</param>
      <returns>The a new constraint as the result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Equality(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator '=='.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <param name="variable">
            The variable.
            </param>
      <returns>
            A <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> where <paramref name="expression" /> == <paramref name="variable" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Arguments mustn't be <c>null</c>.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Inequality(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Please construct inequalities using &lt;= and &gt;=
            </summary>
      <param name="variable">The variable.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Inequality(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Please construct inequalities using &lt;= and &gt;=
            </summary>
      <param name="variable">The variable.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Equality(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="expression">The expression.</param>
      <param name="value">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Equality(System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="value">The constant.</param>
      <param name="expression">The expression.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Inequality(System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Please construct inequalities using &lt;= and &gt;=
            </summary>
      <param name="expression">The expression.</param>
      <param name="value">The value.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Inequality(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Please construct inequalities using &lt;= and &gt;=
            </summary>
      <param name="expression">The expression.</param>
      <param name="value">The value.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Inequality(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Please construct inequalities using &lt;= and &gt;=
            </summary>
      <param name="expression">The expression.</param>
      <param name="expression2">The expression2.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_GreaterThanOrEqual(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="expression1">The first expression.</param>
      <param name="expression2">The second expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_GreaterThanOrEqual(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="expression">The expression.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_LessThanOrEqual(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="expression">The expression.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_LessThanOrEqual(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="variable">The variable.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_LessThanOrEqual(System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="constant">The constant.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_GreaterThanOrEqual(System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="constant">The constant.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_GreaterThanOrEqual(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="variable">The variable.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Addition(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="expression1">The first expression.</param>
      <param name="expression2">The second expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Addition(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="expression1">The expression.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Addition(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="variable">The variable.</param>
      <param name="expression1">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Addition(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
             Adds a constant to an expression
            </summary>
      <param name="expression" />
      <param name="constant" />
      <returns />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Addition(System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
             Adds a constant to an expression
            </summary>
      <param name="constant" />
      <param name="expression" />
      <returns />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Subtraction(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="expression1">The first expression.</param>
      <param name="expression2">The second expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Subtraction(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="expression1">The expression.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Subtraction(System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="constant">The constant.</param>
      <param name="expression1">The expression1.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Subtraction(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="variable">The variable.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.op_Subtraction(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="expression">The expression.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Expression.Normalize">
      <summary>
            Flattens the expression. Only works for linear expressions and the result is a sum of terms + a constant.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Expression.IsLinear">
      <summary>
            Gets or sets a value indicating whether this instance is linear.
            </summary>
      <value>
        <c>true</c> if this instance is linear; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Expression.Variables">
      <summary>
            Gets the variables in this expression.
            </summary>
      <value>The variables.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Expression.Terms">
      <summary>
            Gets a list of the terms in this expression. It does not contain any operators and does not tell you anything aobut how they are combined with operators.
            </summary>
      <value>The terms.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Expression.Constant">
      <summary>
            Gets the constant of this expression.
            </summary>
      <value>The constant.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Expression.ExpressionLowerEstimate">
      <summary>
            Gives a lower estimate on the value of an Expression.
            ToDO: Very experimental. Should be able to estimate linear combinations of variables with finite bounds.
            In the default case -infinity is returned!
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Expression.ExpressionUpperEstimate">
      <summary>
            Gives an upper estimate in the value of an Expression.
            ToDO: Very experimental. Should be able to estimate linear combinations of variables with finite bounds.
            In the default case -infinity is returned!
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Expression.EmptyExpression">
      <summary>
            Gets an empty <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Expression.BigM">
      <summary>
            Gets the big m.
            </summary>
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="T:OPTANO.Modeling.Optimization.ConstantExpression">
      <summary>
            A ConstantExpression only holds a double value but can be used as part of an expression
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ConstantExpression._value">
      <summary>
            Backing field for the value.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" /> class.
            </summary>
      <param name="value">
            The value.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.op_Addition(System.Double,OPTANO.Modeling.Optimization.ConstantExpression)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="constant">The constant.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.op_Addition(OPTANO.Modeling.Optimization.ConstantExpression,System.Double)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="expression">The expression.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.op_Implicit(System.Double)~OPTANO.Modeling.Optimization.ConstantExpression">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.op_Implicit(System.Int32)~OPTANO.Modeling.Optimization.ConstantExpression">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.op_Multiply(System.Double,OPTANO.Modeling.Optimization.ConstantExpression)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="factor">The factor.</param>
      <param name="expression">The constant expression.</param>
      <returns>A new <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" />.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.op_Multiply(OPTANO.Modeling.Optimization.ConstantExpression,System.Double)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="expression">The expression.</param>
      <param name="factor">The factor.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.op_Subtraction(OPTANO.Modeling.Optimization.ConstantExpression,System.Double)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="expression">The expression.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.op_Subtraction(System.Double,OPTANO.Modeling.Optimization.ConstantExpression)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="constant">The constant.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ConstantExpression.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            The evaluate recursive.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The <see cref="T:System.Double" />.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConstantExpression.ConstantValue">
      <summary>
            Gets the constant.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConstantExpression.IsLinear">
      <summary>
            Gets or sets a value indicating whether this instance is linear.
            </summary>
      <value>
              Always <c>true</c> because a <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" /> is always linear.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConstantExpression.Terms">
      <summary>
            Gets the terms.
            </summary>
      <value>
              Always <c>null</c> because a <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" /> has no Terms.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConstantExpression.Variables">
      <summary>
            Gets the variables. 
            </summary>
      <value>
            Always <c>null</c> because a <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" /> has no Variables.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ConstantExpression.Constant">
      <summary>
            Gets the constant.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.ICanAsAConstraintRegisterAModel">
      <summary>
            The CanAsAConstraintRegisterAModel interface.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanAsAConstraintRegisterAModel.Register(OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInConstraints)">
      <summary>
            Registers the specified solver to work on this problem
            </summary>
      <param name="model">
            The solver.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanAsAConstraintRegisterAModel.Unregister(OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInConstraints)">
      <summary>
            Unregisters the specified model.
            </summary>
      <param name="model">
            The solver.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Constraint">
      <summary>
            Represents a constraint in a mathematical model formulation.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Constraint._lowerBound">
      <summary>
            Backing field for the lower bound.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Constraint._name">
      <summary>
            The <see cref="P:OPTANO.Modeling.Optimization.Constraint.Name" /> backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Constraint._upperBound">
      <summary>
            Backing field for the upper bound.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.#ctor(OPTANO.Modeling.Optimization.Expression,System.String,System.Double,System.Double,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> class.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <param name="name">
            The unique name for this constraint. If the name is <c>NullOrWhiteSpace</c>, a <c>base64</c> index will be generated for this constraint. 
            If <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>false</c>, the passed <paramref name="name" /> is discarded and a <c>base64</c> index is used instead. 
            </param>
      <param name="lowerBound">
            The lower bound.
            </param>
      <param name="upperBound">
            The upper bound.
            </param>
      <param name="stochasticStage">
            The stochastic stage of this constraint
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.Equals(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Compares the specified expressions.
            </summary>
      <param name="expression1">
            The first expression.
            </param>
      <param name="expression2">
            The second expression.
            </param>
      <returns>
            A <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> with lower and upper bound of zero:
            <c>0 &lt;= <paramref name="expression1" /> - <paramref name="expression2" /> &lt;= 0</c></returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.Equals(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Compares the expression to a constant.
            </summary>
      <param name="expression1">
            The expression.
            </param>
      <param name="constant">
            The constant.
            </param>
      <returns>
            A <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> with lower and upper bound of zero
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.GreaterThanOrEqual(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Compares two expressions whether the first expression is greater or equal the second expression.
            </summary>
      <param name="expression1">
            The first expression.
            </param>
      <param name="expression2">
            The second expression.
            </param>
      <returns>
            A <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> with lower bound of zero
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.GreaterThanOrEqual(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Compares the expression to a constant whether its greater or equal.
            </summary>
      <param name="expression1">
            The expression.
            </param>
      <param name="constant">
            The constant.
            </param>
      <returns>
            A <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> with lower bound of zero
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.LessThanOrEqual(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Compares two expressions whether the first expression is lower or equal the second expression.
            </summary>
      <param name="expression1">
            The first expression.
            </param>
      <param name="expression2">
            The second expression.
            </param>
      <returns>
            A <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> with upper bound of zero
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.LessThanOrEqual(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Compares the expression to a constant whether its less or equal.
            </summary>
      <param name="expression1">
            The expression.
            </param>
      <param name="constant">
            The constant.
            </param>
      <returns>
            A <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> with upper bound of zero
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.op_BitwiseOr(OPTANO.Modeling.Optimization.Constraint,OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Use this operator if you either want constraint1 or constraint2 or both to evaluate to true in a feasible solution.
            </summary>
      <param name="constraint1">The constraint1.</param>
      <param name="constraint2">The constraint2.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.op_BitwiseOr(System.Collections.Generic.List{OPTANO.Modeling.Optimization.Constraint},OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Use this operator if you either want the constraintGroup or constraint2 or both to evaluate to true in a feasible solution.
            </summary>
      <param name="constraintGroup">The constraints.</param>
      <param name="constraint2">The constraint2.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.op_LogicalNot(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Negates a constraint. If you have l&lt;x&lt;u, then this will be transformed into
            x&gt;u+epsilon and x&lt;l-epsilon
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>
            A Not representing the negated constraint.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Constraint.Where(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            This constraint should only hold if the provided condition also holds, in other words: if(condition) then 'this' must hold
            </summary>
      <param name="condition">
            The condition.
            </param>
      <returns>
            The <see cref="M:OPTANO.Modeling.Optimization.Constraint.Where(OPTANO.Modeling.Optimization.Constraint)" />.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Constraint.Expression">
      <summary>
            Expression of this constraint.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Constraint.LowerBound">
      <summary>
            Lower bound (left hand side) of this constraint.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Constraint.Name">
      <summary>
            Gets or sets the unique name of this constraint.
            <paramref name="value" /> mustn't be <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Constraint.StochasticStage">
      <summary>
             StochasticStage this  of this constraint
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Constraint.UpperBound">
      <summary>
            Upper bound (right hand side) of this constraint.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Constraint.RegisteredModels">
      <summary>
            Gets or sets the registered models.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.BranchingDirection">
      <summary>
            Branching direction for a <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.BranchingDirection.Down">
      <summary>
            Preferable branch down.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.BranchingDirection.Default">
      <summary>
            Have the solver choose banching direction (auto/default)
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.BranchingDirection.Up">
      <summary>
            Perferable branch up
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.ConstraintType">
      <summary>
            Specifies a type of constraint.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.Aggregation">
      <summary>
            A aggregation <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.VariableBound">
      <summary>
            A variable bound <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.SetPartition">
      <summary>
            A set partition <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.SetPacking">
      <summary>
            A set packing <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.SetCover">
      <summary>
            A set cover <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.Cardinality">
      <summary>
            A cardinality <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.EqualityKnapsack">
      <summary>
            A equality knapsack <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.BinPacking">
      <summary>
            A bin packing <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.InvariantKnapsack">
      <summary>
            A invariant knapsack <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.Knapsack">
      <summary>
            A knapsack <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.IntegerKnapsack">
      <summary>
            A integer knapsack <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.MixedBinary">
      <summary>
            A mixed binary <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.General">
      <summary>
            A general <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ConstraintType.LogicalConstraint">
      <summary>
            A logical constraint <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.FileType">
      <summary>
            The filetype of a model file
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.FileType.MPS">
      <summary>
            MPS
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.FileType.OSiL">
      <summary>
            OSiL
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.FileType.LP">
      <summary>
            LP
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.IndexValidationStyle">
      <summary>
            Defines the index validation style for <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.IndexValidationStyle.Disabled">
      <summary>
            No index validation.
            Use for production mode.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.IndexValidationStyle.Complete">
      <summary>
            Always enumerate the current index sets.
            This option is the slowest.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.IndexValidationStyle.Heuristic">
      <summary>
            Assume that the index sets are not extended after initialization of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />.
            Recommended setting during development.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.ModelBehavior">
      <summary>
            Describes the behavior of a model when adding constraints
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ModelBehavior.Manual">
      <summary>
            Variables in a constraint will not be added to the model, you need to do this manually beforehand
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ModelBehavior.Auto">
      <summary>
            Variables in a constraint will be added to the model automatically
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.NativeMultiObjectiveSupport">
      <summary>
            The native multi objective support.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.NativeMultiObjectiveSupport.Unsupported">
      <summary>
            No native support for multiobjective optimization. Let <c>OPTANO.Modeling</c> take care of all the required work.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.NativeMultiObjectiveSupport.WeightedObjectives">
      <summary>
            Native support for weighted objectives only.
            
            I.e. <c>z' := w1 * z1 + ... + wk * zk</c> (or similiar, depending on the solver's interpretation of weighted objectives).
            The weighted approach is the standard interpretation for all solvers that do not natively support weighted/hierarchical objectives within the OPTANO.Modeling framework.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.NativeMultiObjectiveSupport.HierarchicalWeightedObjectives">
      <summary>
            Native support for hierarchical, weighted objectives.
            
            If the Solver you try to connect via <c>OPTANO.Modeling</c> only supports <c>hierarchical</c> objectives, make sure to manually sum all <see cref="T:OPTANO.Modeling.Optimization.Objective" />s of the same <see cref="P:OPTANO.Modeling.Optimization.Objective.PriorityLevel" />, using the <see cref="P:OPTANO.Modeling.Optimization.Objective.Weight" />.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.ObjectiveSense">
      <summary>
            Sense of an <see cref="T:OPTANO.Modeling.Optimization.Objective" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ObjectiveSense.Minimize">
      <summary>
            Objective should be minimized.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.ObjectiveSense.Maximize">
      <summary>
            Objective should be maximized.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" /> operator replacement methods.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement.ReplaceWithDefaultMethod">
      <summary>
            Convert the <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" /> operator into <c>linear constraints</c> that can be handled by every MIP solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement.DoNotReplace">
      <summary>
            Do not replace. Should only be used, if the <c>SolverAdapter</c> can handle the <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" /> operator!
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Max" /> operator replacement methods.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement.ReplaceWithDefaultMethod">
      <summary>
            Convert the <see cref="T:OPTANO.Modeling.Optimization.Operators.Max" /> operator into <c>linear constraints</c> that can be handled by every MIP solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement.DoNotReplace">
      <summary>
            Do not replace. Should only be used, if the <c>SolverAdapter</c> can handle the <see cref="T:OPTANO.Modeling.Optimization.Operators.Max" /> operator!
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Floor" /> operator replacement methods.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement.ReplaceWithDefaultMethod">
      <summary>
            Convert the <see cref="T:OPTANO.Modeling.Optimization.Operators.Floor" /> operator into <c>linear constraints</c> that can be handled by every MIP solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement.DoNotReplace">
      <summary>
            Do not replace. Should only be used, if the <c>SolverAdapter</c> can handle the <see cref="T:OPTANO.Modeling.Optimization.Operators.Floor" /> operator!
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" /> operator replacement methods.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement.ReplaceWithDefaultMethod">
      <summary>
            Convert the <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" /> operator into <c>linear constraints</c> that can be handled by every MIP solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement.DoNotReplace">
      <summary>
            Do not replace. Should only be used, if the <c>SolverAdapter</c> can handle the <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" /> operator!
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Abs" /> operator replacement methods.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement.ReplaceWithDefaultMethod">
      <summary>
            Convert the <see cref="T:OPTANO.Modeling.Optimization.Operators.Abs" /> operator into <c>linear constraints</c> that can be handled by every MIP solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement.DoNotReplace">
      <summary>
            Do not replace. Should only be used, if the <c>SolverAdapter</c> can handle the <see cref="T:OPTANO.Modeling.Optimization.Operators.Abs" /> operator!
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.NotConstraintReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> constraint replacement methods
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.NotConstraintReplacement.ReplaceWithDefaultMethod">
      <summary>
            Convert the <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> constraint into a set of <c>linear constraints</c> that can be handled by every MIP solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.NotConstraintReplacement.DoNotReplace">
      <summary>
            Do not replace. Should only be used, if the <c>SolverAdapter</c> can handle <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> constraints!
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.OrConstraintReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> constraint replacement methods
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.OrConstraintReplacement.ReplaceWithDefaultMethod">
      <summary>
            Convert the <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> constraint into a set of <c>linear constraints</c> that can be handled by every MIP solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.OrConstraintReplacement.DoNotReplace">
      <summary>
            Do not replace. Should only be used, if the <c>SolverAdapter</c> can handle <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> constraints!
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.WhereConstraintReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> constraint replacement methods
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.WhereConstraintReplacement.ReplaceWithDefaultMethod">
      <summary>
            Convert the <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> constraint into a set of <c>linear constraints</c> that can be handled by every MIP solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.WhereConstraintReplacement.DoNotReplace">
      <summary>
            Do not replace. Should only be used, if the <c>SolverAdapter</c> can handle <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> constraints!
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.SOSType">
      <summary>
            The SOS type
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.SOSType.S1">
      <summary>
            A SOS1 is a set of variables in which <c>at most one</c> variable may be <c>positive</c> at an integer feasible solution.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2">
      <summary>
            A SOS2 is a set of variables in which <c>at most two</c> variables may be positive at an integer feasible solution, and moreover, any positive variables must be <c>adjacent</c> in the ordering specified by the ordering values.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.SOSType.S3">
      <summary>
            The set of variables appearing in an equation with only binary variables and +1 or -1 coefficients, and a right-hand-side value of 1 - (number of '-1 coefficients').  This is a special case of SOS1.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.SOSHandling">
      <summary>
            Enum to indicate the handling of a certain SOS type.
            Use this enum to indicate the support for each <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSType" /> individually.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native">
      <summary>
            SOS of type x is supported by this Solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Emulated">
      <summary>
            SOS of type x is not supported by this Solver and needs to be emulated by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Enums.VariableType">
      <summary>
            Type of a <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.VariableType.Integer">
      <summary>
            Whole number (no floating point).
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.VariableType.Continuous">
      <summary>
            Continuous number (floating point).
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary">
      <summary>
            A binary number.
            I.e. a <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Integer" /> bounds in <c>{0, 1}</c>.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.IExpressionVisitor`1">
      <summary>
            Interface is used to transform <see cref="T:OPTANO.Modeling.Optimization.Expression" />s into a form that can be understood by a specific <see cref="T:OPTANO.Modeling.Optimization.Interfaces.ISolver" />.
            </summary>
      <typeparam name="T">
            The type of the transformed <see cref="T:OPTANO.Modeling.Optimization.Expression" /></typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IExpressionVisitor`1.Visit(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Parses the <paramref name="exp" />.
            </summary>
      <param name="exp">
            The expression.
            </param>
      <returns>
            The transformed <see cref="T:OPTANO.Modeling.Optimization.Expression" /> of type <typeparamref name="T" />.
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Exporter.ExpressionNormalizer">
      <summary>
             Class used for normalizing an expression.
             ConstantExpressions should be added up or expanded (to show if the expression is linear or quadratic or nonlinear)
             Another goal is to eliminate as many ConstantExpressions as possible.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.ExpressionNormalizer.Visit(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Returns the normalized expression
            </summary>
      <param name="expression">
            The Optimization.Model.Expression
            </param>
      <returns>
            The normalized expression
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.ExpressionNormalizer.GetTermsToAdd(OPTANO.Modeling.Optimization.Operators.Interfaces.IPlus,System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Term}@,System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Operators.Interfaces.ITimes}@,System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Operators.Interfaces.IPlus}@,System.Double@,System.Double)">
      <summary>
            Returns all expressions of type Term, ITimes, IPlus and a factor of type double of an IPlus expression.
            </summary>
      <param name="plusIn">
            The expression of type IPlus for which all elements should be identified
            </param>
      <param name="termsOut">
            A list of expressions of type Term contained in the IPlus expression
            </param>
      <param name="timesOut">
            A list of expressions of type ITimes contained in the IPlus expression
            </param>
      <param name="plusOut">
            A list of expressions of type IPlus contained in the IPlus expression
            </param>
      <param name="factor">
            The factor contained in the IPlus expression
            </param>
      <param name="extFactor">
            The factor which is multiplied with the whole IPlus expression, if non is specified the default value is 1, so that the expression is not falsified
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.ExpressionNormalizer.GetTermsToMult(OPTANO.Modeling.Optimization.Operators.Interfaces.ITimes,System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Term}@,System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Operators.Interfaces.ITimes}@,System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Operators.Interfaces.IPlus}@,System.Double@,System.Double)">
      <summary>
            Returns all expressions of type Term, ITimes, IPlus and a factor of type double of an ITimes expression.
            </summary>
      <param name="timesIn">
            The expression of type ITimes for which all elements should be identified
            </param>
      <param name="termsOut">
            A list of expressions of type Term contained in the ITimes expression
            </param>
      <param name="timesOut">
            A list of expressions of type ITimes contained in the ITimes expression
            </param>
      <param name="plusOut">
            A list of expressions of type IPlus contained in the ITimes expression
            </param>
      <param name="factor">
            The factor contained in the ITimes expression
            </param>
      <param name="extFactor">
            The factor which is multiplied with the whole ITimes expression, if non is specified the default value is 1, so that the expression is not falsified
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.ExpressionNormalizer.VisitConstantExpression(OPTANO.Modeling.Optimization.ConstantExpression)">
      <summary>
            Returns the ConstantExpression
            </summary>
      <param name="ConstantExpression">
            The ConstantExpression
            </param>
      <returns>
            The ConstantExpression
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.ExpressionNormalizer.VisitIPlus(OPTANO.Modeling.Optimization.Operators.Interfaces.IPlus,System.Double)">
      <summary>
            Normalizes an expression of the type IPlus, multiplied by an external factor.
            </summary>
      <param name="iPlus">
            The expression of type IPlus
            </param>
      <param name="extFactor">
            The external multiplier
            </param>
      <returns>
            The normalized expression
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.ExpressionNormalizer.VisitITimes(OPTANO.Modeling.Optimization.Operators.Interfaces.ITimes,System.Double)">
      <summary>
            Normalizes an expression of the type ITimes, multiplied by an external factor.
            </summary>
      <param name="iTimes">
            The expression of type ITimes
            </param>
      <param name="extFactor">
            The external multiplier
            </param>
      <returns>
            The normalized expression
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.ExpressionNormalizer.VisitTerm(OPTANO.Modeling.Optimization.Term,System.Double)">
      <summary>
            Returns an Term expression, multiplied by the factor (in case the factor is not 0)
            </summary>
      <param name="Term">
            The orignal Term
            </param>
      <param name="factor">
            The multiplier, default is 0(in this case the original Term is returned)
            </param>
      <returns>
            The possibly altered Term
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.ExpressionNormalizer.expandPlus(System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Operators.Interfaces.IPlus},System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Term})">
      <summary>
            Expands expressions of type Term and IPlus and returns an IPlus expression
            </summary>
      <param name="plus">
            The list of expression of type IPlus
            </param>
      <param name="terms">
            The list of expression of type Term
            </param>
      <returns>
            The expanded expression of type IPlus
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Exporter.LPExporter">
      <summary>
            This class can export a <see cref="T:OPTANO.Modeling.Optimization.Model" /> into a stream, using the <c>LP</c> file format.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPExporter._stringBuilder">
      <summary>
            The _string builder.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPExporter._binaryVariables">
      <summary>
            The binary variables.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPExporter._encoder">
      <summary>
            The encoder.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPExporter._filestream">
      <summary>
            The filestream.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPExporter._generalVariables">
      <summary>
            The general variables.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPExporter._model">
      <summary>
            The model.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPExporter._constraints">
      <summary>
            All normalized constraints
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPExporter._objective">
      <summary>
            Normalized objective
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Exporter.LPExporter" /> class. 
            Creates a new instance of class <see cref="T:OPTANO.Modeling.Optimization.Exporter.LPExporter" />.
            </summary>
      <param name="filestream">
            The stream in which the model should be written.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.Write(OPTANO.Modeling.Optimization.Model)">
      <summary>
            Delegates to a method for each part of a LP file.
            </summary>
      <param name="model">
            The model that should be exported.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.Binary">
      <summary>
            Writes all binary variables into the strem.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.Constraints">
      <summary>
            Writes all constraints into the stream, including name, the corresponding expression and the right-hand side.
            Also included are constraints modelling sos3 sets.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.End">
      <summary>
            Writes "End" into the stream. Symbolizes the end of the file.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.General">
      <summary>
            Writes all general variables into the stream.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.ModelName">
      <summary>
            Writes the model name as a comment into the stream.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.Objective">
      <summary>
            Writes the objective into the stream, including name and the corresponding expression.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.ProcessConstraint(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            The process constraint.
            </summary>
      <param name="constraint">
            The constraint.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.SOS">
      <summary>
            Writes all variables included in a SOS1 or SOS2 set into the stream.
            SOS 3 is modeled in the "Constraints section".
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.Variables">
      <summary>
            Writes all variables into the stream.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPExporter.WriteSOS(System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double},OPTANO.Modeling.Optimization.Enums.SOSType,System.Int32)">
      <summary>
            Method to write all variables of a SOS set into the stream.
            </summary>
      <param name="sosset">
            The SOS set
            </param>
      <param name="sosType">
            The type of the SOS set
            </param>
      <param name="counter">
            The i-th element being written into the stream
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Exporter.MPSExporter">
      <summary>
            This class can export a model into a stream, using the MPS file format.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter._stringBuilder">
      <summary>
            The _string builder.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter.changedRowNames">
      <summary>
            The changed row names.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter.changedVariableNames">
      <summary>
            The changed variable names.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter.encoder">
      <summary>
            The encoder.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter.filestream">
      <summary>
            The filestream.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter.model">
      <summary>
            The model.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter.range">
      <summary>
            The range.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter.rhs">
      <summary>
            The rhs.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter.rows">
      <summary>
            The rows.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter.variables">
      <summary>
            The variables.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter._constraints">
      <summary>
            all normalized constraints
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.MPSExporter._objective">
      <summary>
            all normalized objectivs
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Exporter.MPSExporter" /> class. 
            Creates a new instance of class <see cref="T:OPTANO.Modeling.Optimization.Exporter.MPSExporter" />.
            </summary>
      <param name="filestream">
            The stream in which the model should be written.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.Write(OPTANO.Modeling.Optimization.Model)">
      <summary>
            Delegates to a method for each section of a MPS file.
            </summary>
      <param name="model">
            The model that should be exported.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.AnalyseConstraint(OPTANO.Modeling.Optimization.Constraint,System.Double)">
      <summary>
            Analyse how the constraint is build up. E.g. if all terms are multiplied by -1.
            </summary>
      <param name="constraint">
            The constraint to analyse
            </param>
      <param name="bound">
            The conputed bound
            </param>
      <returns>
            True if the coefficients in all terms must be multiplied by -1, else false
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.BOUNDS">
      <summary>
            Writes for all variales the upper bound or the lower bound or the bound type and the corresponding value into te stream.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.COLUMNS">
      <summary>
            Writes for each non-zero element the corresponding rows(constraint or objective) into the stream.
            For integer variables or sos sets a MARKER is used to indicate the meaning, the start and the end.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.ENDATA">
      <summary>
            Writes the ENDATA section into the stream, indicating the end of the file.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.FindConstantExpressionInITimes(OPTANO.Modeling.Optimization.Operators.Interfaces.ITimes,OPTANO.Modeling.Optimization.Constraint,System.Double)">
      <summary>
            Seaches for a constant in an ITimes expression and returns true if the constant is -1.
            </summary>
      <param name="expression">
            The ITimes expression
            </param>
      <param name="constraint">
            The constraint in which the expression is included
            </param>
      <param name="bound">
            The computed bound
            </param>
      <returns>
            True if the coefficients in all terms must be multiplied by -1, else false
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.NAME">
      <summary>
            Writes the model name into the NAME section into the stream.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.RANGES">
      <summary>
            Writes the range for each constraint, having an upper and a lower bound, into the stream.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.RHS">
      <summary>
            Writes for all constraints the name and the rhs-value into the stream.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.ROWS">
      <summary>
            Writes all names of all constraints and the objective (row) into the stream, including a type indicating the rhs-type of the constraint or objective.
            For each row the non-zero elements and the corresponding coefficients, the rhs value and the range are saved.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.SOS">
      <summary>
            Writes all members for each SOS2 set into the SOS section into the stream.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.MPSExporter.SOSMarker(System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double}},OPTANO.Modeling.Optimization.Enums.SOSType)">
      <summary>
            Writes a MARKER block for a sos set into the stream.
            </summary>
      <param name="sosSets">
            The sos set, which should be _stringBuilder.Appended.
            </param>
      <param name="sosType">
            The sos-type of the sos set.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor">
      <summary>
            A class taking an Expression and returning the corresponding representation in LP file format.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor._count">
      <summary>
            The _count.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor.changedVariableNames">
      <summary>
            The changed variable names.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor.lineBreak">
      <summary>
            The line break.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor.#ctor(System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor" /> class. 
            Creates a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor" /> class.
            </summary>
      <param name="changedVariableNames">
            The reference to a Dictionary saving all variables which are truncaded and their original name
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor.TimesQuadratic(System.Double,OPTANO.Modeling.Optimization.Variable[])">
      <summary>
            Returns a string representing a quadratic expression in LP file format.
            </summary>
      <param name="factor">
            The factor
            </param>
      <param name="vars">
            The names of the variables
            </param>
      <returns>
            The string representing the quadratic expression
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor.TimesScalar(System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Returns a string representing a scalar product in LP file format.
            </summary>
      <param name="factor">
            The factor
            </param>
      <param name="expr">
            The Expression
            </param>
      <returns>
            The string representing the scalar product
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor.VisitConstant(OPTANO.Modeling.Optimization.ConstantExpression,System.Boolean)">
      <summary>
            Returns a string representing an ConstantExpression in LP file format.
            </summary>
      <param name="constantExpression">
            The ConstantExpression
            </param>
      <param name="negate">
            True if the constant must be negated
            </param>
      <returns>
            The string representing the ConstantExpression
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor.VisitPlus(OPTANO.Modeling.Optimization.Operators.Interfaces.IPlus,System.Boolean)">
      <summary>
            Returns a string representing an expression of type IPlus in LP file format.
            </summary>
      <param name="plus">
            The expression of type IPlus
            </param>
      <param name="negate">
            True if all elements must be negated
            </param>
      <returns>
            The string representing the expression of type IPlus
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor.VisitTerm(OPTANO.Modeling.Optimization.Term,System.Boolean)">
      <summary>
            Returns a string representing an Term in LP file format.
            </summary>
      <param name="term">
            The Term
            </param>
      <param name="negate">
            True if the term must be negated
            </param>
      <returns>
            The string representing the Term
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.LPStringExprVisitor.VisitTimes(OPTANO.Modeling.Optimization.Operators.Interfaces.ITimes,System.Boolean)">
      <summary>
            Returns a string representing an expression of type ITimes in LP file format.
            </summary>
      <param name="times">
            The expression of type ITimes
            </param>
      <param name="negate">
            True if all elements must be negated
            </param>
      <returns>
            The string representing the expression of type ITimes
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow">
      <summary>
            Wrapper class that contains statistics for a single <see cref="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.Variable" />.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow" /> class.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.#ctor(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow" /> class.
            </summary>
      <param name="variable">
            The variable that is represented by this row.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.CopyValuesFromVariable(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            The copy values from variable.
            NOTE: Not all values can be copied directly from the variable.
            E.g. the indices are not stored within the variable, but in the containing VariableCollection!
            </summary>
      <param name="variable">
            The variable.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.SetRemainingValues(System.String,System.String,System.Double,System.Nullable{System.Boolean},System.Int32,System.Object[])">
      <summary>
            Sets the values that cannot be copied from the <see cref="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.Variable" /> itself.
            </summary>
      <param name="variableCollectionName">
            The name of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> that contains the <see cref="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.Variable" /> for this <see cref="T:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow" />.
            </param>
      <param name="otherName">
            The other (Short-/LongName), that has not been set yet.
            </param>
      <param name="objectivePrice">
            The objective function factor for the variable
            </param>
      <param name="removedInProcess">
            True, if variable was removed in preprocessing. False, else.
            </param>
      <param name="numberOfTermsInRestrictions">
            Number of model rows that the variable appears in
            </param>
      <param name="indices">
            The variable collection index for this variable
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.ToString">
      <summary>
            Returns the CSV representation of the <see cref="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.Variable" />.
            Uses a semicolon as default separator.
            Double values are use a '.' as decimal point.
            </summary>
      <returns>
            The <see cref="T:System.String" />.
            The string.
            </returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.ToString(System.String,System.Boolean)">
      <summary>
            Returns the CSV representation of the <see cref="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.Variable" />.
            Uses a semicolon as default separator.
            Double values are use a '.' as decimal point.
            </summary>
      <param name="seperator">
            The separator. Fallback value for 'null' or '.' will be '';'
            </param>
      <param name="unhandledVariable">
        <c>true</c> to print statistics for an <c>unhandled</c> variable.
            I.e. the <see cref="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.ShortName" /> only will be printed for variables that are handled by a <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            The string.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.Indices">
      <summary>
            Gets or sets the indices.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.LongName">
      <summary>
            Gets or sets the long name.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.LowerBound">
      <summary>
            Gets or sets the lower bound.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.NumberOfTermsInRestrictions">
      <summary>
            Gets or sets the number of terms in restrictions.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.ObjectivePrice">
      <summary>
            Gets or sets the objective price.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.RemovedInPreprocess">
      <summary>
            Gets or sets a value indicating whether removed in preprocess.
            Null indicates that the solver does not support the computation of the removed variable set.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.ShortName">
      <summary>
            Gets or sets the short name.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.SolutionValue">
      <summary>
            Gets or sets the solution value.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.UpperBound">
      <summary>
            Gets or sets the upper bound.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.Variable">
      <summary>
            Gets or sets the variable.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow.VariableCollectionName">
      <summary>
            Gets or sets the referenced variable collection
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.ExpressionNormalizer">
      <summary>
            This is a helper class to normalize <see cref="T:OPTANO.Modeling.Optimization.Expression" />s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ExpressionNormalizer.MyEmptyDict">
      <summary>
            An empty dictionary to pass to <see cref="N:MathNet" /> when evaluating constant expressions.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.Visit(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Visits and normalizes the given expression.
            Uses MathNet library to expand expressions.
            </summary>
      <param name="exp">
            The expression.
            </param>
      <returns>
            The normalized <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.ReplaceLinearTimes(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Replaces all <see cref="T:OPTANO.Modeling.Optimization.Operators.Times" />-Operators from the given <paramref name="exp" />.
            The <paramref name="exp" /> needs to be <see cref="P:OPTANO.Modeling.Optimization.Expression.IsLinear" />.
            </summary>
      <param name="exp">
            The linear expression to clean.
            </param>
      <returns>
            An Expression that only consists of <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" />, <see cref="T:OPTANO.Modeling.Optimization.Term" />, and <see cref="T:OPTANO.Modeling.Optimization.Operators.Plus" />.
            </returns>
      <exception cref="T:System.ArgumentException">
            Thrown, if <paramref name="exp" /> is not <see cref="P:OPTANO.Modeling.Optimization.Expression.IsLinear" />.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.MultiplyConstantWithVariableExpression(OPTANO.Modeling.Optimization.ConstantExpression,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Multiply a constant with variable expression that does not contain any <see cref="T:OPTANO.Modeling.Optimization.Operators.Times" /> operator.
            </summary>
      <param name="constantPart">
            The constant part.
            </param>
      <param name="nonTimesVariableExp">
            The expression to multiply <paramref name="constantPart" /> with.
            Must only contain <see cref="T:OPTANO.Modeling.Optimization.Operators.Plus" />, <see cref="T:OPTANO.Modeling.Optimization.Term" />, or <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" /> as sub expressions.
            </param>
      <returns>
        <paramref name="constantPart" /> * <paramref name="nonTimesVariableExp" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.IsEquivalentToTerm(MathNet.Symbolics.Expression.Product)">
      <summary>
            Checks whether the given <paramref name="product" /> is equivalent to a <see cref="T:OPTANO.Modeling.Optimization.Term" />.
            This is given, if the <see cref="T:MathNet.Symbolics.Expression.Product" /> consists of 2 members. One has to be an <see cref="T:MathNet.Symbolics.Expression.Approximation" /> or a <see cref="T:MathNet.Symbolics.Expression.Number" /> and the other needs to be an <see cref="T:MathNet.Symbolics.Expression.Identifier" />, that is no <c>artificial</c> placeholder for unsupported functions in MathNet.
            </summary>
      <param name="product">
            The product.
            </param>
      <returns>
        <c>true</c>, iff product is <c>const * variable</c> or <c>variable * const</c>.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.GetDoubleValueFromApproximation(MathNet.Symbolics.Expression.Approximation)">
      <summary>
            Retrieves a <see cref="T:System.Double" /> value from the given <see cref="T:MathNet.Symbolics.Expression.Approximation" />.
            If the <paramref name="approx" /><see cref="P:MathNet.Symbolics.Expression.Approximation.Item" />.<c>IsComplex</c>, only the <c>Real</c> part of the number will be returned.
            </summary>
      <param name="approx">
            The <see cref="T:MathNet.Symbolics.Expression.Approximation" /></param>
      <returns>
            The <see cref="T:System.Double" /> value.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.MergeOperatorExpression(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Merges all sub-expressions recursively.
            </summary>
      <param name="exp">
            The expression to merge.
            </param>
      <returns>
            The merged <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.NormalizeNonLinearExpression(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Normalized the given <see cref="T:OPTANO.Modeling.Optimization.Expression" /> according to the rules that are defined in #15550.
            First, the expression is parsed recursively into a <see cref="T:MathNet.Symbolics.Expression" /> and then normalized.
            Afterwards, the normalized <see cref="T:MathNet.Symbolics.Expression" /> then is parsed back into an <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </summary>
      <param name="exp">
            The expression to normalize.
            </param>
      <returns>
            The normalized <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.TransformToMathNet(OPTANO.Modeling.Optimization.Expression,System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,MathNet.Symbolics.Expression},System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,OPTANO.Modeling.Optimization.Operators.OperatorExpression},System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,System.Collections.Generic.List{MathNet.Symbolics.Expression}})">
      <summary>
            Method transforms the given <paramref name="exp" /> into a <see cref="N:MathNet.Symbolics" /> expression tree.
            </summary>
      <param name="exp">
                The <see cref="T:OPTANO.Modeling.Optimization.Expression" /> to transform
            </param>
      <param name="optanoVarToSymbol">
                The <see cref="T:MathNet.Symbolics.Symbol" />s (casted as <see cref="T:MathNet.Symbolics.Expression" />) for each OPTANO.Modeling <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            </param>
      <param name="unsupportedOperatorExpressions">
            This Dictionary will be filled with dummy Symbols (casted as Expr), mapping to OperatorExpressions that are not supported by MathNet, such as <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" />, ... .
            </param>
      <param name="parsedSubExpressions">
                This dictionary contains the parsed subexpressions that have been replaced by a new dummy symbol, because <see cref="N:MathNet" /> does not support them. E.g. Ceil, Floor, ... .
                The dummy symbol that is also stored in <paramref name="unsupportedOperatorExpressions" /> is used as a key, the value list contains all parsed arguments for the original function. Note that the arguments also may contain expressions with unsupported operators, etc. They have been replaced in the same way.
            </param>
      <returns>
            The transformed expression, 
            or <c>null</c> if the <paramref name="exp" /> is not an <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorExpression" />. 
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.TransformToMathNetRecursively(OPTANO.Modeling.Optimization.Expression,System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,MathNet.Symbolics.Expression},System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,OPTANO.Modeling.Optimization.Operators.OperatorExpression},System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,System.Collections.Generic.List{MathNet.Symbolics.Expression}})">
      <summary>
            Transforms the given <paramref name="optanoExpression" /> and all sub-expressions into a <see cref="T:System.String" /> that can be parsed by <see cref="N:MathNet" />.
            </summary>
      <param name="optanoExpression">
                The <see cref="T:OPTANO.Modeling.Optimization.Expression" /> to transform
            </param>
      <param name="optanoVarToSymbol">
                The <see cref="T:MathNet.Symbolics.Symbol" />s (casted as <see cref="T:MathNet.Symbolics.Expression" />) for each OPTANO.Modeling <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            </param>
      <param name="unsupportedOperatorExpressions">
            This Dictionary will be filled with dummy Symbols (casted as Expr), mapping to OperatorExpressions that are not supported by MathNet, such as <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" />, ... .
            </param>
      <param name="parsedSubExpressions">
                This dictionary contains the parsed subexpressions that have been replaced by a new dummy symbol, because <see cref="N:MathNet" /> does not support them. E.g. Ceil, Floor, ... .
                The dummy symbol that is also stored in <paramref name="unsupportedOperatorExpressions" /> is used as a key, the value list contains all parsed arguments for the original function. Note that the arguments also may contain expressions with unsupported operators, etc. They have been replaced in the same way.
            </param>
      <returns>
            The converted <see cref="T:MathNet.Symbolics.Expression" />.
            </returns>
      <exception cref="T:System.NotImplementedException">
            Thrown, if unknown operators occur. This function needs to be extended, if new <see cref="N:OPTANO.Modeling.Optimization.Operators" /> are introduced.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.TransformToOptanoExpression(MathNet.Symbolics.Expression,System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,OPTANO.Modeling.Optimization.Variable},System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,OPTANO.Modeling.Optimization.Operators.OperatorExpression},System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,System.Collections.Generic.List{MathNet.Symbolics.Expression}})">
      <summary>
            Transforms the given <see cref="T:MathNet.Symbolics.Expression" /> to OPTANO.Modeling <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </summary>
      <param name="mathNetExpression">
            The <see cref="N:MathNet" /> expresion.
            </param>
      <param name="symbolToOptanoVariable">
            Dictionary that maps the surrogate <see cref="T:MathNet.Symbolics.Symbol" />s (parsed as <see cref="T:MathNet.Symbolics.Expression" /> to the "original" <see cref="T:OPTANO.Modeling.Optimization.Variable" />s.
            </param>
      <param name="unsupportedOperators">
            This Dictionary will be filled with dummy Symbols (casted as Expr), mapping to OperatorExpressions that are not supported by MathNet, such as <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" />, ... .
            </param>
      <param name="parsedSubExpressions">
            The parsed subexpressions.
                Key: The dummy symbol that was created for the replaced <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorExpression" />. It is also stored as a Key in <paramref name="unsupportedOperators" />
                Value: List of arguments to pass to the function that is specified by the dummy symbol.
            </param>
      <returns>
            The normalized <see cref="T:OPTANO.Modeling.Optimization.Expression" /> that has been restored from the <paramref name="mathNetExpression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExpressionNormalizer.TransformToOptanoRecursively(MathNet.Symbolics.Expression,System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,OPTANO.Modeling.Optimization.Variable},System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,OPTANO.Modeling.Optimization.Operators.OperatorExpression},System.Collections.Generic.Dictionary{MathNet.Symbolics.Expression,System.Collections.Generic.List{MathNet.Symbolics.Expression}})">
      <summary>
            Builds an Optano-<see cref="T:OPTANO.Modeling.Optimization.Expression" /> that is equivalent to the given <see cref="N:MathNet" /><see cref="T:MathNet.Symbolics.Expression" />.
            </summary>
      <param name="mathNetExpression">
            The <see cref="N:MathNet" /> expresion.
            </param>
      <param name="symbolToOptanoVariable">
            Dictionary that maps the surrogate <see cref="T:MathNet.Symbolics.Symbol" />s (parsed as <see cref="T:MathNet.Symbolics.Expression" /> to the "original" <see cref="T:OPTANO.Modeling.Optimization.Variable" />s.
            </param>
      <param name="unsupportedOperators">
            This Dictionary will be filled with dummy Symbols (casted as Expr), mapping to OperatorExpressions that are not supported by MathNet, such as <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" />, ... .
            </param>
      <param name="parsedSubExpressions">
            The parsed subexpressions.
                Key: The dummy symbol that was created for the replaced <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorExpression" />. It is also stored as a Key in <paramref name="unsupportedOperators" />
                Value: List of arguments to pass to the function that is specified by the dummy symbol.
            </param>
      <returns>
            The normalized sub-<see cref="T:OPTANO.Modeling.Optimization.Expression" /> that has been restored from the <paramref name="mathNetExpression" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            Thrown, if an unknown function prefix is contained in the <paramref name="parsedSubExpressions" />.
            </exception>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.ExtensionMethods">
      <summary>
            Some ExtensionsMethods that extend the Model and its fields.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ExtensionMethods.UnhandledVariableGroupName">
      <summary>
            Name of variable group of all unhandled variables
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExtensionMethods.IsAlmost(System.Double,System.Double,System.Double[])">
      <summary>
            Checks if the <see cref="T:System.Double" /><paramref name="value" /> is equal to one of the parameters <paramref name="compareValue" /> or <paramref name="optionalCompareValues" />, with respect to a <c>tolerance</c> of <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" />.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="compareValue">
            The compare Value.
            </param>
      <param name="optionalCompareValues">
            The optional compare values.
            </param>
      <returns>
        <c>true</c>, if <see cref="M:System.Math.Abs(System.Double)" />(<paramref name="value" /> - <c>compareValue</c>) &lt;= <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" /><c>or</c> for any of the <paramref name="optionalCompareValues" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExtensionMethods.IsInRange(System.Double,System.Double,System.Double)">
      <summary>
            Checks if the <see cref="T:System.Double" /><paramref name="value" /> is in the <c>range</c> of <c>[<paramref name="minValue" />, <paramref name="maxValue" />]</c>, with respect to <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" />.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="minValue">
            The minimum value of the <c>range</c>.
            </param>
      <param name="maxValue">
            The maximum value of the <c>range</c>.
            </param>
      <returns>
        <c>true</c>, iff 
            
            <paramref name="value" /> &gt;= <paramref name="minValue" /> - <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" /><c>and</c><paramref name="value" /> &lt;= <paramref name="maxValue" /> + <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExtensionMethods.IsLowerBoundConstraint(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Checks if the constraint's <see cref="P:OPTANO.Modeling.Optimization.Constraint.LowerBound" /> is <c>not</c><see cref="F:System.Double.NegativeInfinity" />.
            </summary>
      <param name="constraint">
            The constraint.
            </param>
      <returns>
        <c>true</c>, iff <c><see cref="P:OPTANO.Modeling.Optimization.Constraint.LowerBound" /> &gt; <see cref="F:System.Double.NegativeInfinity" /></c>.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExtensionMethods.IsRangeConstraint(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Checks if the <paramref name="constraint" /> is a <c>range constraint</c>.
            I.e. <c><see cref="P:OPTANO.Modeling.Optimization.Constraint.LowerBound" /> &gt; <see cref="F:System.Double.NegativeInfinity" /></c> 
            
            and
            
            <c><see cref="P:OPTANO.Modeling.Optimization.Constraint.UpperBound" /> &lt; <see cref="F:System.Double.PositiveInfinity" /></c></summary>
      <param name="constraint">
            The constraint.
            </param>
      <returns>
        <c>true</c>, iff constraint is a <c>range constraint</c>.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExtensionMethods.IsUpperBoundConstraint(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Checks if the constraint's <see cref="P:OPTANO.Modeling.Optimization.Constraint.UpperBound" /> is <c>not</c><see cref="F:System.Double.PositiveInfinity" />.
            </summary>
      <param name="constraint">
            The constraint.
            </param>
      <returns>
        <c>true</c>, iff <c><see cref="P:OPTANO.Modeling.Optimization.Constraint.UpperBound" /> &lt; <see cref="F:System.Double.PositiveInfinity" /></c>.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExtensionMethods.ParseToEnumMember``1(System.String,System.Boolean)">
      <summary>
            Tries to parse the given <paramref name="memberName" /> into a member of the specified <see cref="T:System.Enum" /><typeparamref name="TEnumType" />.
            If <paramref name="memberName" /> is not a member of <typeparamref name="TEnumType" />, <c>default(<typeparamref name="TEnumType" /></c> will be returned.
            </summary>
      <param name="memberName">
            The member name.
            </param>
      <param name="ignoreCase">
            Specifies, if the case should be ignored.
            </param>
      <typeparam name="TEnumType">
            The target <see cref="T:System.Enum" /> type.
            </typeparam>
      <returns>
            The member of the <typeparamref name="TEnumType" />.
            Returns <c>default</c>(<typeparamref name="TEnumType" />), if <paramref name="memberName" /> cannot be parsed correctly.
            </returns>
      <exception cref="T:System.ArgumentException">
            Thrown, if <typeparamref name="TEnumType" /> is not an <see cref="T:System.Enum" />.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExtensionMethods.WriteCSV(System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow},System.String)">
      <summary>
            Writes the Variable Statitics into CSV files
            </summary>
      <param name="result">
            The variable statistics to export
            </param>
      <param name="folder">
            folder, to place the files. 
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExtensionMethods.ExportVariableStatistics(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Exporter.VariableStatisticRow},System.String,System.String)">
      <summary>
            The export variable statistics of a single variable collection to a CSV File. Filename is collectionname.csv in the given folder
            </summary>
      <param name="variableStatistics">
            The variable statistics to export
            </param>
      <param name="collectionName">
            The collection name, used as the filename
            </param>
      <param name="folder">
            The folder to export into. Default is <c>VariableStatistics</c></param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ExtensionMethods.IsTriviallyFeasible(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Checks if a constraint is trivially feasible. A trivially feasible <see cref="T:OPTANO.Modeling.Optimization.Constraint" /><c>mustn't</c> be added to a <see cref="T:OPTANO.Modeling.Optimization.Model" />!
            A constraint is trivially feasible, if it does not contain any <see cref="T:OPTANO.Modeling.Optimization.Variable" /><c>AND</c>
            the LB(/UB) is set to a value other than <see cref="F:System.Double.NegativeInfinity" />(/<see cref="F:System.Double.PositiveInfinity" />) <c>AND</c>
            LB &lt;= <see cref="P:OPTANO.Modeling.Optimization.Expression.Constant" /> and/or UB &gt;= <see cref="P:OPTANO.Modeling.Optimization.Expression.Constant" />.
            </summary>
      <param name="constraint">
            The constraint to check.
            </param>
      <returns>
            True, iff the <see cref="P:OPTANO.Modeling.Optimization.Constraint.Expression" /> is trivially feasible.
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.LPReader">
      <summary>
            The lp reader.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.LPReader.LpConstraintType">
      <summary>
            The lp constraint type.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.LPReader.ConstraintHelperClass">
      <summary>
            The constraint helper class.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.LPReader.ConstraintHelperClass.LpConstraintType">
      <summary>
            Gets or sets the lp constraint type.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.LPReader.ConstraintHelperClass.Name">
      <summary>
            Gets or sets the name.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.LPReader.ConstraintHelperClass.Rhs">
      <summary>
            Gets or sets the rhs.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.LPReader.ConstraintHelperClass.SumExpressionBuilder">
      <summary>
            Gets or sets the sum expression builder.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.LPReader._constraints">
      <summary>
            The _constraints.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.LPReader._model">
      <summary>
            The _model.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.LPReader._objectiveSumBuilder">
      <summary>
            The _objective sum builder.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.LPReader._variables">
      <summary>
            The _variables.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.LPReader._objectiveName">
      <summary>
            The _objective name.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.LPReader._objectiveSense">
      <summary>
            The _objective sense.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.LPReader.#ctor(OPTANO.Modeling.Optimization.Model)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.LPReader" /> class.
            </summary>
      <param name="model">
            The model.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.LPReader.ReadLP(System.IO.Stream)">
      <summary>
            The read lp.
            </summary>
      <param name="filestream">
            The filestream.
            </param>
      <exception cref="T:System.ArgumentException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.LPReader.AddVariable(System.String)">
      <summary>
            The add variable.
            </summary>
      <param name="variableName">
            The variable name.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.LPReader.ParseExpression(System.String[],OPTANO.Modeling.Optimization.SumExpressionBuilder)">
      <summary>
            The parse expression.
            </summary>
      <param name="split">
            The split.
            </param>
      <param name="sumExpressionBuilder">
            The sum expression builder.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.LpParsingException">
      <summary>
            The lp parsing exception.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.LpParsingException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.LpParsingException" /> class.
            </summary>
      <param name="message">
            The message.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.MpsParsingException">
      <summary>
            An MPSParsingException is thrown when there is an error while parsing an MPS file
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.MpsParsingException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.MpsParsingException" /> class. 
            Creates a new MpsParsingException
            </summary>
      <param name="message">
            The message for the user
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.MpsReader">
      <summary>
            The mps reader.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.MpsReader.MpsBoundType">
      <summary>
            The mps bound type.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.MpsReader.MpsConstraintType">
      <summary>
            The mps constraint type.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.MpsReader._constraintRange">
      <summary>
            The _constraint range.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.MpsReader._constraintTypes">
      <summary>
            The _constraint types.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.MpsReader._constraints">
      <summary>
            The _constraints.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.MpsReader._constraintsRhs">
      <summary>
            The _constraints rhs.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.MpsReader._model">
      <summary>
            The _model.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.MpsReader._sosSets">
      <summary>
            The _sos sets.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.MpsReader._variables">
      <summary>
            The _variables.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.MpsReader._variableType">
      <summary>
            The _variable type.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.MpsReader.#ctor(OPTANO.Modeling.Optimization.Model)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.MpsReader" /> class.
            </summary>
      <param name="model">
            The model.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.MpsReader.ReadMPS(System.IO.Stream)">
      <summary>
            The read mps.
            </summary>
      <param name="filestream">
            The filestream.
            </param>
      <exception cref="T:OPTANO.Modeling.Optimization.Importer.MPS.MpsParsingException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.MpsReader.AddConstraintsAndObjectiveToModel">
      <summary>
            The add constraints and objective to model.
            </summary>
      <exception cref="T:OPTANO.Modeling.Optimization.Importer.MPS.MpsParsingException" />
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.IModel">
      <summary>
            Represents a mathematical programming problem.
            Supports mixed integer non-linear programming problems and stochastic.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddAlternativeConstraintGroups(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Double)">
      <summary>
            OR connects the constraints from group1 with the constraints from group2
            </summary>
      <param name="group1">The first constraint group.</param>
      <param name="group2">The second constraint group.</param>
      <param name="bigM">A number as small as possible, so that no constraint is limited by this number</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddAlternativeConstraints(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Double)">
      <summary>
            Adds the constraints to the model. The contained constraints will be OR connected -&gt; at least one constraint must be true
            </summary>
      <param name="constraints">The constraints.</param>
      <param name="bigM">A number as small as possible, so that no constraint is limited by this number</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddConstraint(OPTANO.Modeling.Optimization.Constraint,System.String)">
      <summary>
            Adds <paramref name="constraint" /> to this model instance if it is consistent. If you choose to provide a name, the name of the constraint will be overridden.
            You need to make sure that the name of the constraint is unique.
            </summary>
      <param name="constraint">Constraint to add.</param>
      <param name="name">The name for the constraint</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddConstraint(System.String,System.Double,System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Adds a new constraint to this model instance if it is consistent.
            </summary>
      <param name="name">Unique name of the new constraint.</param>
      <param name="lowerBound">Lower bound (left hand side) of the new constraint.</param>
      <param name="upperBound">Upper bound (right hand side) of the new constraint.</param>
      <param name="expression">Expression of the new constraint.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddConstraints(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint})">
      <summary>
            Adds a set of constraint to this model instance if it is consistent.
            </summary>
      <param name="constraints">Set of constraints to add.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddObjective(OPTANO.Modeling.Optimization.Objective)">
      <summary>
            Adds <paramref name="objective" /> to this model instance if it is consistent.
            </summary>
      <param name="objective">Objective to add.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddObjective(OPTANO.Modeling.Optimization.Expression,System.String,OPTANO.Modeling.Optimization.Enums.ObjectiveSense)">
      <summary>
            Adds a new objective to this model instance if it is consistent.
            </summary>
      <param name="expression">Expression of the new objective.</param>
      <param name="name">Unique name of the new objective.</param>
      <param name="sense">Sense of the new objective.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddObjectives(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Objective})">
      <summary>
            Adds a set of objectives to this model instance if it is consistent.
            </summary>
      <param name="objectives">Set of objectives to add.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddSOS(System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double},OPTANO.Modeling.Optimization.Enums.SOSType)">
      <summary>
            Adds an SOS Constraint of the given SOSType
            </summary>
      <param name="variables">The variables.</param>
      <param name="type">The type.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddSOS1(System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Adds an SOS1 constraint
            </summary>
      <param name="variables">The variables.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddSOS2(System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Adds an SOS2 constraint
            </summary>
      <param name="variables">The variables.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddSOS3(System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Adds an SOS3 constraint
            </summary>
      <param name="variables">The variables.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddVariable(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Adds <paramref name="variable" /> to this model instance if it is consistent.
            </summary>
      <param name="variable">Variable to add.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddVariable(System.String,System.Double,System.Double,OPTANO.Modeling.Optimization.Enums.VariableType)">
      <summary>
            Adds a new variable to this model instance if it is consistent.
            </summary>
      <param name="name">Unique name of the new variable.</param>
      <param name="lowerBound">Lower bound of the new variable.</param>
      <param name="upperBound">Upper bound of the new variable.</param>
      <param name="type">Type of the new variable.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.AddVariables(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Variable})">
      <summary>
            Adds a set of variables to this model instance if it is consistent.
            </summary>
      <param name="variables">Set of variables to add.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.Clear">
      <summary>
            Removes all variables, constraints, objectives and scenarios from this model instance.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.ContainsConstraint(System.String)">
      <summary>
            Contains this model instance a constraint named <paramref name="name" />?
            </summary>
      <param name="name">Name of the constraint to search for.</param>
      <returns />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.ContainsObjective(System.String)">
      <summary>
            Contains this model instance an objective named <paramref name="name" />?
            </summary>
      <param name="name">Name of the objective to search for.</param>
      <returns />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.ContainsVariable(System.String)">
      <summary>
            Contains this model instance a variable named <paramref name="name" />?
            </summary>
      <param name="name">Name of the variable to search for.</param>
      <returns />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.GetConstraint(System.String)">
      <summary>
            Returns the constraint named <paramref name="name" />, or <c>null</c> if this model instance contains no such constraint.
            </summary>
      <param name="name">Name of the constraint to search for.</param>
      <returns />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.GetObjective(System.String)">
      <summary>
            Returns the objective named <paramref name="name" />, or <c>null</c> if this model instance contains no such objective.
            </summary>
      <param name="name">Name of the objective to serach for.</param>
      <returns />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.GetVariable(System.String)">
      <summary>
            Returns the variable named <paramref name="name" />, or <c>null</c> if this model instance contains no such variable.
            </summary>
      <param name="name">Name of the variable to search for.</param>
      <returns />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.Read(System.IO.Stream)">
      <summary>
            Reads the specified file with the specified filetype.
            </summary>
      <param name="filestream">The filestream.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.RemoveConstraint(System.String)">
      <summary>
            Removes the constraint named <paramref name="name" /> from this model instance, or does nothing if this model instance contains no such constraint.
            </summary>
      <param name="name">Name of the constraint to remove.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.RemoveConstraints(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Removes a set of constraints from this model instance.
            </summary>
      <param name="names">Names of the constraints to remove.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.RemoveObjective(System.String)">
      <summary>
            Removes the objective named <paramref name="name" /> from this model instance, or does nothing if this model instance contains no such objective.
            </summary>
      <param name="name">Name of the objective to remove.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.RemoveObjectives(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Removes a set of objectives from this model instance.
            </summary>
      <param name="names">Names of the objectives to remove.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.RemoveVariable(System.String)">
      <summary>
            Removes the variable named <paramref name="name" /> from this model instance, or does nothing if this model instance contains no such variable.
            </summary>
      <param name="name">Name of the variable to remove.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.RemoveVariables(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Removes a set of variables from this model instance.
            </summary>
      <param name="names">Names of the variables to remove.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IModel.Write(System.IO.Stream,OPTANO.Modeling.Optimization.Enums.FileType)">
      <summary>
            Writes the model to the specified filestream.
            </summary>
      <param name="filestream">The filestream.</param>
      <param name="fileType">Type of the file.</param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.AreAllConstraintsLinear">
      <summary>
            Have all constraints in this model instance linear expressions?
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.AreAllObjectivesLinear">
      <summary>
            Have all objectives in this model instance linear expressions?
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.AreAllVariablesBinary">
      <summary>
            Are all variables in this model instance of type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />?
            A <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variable is a special case of an <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Integer" /> variable, where the bounds are in the range of <c>[0, 1]</c>.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.AreAllVariablesContinuous">
      <summary>
            Are variables in this model instance of type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Continuous" />?
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.AreAllVariablesInteger">
      <summary>
            Are all variables in this model instance of type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Integer" />?
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.Constraints">
      <summary>
            Constraints in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.ConstraintsCount">
      <summary>
            Count of constraints in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.ModelBehavior">
      <summary>
            Gets or sets the behavior of the model. Available options are <see cref="F:OPTANO.Modeling.Optimization.Enums.ModelBehavior.Auto" /> and <see cref="F:OPTANO.Modeling.Optimization.Enums.ModelBehavior.Manual" />.
            In automatic mode, the model takes care of adding and removing variables when constraints and objectives get added. In manual mode you need to take care of this yourself.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.Name">
      <summary>
            Name of this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.Objectives">
      <summary>
            Objectives in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.ObjectivesCount">
      <summary>
            Count of objectives in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.SOS1Sets">
      <summary>
            Sets of <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S1" /> variables in this model instance.
            The <c>Value</c> of each entry indicates the weight for the variable in its SOS.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.SOS2Sets">
      <summary>
            Sets of <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" /> variables in this model instance.
            The <c>Value</c> of each entry indicates the weight for the variable in its SOS. 
            It is used to determine the variable ordering in a SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.SOS3Sets">
      <summary>
            Sets of <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S3" /> variables in this model instance.
            The <c>Value</c> of each entry indicates the weight for the variable in its SOS.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.Variables">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" />s in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IModel.VariablesCount">
      <summary>
            Count of variables in this model instance.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.IVariableCollection">
      <summary>
            Defines an interface for accessing generic and non-generic variable collections
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IVariableCollection.SetVariableValues(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Sets the value property for each variable in this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> to the corresponding value in the <paramref name="values" />. The matching happens by string comparison of the name of the variable.
            </summary>
      <param name="values">
            The values for the variables (e.g. coming from a <see cref="T:OPTANO.Modeling.Optimization.Solution" />)
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IVariableCollection.ExistingIndices">
      <summary>
            Gets the existing indices.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" /> with all already known indices.
            I.e. all indices that have already been used to access this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IVariableCollection.IndexValidationStyle">
      <summary>
            Gets or sets a value indicating whether index validaiton is used.
            Changes the behavior of a <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />. If set to <c>true</c> the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> will validate if an <c>index</c> belongs to the sets the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> is based on.
            The check is computationally expensive and should only be performed when you debug a model.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IVariableCollection.Name">
      <summary>
            Gets the name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in a single <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IVariableCollection.ValidIndices">
      <summary>
            Gets an <see cref="T:System.Collections.IEnumerable" /> that iterates over all valid index combinations for this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />.
            </summary>
      <returns>The valid indices.</returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IVariableCollection.Variables">
      <summary>
            Gets an <see cref="T:System.Collections.IEnumerable" /> that contains all <c>existing</c><see cref="T:OPTANO.Modeling.Optimization.Variable" />s in this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />.
            I.e. all variables that were generated when this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> was accessed with the variables <c>index</c>.
            </summary>
      <returns>The variables.</returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.IInternalVariableCollection">
      <summary>
            The InternalVariableCollection interface.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.IInternalVariableCollection.GetLongNameFromIndex(System.Object[])">
      <summary>
            If the model uses short names, the long name is generated from the given <paramref name="index" />.
            Else, the name of the variable for the given <paramref name="index" /> is returned.
            </summary>
      <param name="index">
            The index.
            If the variable for the index has not been created yet, an exception will be thrown.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
            The long name for the variable at <c>this[index]</c>.
            <exception cref="T:System.ArgumentException">
            Thrown, if the <paramref name="index" /> is not yet known.
            </exception></member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.IInternalVariableCollection.Item(System.Object[])">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <paramref name="index" />.
            If the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> never was accessed with the <paramref name="index" />, a new variable will be generated.
            </summary>
      <param name="index">
            The index.
            </param>
      <returns>
            The variable for the given <paramref name="index" /></returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.ModelScope">
      <summary>
            Wraps configuration settings that are required during the execution of the OPTANO.Modeling library so that internal classes have access to the same model scope.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ModelScope._lock">
      <summary>
            Object used to lock access on <see cref="F:OPTANO.Modeling.Optimization.ModelScope._current" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ModelScope._current">
      <summary>
            Backing field for the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.Current" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ModelScope._enableFullNames">
      <summary>
            The <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ModelScope._constraintCount">
      <summary>
            Counter for constraints.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ModelScope._objectiveCount">
      <summary>
            Counter for objectives.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ModelScope._variableCollectionCount">
      <summary>
            Counter for variable collections.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ModelScope._variableCount">
      <summary>
            Counter for variables.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelScope.#ctor(OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.ModelScope" /> class.
            </summary>
      <param name="settings">
            The setting to create the scope from.
            E.g. <see cref="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.Instance" />.
            Note: <see cref="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.Instance" /> is <c>null</c>, if the appropiate config section in app.config / web.config is not set!
            If parameter and  <see cref="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.Instance" />  are <c>null</c>, default paramters are used. 
            </param>
      <exception cref="T:System.AccessViolationException">
            Exception is thrown if another <see cref="T:OPTANO.Modeling.Optimization.ModelScope" /> exists at the same time.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelScope.Dispose">
      <summary>
            Releases the object from the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.Current" /> property.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelScope.SetConfig(OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection)">
      <summary>
            Sets the values specified in the configuration.
            </summary>
      <param name="config">
            The specified settings.
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.AbsOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Abs" /> operator replacement.
            The <c>User</c> can define an <c>override</c> for the <see cref="T:OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement" />. If the <c>value</c> differs from <see cref="F:OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement.DoNotReplace" />, the specified method is used in the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.CeilOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" /> operator replacement.
            The <c>User</c> can define an <c>override</c> for the <see cref="T:OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement" />. If the <c>value</c> differs from <see cref="F:OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement.DoNotReplace" />, the specified method is used in the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.ComputeRemovedVariables">
      <summary>
            Gets or sets a value indicating whether the set of removed variables should be computed by solvers that support this operation.
            Prior to the optimization of the model, an explicit presolve is executed in order to determine the set of variables that are removed by the solver during the preprocessing.
            Refer to the Model Feature section that is described in the OPTANO.Modeling User Documentation for further information.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.CopySolutionToModel">
      <summary>
            Gets or sets a value indicating whether the variable values of a feasible <see cref="T:OPTANO.Modeling.Optimization.Solution" /> should be set automatically in the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />s of a <see cref="T:OPTANO.Modeling.Optimization.Model" /></summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.DefaultIndexValidationStyle">
      <summary>
            Gets the index validation style that is used as default for new <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON">
      <summary>
            Gets the tolerance for float/double comparisons.
            Example: Instead of <c>a == b</c>, use <c><see cref="M:System.Math.Abs(System.Double)" />(a - b) &lt; <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" /></c>.
            Default value: <c>1e-6</c>.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames">
      <summary>
            Gets a value indicating whether the full names should be used for <see cref="T:OPTANO.Modeling.Optimization.Variable" />s and <see cref="T:OPTANO.Modeling.Optimization.Constraint" />s.
            A full name consists of the evalueation of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection.DebugNameGenerator" /> for a given index, followed by a unique <c>base64</c> index for each Variable.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.FloorOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Floor" /> operator replacement.
            The <c>User</c> can define an <c>override</c> for the <see cref="T:OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement" />. If the <c>value</c> differs from <see cref="F:OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement.DoNotReplace" />, the specified method is used in the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.MaxOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Max" /> operator replacement.
            The <c>User</c> can define an <c>override</c> for the <see cref="T:OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement" />. If the <c>value</c> differs from <see cref="F:OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement.DoNotReplace" />, the specified method is used in the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.MinOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" /> operator replacement.
            The <c>User</c> can define an <c>override</c> for the <see cref="T:OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement" />. If the <c>value</c> differs from <see cref="F:OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement.DoNotReplace" />, the specified method is used in the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.ModelBehavior">
      <summary>
            Gets or sets the behavior of the model. Available options are <see cref="F:OPTANO.Modeling.Optimization.Enums.ModelBehavior.Auto" /> and <see cref="F:OPTANO.Modeling.Optimization.Enums.ModelBehavior.Manual" />
            In automatic mode, the model takes care of adding variables when constraints and objectives get added. In manual mode you need to take care of this yourself.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.ModelMemoryDelta">
      <summary>
            Gets the memory <c>delta</c> in bytes that is allocated during the building of the model in the solver specific API.
            The model is fully transformed and passed to the solver. <c>Value</c> is set by <see cref="T:OPTANO.Modeling.Optimization.SolverBase" />.
            I.e. The increase of <see cref="M:System.GC.GetTotalMemory(System.Boolean)" /><c>(true)</c> during the call of <see cref="M:OPTANO.Modeling.Optimization.SolverBase.BuildSolverModelAdapterSpecific(System.Int32)" />.
            Note that this parameter will also be set/updated during <c>Rebuilds</c>, where no actual work might be performed.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.ModelBuildTime">
      <summary>
            Gets the model build time.
            The model is fully transformed and passed to the solver. <c>Value</c> is set by <see cref="T:OPTANO.Modeling.Optimization.SolverBase" />.
            I.e. the duration of the call to <see cref="M:OPTANO.Modeling.Optimization.SolverBase.BuildSolverModelAdapterSpecific(System.Int32)" />.
            Note that this parameter will also be set/updated during <c>Rebuilds</c>, where no actual work might be performed.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.NotConstraintReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> constraint replacement.
            The <c>User</c> can define an <c>override</c> for the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.NotConstraintReplacement" />. If the <c>value</c> differs from <see cref="F:OPTANO.Modeling.Optimization.Enums.NotConstraintReplacement.DoNotReplace" />, the specified method is used in the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.OrConstraintReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> constraint replacement.
            The <c>User</c> can define an <c>override</c> for the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.OrConstraintReplacement" />. If the <c>value</c> differs from <see cref="F:OPTANO.Modeling.Optimization.Enums.OrConstraintReplacement.DoNotReplace" />, the specified method is used in the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.RestoreUserModelAfterSolve">
      <summary>
            Gets a value indicating whether the user model after solve.
            This means that all steps that were performed in the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> process are reversed. E.g., all helper variables and constraints will be remvoed from the model.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.WhereConstraintReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> constraint replacement.
            The <c>User</c> can define an <c>override</c> for the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.WhereConstraintReplacement" />. If the <c>value</c> differs from <see cref="F:OPTANO.Modeling.Optimization.Enums.WhereConstraintReplacement.DoNotReplace" />, the specified method is used in the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.Sos1HandlingOverride">
      <summary>
            Gets the <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S1" /> handling method.
            If the <c>User</c> specifies a <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSHandling" /> other than <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />, that <c>method</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.Sos2HandlingOverride">
      <summary>
            Gets the <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" /> handling method.
            If the <c>User</c> specifies a <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSHandling" /> other than <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />, that <c>method</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.Sos3HandlingOverride">
      <summary>
            Gets the <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S3" /> handling method.
            If the <c>User</c> specifies a <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSHandling" /> other than <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />, that <c>method</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.Current">
      <summary>
            Gets the current ModelScope.
            </summary>
      <summary>
            Gets the current ModelScope.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.CurrentVariableIndex">
      <summary>
            Gets the current variable index as <see cref="T:System.Int64" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.NextConstraintInedx64">
      <summary>
            Gets the short name for the next <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> as <c>base64</c> string.
            This string is unique among all variables that are generated within the current context.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.NextObjectiveIndex64">
      <summary>
            Gets the short name for the next <see cref="T:OPTANO.Modeling.Optimization.Objective" /> as <c>base64</c> string.
            This string is unique among all objectives that are generated within the current context.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.NextVariableCollectionIndex64">
      <summary>
            Gets the short name for the next <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> as <c>base64</c> string.
            This string is unique among all variables that are generated within the current context.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelScope.NextVariableIndex64">
      <summary>
            Gets the short name for the next <see cref="T:OPTANO.Modeling.Optimization.Variable" /> as <c>base64</c> string.
            This string is unique among all variables that are generated within the current context.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.INot">
      <summary>
            Describes the interface for the not operator for constraints
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.IOr">
      <summary>
            Describes the interface for the or operator for constraints
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.IWhere">
      <summary>
            Describes the interface for the where operator for constraints
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.ICanAsAVariableRegisterAModel">
      <summary>
            The CanAsAVariableRegisterAModel interface.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanAsAVariableRegisterAModel.Register(OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInVariables)">
      <summary>
            Registers the specified solver to work on this problem
            </summary>
      <param name="model">
            The solver.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanAsAVariableRegisterAModel.Unregister(OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInVariables)">
      <summary>
            Unregisters the specified model.
            </summary>
      <param name="model">
            The solver.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInConstraints">
      <summary>
            The CanTrackPropertyChangesInConstraints interface.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInConstraints.ChangeConstraintLowerBound(System.String,System.Double)">
      <summary>
            Changes the constraint lower bound.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="lowerbound">
            The lowerbound.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInConstraints.ChangeConstraintUpperBound(System.String,System.Double)">
      <summary>
            Changes the constraint upper bound.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="upperbound">
            The upperbound.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.OperatorConstraint">
      <summary>
            Represents a costraint group that is linked with a certain operator.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Operators.OperatorConstraint._leftConstraints">
      <summary>
            The _left constraints.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Operators.OperatorConstraint._name">
      <summary>
            The _name.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Operators.OperatorConstraint._rightConstraints">
      <summary>
            The _right constraints.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.OperatorConstraint.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint})">
      <summary>
            Initializes a new instance of the OperatorConstraint class
            </summary>
      <param name="leftConstraints">
            Left Constraints
            </param>
      <param name="rightConstraints">
            Right Constraints
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.OperatorConstraint.LeftConstraints">
      <summary>
            Gets the left constraints.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.OperatorConstraint.RightConstraints">
      <summary>
            Gets the right constraints.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.OperatorConstraint.Name">
      <summary>
            Gets the name.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Not">
      <summary>
            Represents the operator for the not operation for constraints
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Not.#ctor(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> class.
            </summary>
      <param name="constraint">
            The constraint.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Or">
      <summary>
            Represents the operator for the or operation for constraints
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Or.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> class.
            All <paramref name="leftConstraints" /><c>OR</c> all <paramref name="rightConstraints" /> (or both) need to be fulfilled.
            </summary>
      <param name="leftConstraints">
            The left constraints.
            </param>
      <param name="rightConstraints">
            The right constraints.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Or.#ctor(OPTANO.Modeling.Optimization.Constraint,OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> class.
            The <paramref name="constraint1" /><c>OR</c> the <paramref name="constraint2" /> (or both) need to be fulfilled.
            </summary>
      <param name="constraint1">
            The constraint 1.
            </param>
      <param name="constraint2">
            The constraint 2.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Or.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> class.
            All constraints in <paramref name="constraintGroup" /><c>OR</c> the <paramref name="constraint" /> (or both) need to be fulfilled.
            </summary>
      <param name="constraintGroup">
            The constraint group.
            </param>
      <param name="constraint">
            The constraint.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Or.#ctor(OPTANO.Modeling.Optimization.Constraint,System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> class.
            The <paramref name="constraint" /><c>OR</c> all constraints in <paramref name="constraintGroup" /> (or both) need to be fulfilled.
            </summary>
      <param name="constraint">
            The constraint.
            </param>
      <param name="constraintGroup">
            The constraint group.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Where">
      <summary>
            Represents the operator for the where operation for constraints
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Where.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> class.
            </summary>
      <param name="notCondition">
            The not condition.
            </param>
      <param name="constraint">
            The constraint.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Where.#ctor(OPTANO.Modeling.Optimization.Operators.Not,OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> class.
            </summary>
      <param name="notCondition">
            The not condition.
            </param>
      <param name="constraint">
            The constraint.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Where.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> class.
            </summary>
      <param name="notCondition">
            The not condition.
            </param>
      <param name="constraint">
            The constraint.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Where.#ctor(OPTANO.Modeling.Optimization.Operators.Not,System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> class.
            </summary>
      <param name="notCondition">
            The not condition.
            </param>
      <param name="constraint">
            The constraint.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanSolve`2">
      <summary>
            Indicates that this solver can solve models of type M and return solutions of type S
            </summary>
      <typeparam name="M">
            The model type
            </typeparam>
      <typeparam name="S">
            The solution type
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanSolve`2.Solve(`0,System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Solves the given <paramref name="model" />.
            Optimizes if <paramref name="model" /> contains at least one objective.
            </summary>
      <param name="model">
            The model to solve.
            </param>
      <param name="variableValues">
            Initial values for all or a subset of variables in <paramref name="model" />.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            If this solver instance not supports solving.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            If this solver instance is busy.
            </exception>
      <exception cref="T:System.ArgumentException">
            If this solver instance cannot handle the kind of <paramref name="model" />.
            </exception>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Interfaces.IAbortable">
      <summary>
            If a solver can be aborted it should implement this interface
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.IAbortable.Abort">
      <summary>
            If this solver instance is busy abort the run as soon as possible, or do nothing if this solver instance is not busy.
            </summary>
      <exception cref="T:System.NotSupportedException">If this solver instance not supports aborting.</exception>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.ISolver">
      <summary>
            Represents a <see cref="N:OPTANO.Modeling.Optimization.Solver" /> instance for mathematical programming problems.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ISolver.ClearLastModel">
      <summary>
            Deletes the internal datastructures of this solver instance.
            </summary>
      <exception cref="T:System.InvalidOperationException">If this <see cref="N:OPTANO.Modeling.Optimization.Solver" /> instance <see cref="P:OPTANO.Modeling.Optimization.Interfaces.ISolver.IsBusy" />.</exception>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.ISolver.Configuration">
      <summary>
            Gets or sets the configuration as <see cref="T:OPTANO.Modeling.Optimization.SolverConfiguration" />. To get the solver specific {T}-configuration, cast the <see cref="T:OPTANO.Modeling.Optimization.Interfaces.ISolver" /> variable to <see cref="T:OPTANO.Modeling.Optimization.GenericSolverBase`1" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Interfaces.ISolver.IsBusy">
      <summary>
            Gets a value indicating whether this <see cref="T:OPTANO.Modeling.Optimization.Interfaces.ISolver" /> instance is busy.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.SolverBase">
      <summary>
            The solver base class. This class provides functionality for the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> that needs to be supported by all solver adapters.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._absOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Abs" /> operator replacement backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._ceilOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" /> operator replacement backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._floorOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Floor" /> operator replacement backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._maxOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Max" /> operator replacement backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._minOperatorReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" /> operator replacement backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._nativeMultiObjectiveSupport">
      <summary>
            The native multi objective support backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._notConstraintReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> constraint replacement backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._orConstraintReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> constraint replacement backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._transformation">
      <summary>
            The model transformation helper.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._whereConstraintReplacement">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> constraint replacement backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._sos1Handling">
      <summary>
            The <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S1" /> handling backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._sos2Handling">
      <summary>
            The <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" /> handling backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._sos3Handling">
      <summary>
            The <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S3" /> handling backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverBase._configuration">
      <summary>
            The configuration backing field.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.#ctor(OPTANO.Modeling.Optimization.Enums.NativeMultiObjectiveSupport,OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement,OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement,OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement,OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement,OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement,OPTANO.Modeling.Optimization.Enums.NotConstraintReplacement,OPTANO.Modeling.Optimization.Enums.OrConstraintReplacement,OPTANO.Modeling.Optimization.Enums.WhereConstraintReplacement,OPTANO.Modeling.Optimization.Enums.SOSHandling,OPTANO.Modeling.Optimization.Enums.SOSHandling,OPTANO.Modeling.Optimization.Enums.SOSHandling)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.SolverBase" /> class.
            If any operator replacement has the value <c>DoNotReplace</c>, the SolverAdapter needs to handle that <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorExpression" /> type manually.
            </summary>
      <param name="nativeMultiObjectiveSupport">
            The native support for multiobjective optimization.
            </param>
      <param name="minOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement" /> method.
            </param>
      <param name="maxOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement" /> method.
            </param>
      <param name="floorOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement" /> method.
            </param>
      <param name="ceilOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement" /> method.
            </param>
      <param name="absOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement" /> method.
            </param>
      <param name="notConstraintReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.NotConstraintReplacement" /> method.
            </param>
      <param name="orConstraintReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.OrConstraintReplacement" /> method.
            </param>
      <param name="whereConstraintReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.WhereConstraintReplacement" /> method.
            </param>
      <param name="sos1Handling">
            The indicator whether SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S1" /> should be handled by the solver adapter iteself (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />), or by the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Emulated" />).
            </param>
      <param name="sos2Handling">
            The indicator whether SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" /> should be handled by the solver adapter iteself (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />), or by the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Emulated" />).
            </param>
      <param name="sos3Handling">
            The indicator whether SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S3" /> should be handled by the solver adapter iteself (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />), or by the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Emulated" />).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.Abort">
      <summary>
            Aborts the current optimization.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.ClearLastModel">
      <summary>
            Clears the last model.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.Solve(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Solves the specified <paramref name="model" />. This includes the <see cref="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformCurrentModel" />, calling the <see cref="M:OPTANO.Modeling.Optimization.SolverBase.SolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})" /> solve-method OR the <see cref="M:OPTANO.Modeling.Optimization.SolverBase.ResolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})" /> solve-method, depending on the <paramref name="model" />.
            If your SolverAdapter can benefit from a <c>Resolve</c> make sure to override the <see cref="M:OPTANO.Modeling.Optimization.SolverBase.ResolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})" /> method to do that job. By <c>default</c>, the resolve-method reroutes to <see cref="M:OPTANO.Modeling.Optimization.SolverBase.SolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})" />. After a solution is obtained, the <paramref name="model" /> can be restored, i.e. the changes that were performed by <see cref="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformCurrentModel" /> are reverted, if the user specifies this by setting <see cref="P:OPTANO.Modeling.Optimization.ModelScope.RestoreUserModelAfterSolve" /> to <c>true</c>.
            
            If specified in <see cref="P:OPTANO.Modeling.Optimization.ModelScope.CopySolutionToModel" />, the results of a solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> will <c>automatically</c> be written in the OPTANO.Modeling's <see cref="T:OPTANO.Modeling.Optimization.Variable" />s.
            </summary>
      <param name="model">
            The <see cref="T:OPTANO.Modeling.Optimization.Model" /> to solve.
            </param>
      <param name="variableValues">
            The starting values to pass as <c>initial solution</c>.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />.
            Before accessing the <see cref="P:OPTANO.Modeling.Optimization.Solution.VariableValues" />, make sure that the <see cref="T:OPTANO.Modeling.Optimization.Model" /> is <see cref="F:OPTANO.Modeling.Optimization.Solver.ModelStatus.Feasible" /> and the <see cref="T:OPTANO.Modeling.Optimization.Solution" /> is <see cref="F:OPTANO.Modeling.Optimization.Solver.SolutionStatus.Feasible" /> or <see cref="F:OPTANO.Modeling.Optimization.Solver.SolutionStatus.Optimal" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.GetMergedObjectiveForPriorityLevel(System.Int32,System.Boolean)">
      <summary>
            Get the <see cref="T:OPTANO.Modeling.Optimization.Objective" /> for the given <paramref name="prioLevel" />.
            This can either be an unmodified objective, if there exists only 1 objective for the given <paramref name="prioLevel" />, or a merged objective, if there are more than 1 objective for the given <paramref name="prioLevel" />. The merged objective's <see cref="P:OPTANO.Modeling.Optimization.Objective.Sense" /> will be <see cref="F:OPTANO.Modeling.Optimization.Enums.ObjectiveSense.Minimize" />.
            </summary>
      <param name="prioLevel">
            The priority level.
            </param>
      <param name="tryGetCached">
            If value is <c>true</c>, the last computed <see cref="T:OPTANO.Modeling.Optimization.Objective" /> for the given <paramref name="prioLevel" /> will be returned <c>without</c> recomputing it.
            
            Only use this if you know what your're doing.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Objective" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.ResolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            This method is called, if the passed <see cref="T:OPTANO.Modeling.Optimization.Model" /> reference of <see cref="M:OPTANO.Modeling.Optimization.SolverBase.Solve(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})" /> equals the last solved <see cref="P:OPTANO.Modeling.Optimization.SolverBase.CurrentModel" /> in this solver instance.
            If your solver can benefit from, e.g., a warm start, override this method and implement the steps that are required to <c>resolve</c> a known <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            By <c>default</c>, this method will simply call <see cref="M:OPTANO.Modeling.Optimization.SolverBase.SolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})" />, i.e. you will not benefit from any warmstart capabilieties of your solver.
            </summary>
      <param name="prioLevel">
            The priority level to resolve for.
            </param>
      <param name="variableValues">
            The start values.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.RestoreModel(OPTANO.Modeling.Optimization.Solution)">
      <summary>
            Restores the model to the initial user input.
            I.e. all changes that were performed by <see cref="M:OPTANO.Modeling.Optimization.SolverBase.TransformModel" /> are reverted.
            </summary>
      <param name="solution">
            The solution.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.SolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            This method should solve the <see cref="P:OPTANO.Modeling.Optimization.SolverBase.CurrentModel" />, which is set in <see cref="M:OPTANO.Modeling.Optimization.SolverBase.Solve(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})" />, before <see cref="M:OPTANO.Modeling.Optimization.SolverBase.SolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})" /> is called.
            </summary>
      <param name="prioLevel">
            The priority level to solve for.
            </param>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.TransformModel">
      <summary>
            Can transform the constraints of the model that contain OperatorExpressions as, e.g., Min into new expressions where these expressions are 
            replaced by new variables and constraints. This means that in the model also some implicit variables marking 
            new representing variables are set.
            Furthermore, the operator constraints can be translated into common <see cref="T:OPTANO.Modeling.Optimization.Constraint" />s, so that they can be handled by default MIP solvers.
            The resulting constraints will be added to the current model.
            Each individual operator (for expressions <c>and</c> constraints) can be controlled via the <see cref="T:System.Enum" /> properties in <see cref="T:OPTANO.Modeling.Optimization.SolverBase" />.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.BuildConfigureAndSolveOnAdapter(System.Int32,System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double},System.Boolean)">
      <summary>
            Triggers to building of solver-API specific models in the SolverAdapters, 
            gathers benchmark statistics,
            loads <see cref="P:OPTANO.Modeling.Optimization.SolverBase.Configuration" />, and further parameters,
            and solves the model.
            
            Benachmark statistics are written to the current <see cref="T:OPTANO.Modeling.Optimization.ModelScope" />.
            </summary>
      <param name="prioLevel">
            The priority Level.
            </param>
      <param name="variableValues">
            Starting values.
            </param>
      <param name="isResolve">
            True, if resolve should be called.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.CallBuildOnAdapter(System.Int32,System.Boolean)">
      <summary>
            Method that decides whether <see cref="M:OPTANO.Modeling.Optimization.SolverBase.BuildSolverModelAdapterSpecific(System.Int32)" /> or <see cref="M:OPTANO.Modeling.Optimization.SolverBase.RebuildSolverModelAdapterSpecific(System.Int32)" /> should be called on the solver adapter.
            </summary>
      <param name="prioLevel">
            The prio level
            </param>
      <param name="isResolve">
                True, if this is a resolve.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.CallSolveOnAdapter(System.Int32,System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double},System.Boolean)">
      <summary>
            Method that decides whether Solve or Resolve should be called on the solver adapter.
            </summary>
      <param name="prioLevel">
            The priority Level.
            </param>
      <param name="variableValues">
            Starting values.
            </param>
      <param name="isResolve">
            True, if resolve should be called.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" /></returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.BuildSolverModelAdapterSpecific(System.Int32)">
      <summary>
            This method needs to build the solver API's specific model from the current OPTANO <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            It is important to perform the whole work in this call, since benchmark statistics, such as required RAM, and time to build the model, are gathered during the execution of this method. 
            </summary>
      <param name="prioLevel">
            The prio Level.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.RebuildSolverModelAdapterSpecific(System.Int32)">
      <summary>
            This method should rebuild the required parts of the <see cref="T:OPTANO.Modeling.Optimization.Model" /> in the specific Solver-API when a resolve happens.
            By default, <see cref="M:OPTANO.Modeling.Optimization.SolverBase.BuildSolverModelAdapterSpecific(System.Int32)" /> is called, which means that the whole model will be rebuilt.
            For many solvers, this might not be the intended behavior, since they support warm starts (i.e. efficient resolves without rebuilding of the whole model).
            Make sure to override this method accordingly.
            </summary>
      <param name="prioLevel">
            The priority level.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.ConfigureSolver">
      <summary>
            Configures the solver.
            Applies <see cref="P:OPTANO.Modeling.Optimization.SolverBase.Configuration" /> and sets parameters such as <see cref="P:OPTANO.Modeling.Optimization.Variable.BranchingPriority" /> and <see cref="P:OPTANO.Modeling.Optimization.Variable.BranchingDirection" />.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.SetConfigurationAdapterSpecific">
      <summary>
            This method is called before every (re-)solve and should set all parameters from the adapter's <see cref="P:OPTANO.Modeling.Optimization.SolverBase.Configuration" /> in the respective solver.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.SetParameters">
      <summary>
            Call all adapter-specific methods to set additional parameters, such as <see cref="P:OPTANO.Modeling.Optimization.Variable.BranchingPriority" /> and <see cref="P:OPTANO.Modeling.Optimization.Variable.BranchingDirection" />.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.SetBranchingPriorityAdapterSpecific">
      <summary>
            If the solver adapter supports <see cref="P:OPTANO.Modeling.Optimization.Variable.BranchingPriority" />, override this method and set the respective priorities.
            By default, a warning message will be printed, if <see cref="P:OPTANO.Modeling.Optimization.Variable.BranchingPriority" /> is set for at least one <see cref="T:OPTANO.Modeling.Optimization.Variable" /> in the current <see cref="T:OPTANO.Modeling.Optimization.Model" /> and the value will be ignored.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.SetBranchingDirectionAdapterSpecific">
      <summary>
            If the solver adapter supports <see cref="P:OPTANO.Modeling.Optimization.Variable.BranchingDirection" />, override this method and set the respective <see cref="T:OPTANO.Modeling.Optimization.Enums.BranchingDirection" />.
            By default, a warning message will be printed, if <see cref="P:OPTANO.Modeling.Optimization.Variable.BranchingDirection" /> is set for at least one <see cref="T:OPTANO.Modeling.Optimization.Variable" /> in the current <see cref="T:OPTANO.Modeling.Optimization.Model" /> and the value will be ignored.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.SolveNativeHierarchicalWeighted(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double},System.Boolean)">
      <summary>
            The solve method for Adatpers that natively support hierarchical weighted optimization.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <param name="isResolve">
            True, if this is a resolve.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.SolveNativeWeighted(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double},System.Boolean)">
      <summary>
            The solve method for Adatpers that natively support only weighted optimization.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <param name="isResolve">
            True, if this is a resolve.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.SolveNonNative(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double},System.Boolean)">
      <summary>
            The solve method for Adatpers that do not support multiobjective optimization.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <param name="isResolve">
            True, if this is a resolve.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.AddObjective(OPTANO.Modeling.Optimization.Objective)">
      <summary>
            Internal method to add an <see cref="T:OPTANO.Modeling.Optimization.Objective" /> to the current solver model.
            Should be called from the <see cref="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.AddObjective(OPTANO.Modeling.Optimization.Objective)" /> method.
            This method does not check whether the solver <see cref="P:OPTANO.Modeling.Optimization.SolverBase.IsBusy" />.
            </summary>
      <param name="objective">The objective to add</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.AddConstraint(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Internal method to add a <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> to the current solver model.
            Should be called from the <see cref="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.AddConstraint(OPTANO.Modeling.Optimization.Constraint)" /> method.
            This method does not check whether the solver <see cref="P:OPTANO.Modeling.Optimization.SolverBase.IsBusy" />.
            </summary>
      <param name="constraint">The constraint to add</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.RemoveConstraint(System.String)">
      <summary>
            Internal method to remove a constraint from the current solver model.
            Should be called from the <see cref="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.RemoveConstraint(System.String)" /> method.
            This method does not check whether the solver <see cref="P:OPTANO.Modeling.Optimization.SolverBase.IsBusy" />.
            </summary>
      <param name="name">The <see cref="P:OPTANO.Modeling.Optimization.Constraint.Name" /> of the constraint to remove.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SolverBase.Dispose">
      <summary>
            Disposes this solver instance.
            For solvers such as the GurobiSolver, the license that was used for the solver instance is freed when this method is called.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.Configuration">
      <summary>
            Gets or sets the configuration as <see cref="T:OPTANO.Modeling.Optimization.SolverConfiguration" />. To get the solver specific {T}-configuration, cast the <see cref="T:OPTANO.Modeling.Optimization.Interfaces.ISolver" /> (or <see cref="T:OPTANO.Modeling.Optimization.SolverBase" />) variable to <see cref="T:OPTANO.Modeling.Optimization.GenericSolverBase`1" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.IsBusy">
      <summary>
            Gets or sets a value indicating whether this solver is busy.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.AbsOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Abs" /> operator replacement method.
            If the <c>User</c> specifies a replacement method other than <see cref="F:OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement.DoNotReplace" />, that <c>value</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.CeilOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" /> operator replacement method.
            If the <c>User</c> specifies a replacement method other than <see cref="F:OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement.DoNotReplace" />, that <c>value</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.CurrentModel">
      <summary>
            Gets the current <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.FloorOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Floor" /> operator replacement method.
            If the <c>User</c> specifies a replacement method other than <see cref="F:OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement.DoNotReplace" />, that <c>value</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.MaxOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Max" /> operator replacement method.
            If the <c>User</c> specifies a replacement method other than <see cref="F:OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement.DoNotReplace" />, that <c>value</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.MinOperatorReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" /> operator replacement method.
            If the <c>User</c> specifies a replacement method other than <see cref="F:OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement.DoNotReplace" />, that <c>value</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.NativeMultiObjectiveSupport">
      <summary>
            Gets the native multi objective support.
            
            If <see cref="F:OPTANO.Modeling.Optimization.Enums.NativeMultiObjectiveSupport.Unsupported" />, the <c>OPTANO.Modeling</c> framework takes care of handling multiple objectives by iteratively solving each <see cref="P:OPTANO.Modeling.Optimization.Objective.PriorityLevel" /> for hierarchical <see cref="T:OPTANO.Modeling.Optimization.Objective" />s and combining all objectives in a given <see cref="P:OPTANO.Modeling.Optimization.Objective.PriorityLevel" />, using the respective <see cref="P:OPTANO.Modeling.Optimization.Objective.Weight" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.NotConstraintReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> constraint replacement method.
            If the <c>User</c> specifies a replacement method other than <see cref="F:OPTANO.Modeling.Optimization.Enums.NotConstraintReplacement.DoNotReplace" />, that <c>method</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.OrConstraintReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> constraint replacement method.
            If the <c>User</c> specifies a replacement method other than <see cref="F:OPTANO.Modeling.Optimization.Enums.OrConstraintReplacement.DoNotReplace" />, that <c>method</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.WhereConstraintReplacement">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> constraint replacement method.
            If the <c>User</c> specifies a replacement method other than <see cref="F:OPTANO.Modeling.Optimization.Enums.WhereConstraintReplacement.DoNotReplace" />, that <c>method</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.Sos1Handling">
      <summary>
            Gets the <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S1" /> handling method.
            If the <c>User</c> specifies a <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSHandling" /> other than <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />, that <c>method</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.Sos2Handling">
      <summary>
            Gets the <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" /> handling method.
            If the <c>User</c> specifies a <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSHandling" /> other than <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />, that <c>method</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.Sos3Handling">
      <summary>
            Gets the <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S3" /> handling method.
            If the <c>User</c> specifies a <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSHandling" /> other than <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />, that <c>method</c> will be used during the transformation that is performed by <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase.Transformation">
      <summary>
            Gets the transformation helper.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverBase._model">
      <summary>
            Gets or sets the model that this <see cref="T:OPTANO.Modeling.Optimization.GenericSolverBase`1" /> is working on.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.GenericSolverBase`1">
      <summary>
            Represents a <see cref="N:OPTANO.Modeling.Optimization.Solver" /> instance for mathematical programming problems.
            </summary>
      <typeparam name="T">
            The type of the specific <see cref="T:OPTANO.Modeling.Optimization.SolverConfiguration" />.
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.GenericSolverBase`1.#ctor(OPTANO.Modeling.Optimization.Enums.NativeMultiObjectiveSupport,OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement,OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement,OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement,OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement,OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement,OPTANO.Modeling.Optimization.Enums.NotConstraintReplacement,OPTANO.Modeling.Optimization.Enums.OrConstraintReplacement,OPTANO.Modeling.Optimization.Enums.WhereConstraintReplacement,OPTANO.Modeling.Optimization.Enums.SOSHandling,OPTANO.Modeling.Optimization.Enums.SOSHandling,OPTANO.Modeling.Optimization.Enums.SOSHandling)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.GenericSolverBase`1" /> class.
            If any operator replacement has the value <c>DoNotReplace</c>, the SolverAdapter needs to handle that <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorExpression" /> type manually.
            </summary>
      <param name="nativeMultiObjectiveSupport">
            The native support for multiobjective optimization.
            </param>
      <param name="minOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement" /> method.
            </param>
      <param name="maxOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.MaxOperatorReplacement" /> method.
            </param>
      <param name="floorOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.FloorOperatorReplacement" /> method.
            </param>
      <param name="ceilOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.CeilOperatorReplacement" /> method.
            </param>
      <param name="absOperatorReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.AbsOperatorReplacement" /> method.
            </param>
      <param name="notConstraintReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.NotConstraintReplacement" /> method.
            </param>
      <param name="orConstraintReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.OrConstraintReplacement" /> method.
            </param>
      <param name="whereConstraintReplacement">
            The desired <see cref="T:OPTANO.Modeling.Optimization.Enums.WhereConstraintReplacement" /> method.
            </param>
      <param name="sos1Handling">
            The indicator whether SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S1" /> should be handled by the solver adapter iteself (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />), or by the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Emulated" />).
            </param>
      <param name="sos2Handling">
            The indicator whether SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" /> should be handled by the solver adapter iteself (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />), or by the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Emulated" />).
            </param>
      <param name="sos3Handling">
            The indicator whether SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S3" /> should be handled by the solver adapter iteself (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Native" />), or by the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> (<see cref="F:OPTANO.Modeling.Optimization.Enums.SOSHandling.Emulated" />).
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.GenericSolverBase`1.Configuration">
      <summary>
            Gets or sets the configuration of this <see cref="T:OPTANO.Modeling.Optimization.GenericSolverBase`1" /> instance.
            Hides member <see cref="P:OPTANO.Modeling.Optimization.SolverBase.Configuration" />. If a config that is not <typeparamref name="T" /> was set via <see cref="P:OPTANO.Modeling.Optimization.SolverBase.Configuration" />, an <see cref="T:System.InvalidCastException" /> is thrown.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Interfaces.ISolverEvent">
      <summary>
            An implementing class represents an event that can be fired by a solver
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Events.NewBestBoundFoundArgs">
      <summary>
            This event is fired whenever a new incumbent was found during the solution process
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Events.NewBestBoundFoundArgs.BestBound">
      <summary>
            Gets or sets the best bound.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanSetLicense">
      <summary>
            A solver implementing this interface will be able to set a license
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanSetLicense.SetLicenseString(System.String)">
      <summary>
            Will set the license via a license string
            </summary>
      <param name="licenseContents">
            The contents of a license
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Interfaces.IStatus`1">
      <summary>
            The status interface can be used to retrieve status information by running solvers.
            </summary>
      <typeparam name="T">
            Type of the returned information.
            </typeparam>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanProvideStatusInfo">
      <summary>
            If a solver implements this interface it can report certain values during a solve run to the user
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanProvideStatusInfo.BestBound">
      <summary>
            The current best bound
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanProvideStatusInfo.RelativeGap">
      <summary>
            The current relative gap
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanSetCutOff">
      <summary>
            A solver implementing this interface is able to set a cut off value
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanSetCutOff.SetCutOff">
      <summary>
            Gets or sets the set cut off.
            </summary>
      <value>
            The set cut off.
            </value>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInVariables">
      <summary>
            The CanTrackPropertyChangesInVariables interface.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInVariables.ChangeVariableLowerBound(System.String,System.Double)">
      <summary>
            Changes the variable lower bound.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="lowerbound">
            The lowerbound.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInVariables.ChangeVariableType(System.String,OPTANO.Modeling.Optimization.Enums.VariableType)">
      <summary>
            Changes the type of the variable.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanTrackPropertyChangesInVariables.ChangeVariableUpperBound(System.String,System.Double)">
      <summary>
            Changes the variable upper bound.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="upperbound">
            The upperbound.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver">
      <summary>
            The CanManipulateANativeSolver interface is implemented by Solvers that can be directly informed about any model changes.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.AddConstraint(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Adds the constraint.
            </summary>
      <param name="constraint">
            The constraint.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.AddObjective(OPTANO.Modeling.Optimization.Objective)">
      <summary>
            Adds the objective.
            </summary>
      <param name="objective">
            The objective.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.AddVariable(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Adds the variable.
            </summary>
      <param name="variable">
            The variable.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.ChangeConstraintLowerBound(System.String,System.Double)">
      <summary>
            Changes the constraint lower bound.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="lowerbound">
            The lowerbound.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.ChangeConstraintUpperBound(System.String,System.Double)">
      <summary>
            Changes the constraint upper bound.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="upperbound">
            The upperbound.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.ChangeVariableLowerBound(System.String,System.Double)">
      <summary>
            Changes the variable lower bound.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="lowerbound">
            The lowerbound.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.ChangeVariableType(System.String,OPTANO.Modeling.Optimization.Enums.VariableType)">
      <summary>
            Changes the type of the variable.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="type">
            The type.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.ChangeVariableUpperBound(System.String,System.Double)">
      <summary>
            Changes the variable upper bound.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="upperbound">
            The upperbound.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.RemoveConstraint(System.String)">
      <summary>
            Removes the constraint.
            </summary>
      <param name="name">
            The name.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.RemoveObjective">
      <summary>
            Removes the objective.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.RemoveVariable(System.String)">
      <summary>
            Removes the variable.
            </summary>
      <param name="name">
            The name.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver.AddSOS(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double},OPTANO.Modeling.Optimization.Enums.SOSType)">
      <summary>
            Adds an SOS to the Solver.
            </summary>
      <param name="variableWeights">
            The <see cref="T:OPTANO.Modeling.Optimization.Variable" />s and their <c>weight</c>.
            </param>
      <param name="type">
            The <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSType" /> for the SOS.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Interfaces.ICanRegisterSolvers">
      <summary>
            The CanRegisterSolvers interface.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanRegisterSolvers.Register(OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver)">
      <summary>
            Registers the specified solver to work on this problem
            </summary>
      <param name="solver">
            The solver.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Interfaces.ICanRegisterSolvers.Unregister(OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver)">
      <summary>
            Unregisters the specified solver.
            </summary>
      <param name="solver">
            The solver.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.IOperatorExpression">
      <summary>
            Any operation (Plus, Times, etc.) that wants to be exposed as an expression needs to implement this interface
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.IOperatorExpression.Expressions">
      <summary>
            Gets the expressions.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Model">
      <summary>
            Represents a mathematical model
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Model._constraints">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Constraint" />s that were added to this <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            Accessible by <see cref="P:OPTANO.Modeling.Optimization.Constraint.Name" /></summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Model._objectives">
      <summary>
            The _objectives.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Model._objectiveUserNameToExtendedName">
      <summary>
            Mapping that stores the extended name for objectives for the string that the user gave us as initial name.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Model._operatorConstraints">
      <summary>
            List of <see cref="P:OPTANO.Modeling.Optimization.Model.OperatorConstraints" /> that need to be tranformed into normal <see cref="T:OPTANO.Modeling.Optimization.Constraint" />s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Model._removedVariablesInPreprocess">
      <summary>
            Field is set by call of the function this.SetRemovedVariables.
            If field is <c>null</c>, the solver either does not support the computation of the set, or the feature is deactivated in the solver configuration.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Model._sosvariables">
      <summary>
            The special ordered sets with their type
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Model._variableCollections">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that were added to this <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            Accessible by <see cref="P:OPTANO.Modeling.Optimization.VariableCollection.Name" /></summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Model._variables">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Variable" />s that were added to this <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            Accessible by <see cref="P:OPTANO.Modeling.Optimization.Variable.Name" /></summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Model" /> class.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Model requires <see cref="P:OPTANO.Modeling.Optimization.ModelScope.Current" /> != <c>null</c>.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.Abs(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Returns an Expression object respresenting the absolute value of the specified expression.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <param name="bigM">
            Large number, only used if the bounds of the variables of the expressions are non-finite
            </param>
      <returns>
            An expression that represents the <c>absolute</c> of the given expression.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.Abs(OPTANO.Modeling.Optimization.Term,System.Double)">
      <summary>
            Returns an Expression object respresenting the absolute value of the specified expression.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <param name="bigM">
            Large number, only used if the bounds of the variables of the expressions are non-finite
            </param>
      <returns>
            An expression that represents the <c>absolute</c> of the given term.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.Ceil(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Returns an Expression object respresenting the ceil roundoff of the specified expression.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <returns>
            An expression that represents the <c>ceil</c> roundoff.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.Floor(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Returns an Expression object respresenting the floor roundoff of the specified expression.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <returns>
            An expression that represents the <c>floor</c> roundoff.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.Max(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression},System.Double)">
      <summary>
            Returns an Expression object representing the maximum of the specified expresssions.
            </summary>
      <param name="expressions">
            The expressions.
            </param>
      <param name="bigM">
            Large number, only used if the bounds of the variables of the expressions are non-finite
            </param>
      <returns>
            An expression that represents the <c>maximum</c> of all given expressions.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.Min(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression},System.Double)">
      <summary>
            Returns an Expression object respresenting the minimum of the specified expressions.
            </summary>
      <param name="expressions">
            The expressions.
            </param>
      <param name="bigM">
            Large number, only used if the bounds of the variables of the expressions are non-finite
            </param>
      <returns>
            An expression that represents the <c>minimum</c> of all given expressions.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddAlternativeConstraintGroups(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint},System.Double)">
      <summary>
            Adds two groups of constraints. Either group1 or group2 or both have to be fulfilled in a valid solution
            </summary>
      <param name="group1">
            The one group of constraints
            </param>
      <param name="group2">
            The other group of constraints 
            </param>
      <param name="bigM">
            The big M to use in reformulation
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddAlternativeConstraints(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint})">
      <summary>
            Adds constraints that are OR concatenated. That means that at least one of these constraints have to be fulfilled.
            For every constraint l&lt;=exp&lt;=u in constraints this method will add the following two constraints to your model:
            
            <c>-exp-bigM*(1-z1)&lt;=-l</c> and
            
            <c>exp-bigM*(1-z1)&lt;=u</c>,
            
            where <c>z</c> is a binary variable indicating that this constraint is active (has to be fulfilled).
            Since this will happen for every constraint in the list of constraints, the binary variables z will be summed up in one additional constraint, such that <c>Expression.Sum(z1,...,zn)&gt;=1</c>
            The <c>bigM</c> will be computed for you, but this can only happen when you provide <c>finite</c> bounds on all variables that are used in your constraints.
            </summary>
      <param name="constraints">
            The constraints.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddAlternativeConstraints(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Constraint,System.Double})">
      <summary>
            Adds constraints that are OR concatenated. That means that at least one of these constraints have to be fulfilled.
            For every constraint l&lt;=exp&lt;=u in constraints this method will add the following two constraints to your model: 
            
            <c>-exp-bigM*(1-z1)&lt;=-l</c> and
            
            <c>exp-bigM*(1-z1)&lt;=u</c>,
            
            where <c>z</c> is a binary variable indicating that this constraint is active (has to be fulfilled).
            Since this will happen for every constraint in the list of constraints, the binary variables z will be summed up in one additional constraint, such that <c>expression.Sum(z1,...,zn)&gt;=1</c>
            For each constraint you will have to provide a <c>bigM</c> value.
            </summary>
      <param name="constraintBigMPairs">
            The constraints and a <c>bigM</c> for each constraint.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddConstraint(OPTANO.Modeling.Optimization.Constraint,System.String)">
      <summary>
            Adds <paramref name="constraint" /> to this model instance if it is consistent.
            You need to make sure that the name of the constraint is unique.
            </summary>
      <param name="constraint">
            Constraint to add, constraint may not be null
            </param>
      <param name="name">
            The unique name for this constraint. If the name is <c>NullOrWhiteSpace</c>, a <c>base64</c> index will be generated for this constraint. 
            If <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>false</c>, the passed <paramref name="name" /> is discarded and a <c>base64</c> index is used instead. 
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddConstraint(OPTANO.Modeling.Optimization.Operators.OperatorConstraint)">
      <summary>
            Adds <paramref name="operatorConstraint" /> to the OperatorConstraints in the model.
            </summary>
      <param name="operatorConstraint">
            The OperatorConstraint (Not, Or, Where).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddConstraint(System.String,System.Double,System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Adds a new <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> to this model instance if it is consistent.
            </summary>
      <param name="name">
            The unique name for this constraint. If the name is <c>NullOrWhiteSpace</c>, a <c>base64</c> index will be generated for this constraint. 
            If <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>false</c>, the passed <paramref name="name" /> is discarded and a <c>base64</c> index is used instead. 
            </param>
      <param name="lowerBound">
            Lower bound (left hand side) of the new constraint.
            </param>
      <param name="upperBound">
            Upper bound (right hand side) of the new constraint.
            </param>
      <param name="expression">
            Expression of the new constraint.
            </param>
      <returns>
            The newly created <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddConstraints(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint})">
      <summary>
            Adds a set of constraint to this model instance if it is consistent.
            </summary>
      <param name="constraints">
            Set of constraints to add.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddObjective(OPTANO.Modeling.Optimization.Objective,System.String)">
      <summary>
            Adds another objective to this model.
            
            Make sure to only use multiple objectives, if the <see cref="T:OPTANO.Modeling.Optimization.SolverBase" /> that you use implements the interface <see cref="T:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver" />. 
            Other solvers only support a single objective.
            </summary>
      <param name="objective">
            The objective.
            </param>
      <param name="name">
            The name for the objective or null, if the current <see cref="P:OPTANO.Modeling.Optimization.Objective.Name" /> should be used.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objective" /> mustn't be null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="objective" />
        <c>.Expression</c> mustn't be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="objective" /> name must be unique.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddSOS(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double},OPTANO.Modeling.Optimization.Enums.SOSType)">
      <summary>
            Adds an SOS Constraint of the given <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSType" />.
            </summary>
      <param name="variables">
            The variables with a weight in the SOS for every variable.
            The weight is used to determine the ordering of variables in <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" />. Variables in the SOS 2 will be ordered ascending by weight.
            
            <c>Important:</c> 
            Some Solvers might interprete a weight of <c>0</c> differently than others. 
            Make sure to only assign <c>positive, distinct</c> weights.
            </param>
      <param name="type">
            The SOS type.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddSOS1(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Adds an SOS1 constraint.
            At most one variable in this set may have a value &gt; 0.
            </summary>
      <param name="variables">
            The variables with a weight factor for every variable in the SOS.
            
            <c>Important:</c> 
            Some Solvers might interprete a weight of <c>0</c> differently than others. 
            Make sure to only assign <c>positive, distinct</c> weights.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddSOS2(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Adds an SOS2 constraint. 
            The variables in this set will be ordered ascending by the given weight.
            At most 2 directly ascending variables in this set may have a value &gt; 0.
            </summary>
      <param name="variables">
            The variables with a weight factor for every variable in the SOS.
            Variables in the SOS 2 will be ordered ascending by weight.
            
            <c>Important:</c> 
            Some Solvers might interprete a weight of <c>0</c> differently than others. 
            Make sure to only assign <c>positive, distinct</c> weights.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddSOS3(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Adds an SOS3 constraint. Alle variables need to be <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />.
            Exactly one of the variables in this set needs to be &gt; 0.
            </summary>
      <param name="variables">
            The variables with a weight factor for every variable in the SOS.
            
            <c>Important:</c> 
            Some Solvers might interprete a weight of <c>0</c> differently than others. 
            Make sure to only assign <c>positive, distinct</c> weights.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddVariable(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Adds <paramref name="variable" /> to this model instance if it is consistent.
            </summary>
      <param name="variable">
            Variable to add.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddVariableCollection(OPTANO.Modeling.Optimization.Interfaces.IVariableCollection)">
      <summary>
            Adds the <paramref name="collection" /> to this <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </summary>
      <param name="collection">
            The <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> to add to the model
            </param>
      <returns>
        <value>
            True
            </value>
            , if the <paramref name="collection" /> was added to the model.
            <value>
            False
            </value>
            , if model already contains a variable collection with the same name.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddVariables(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Variable})">
      <summary>
            Adds a set of variables to this model instance if it is consistent.
            </summary>
      <param name="variables">
            Set of variables to add.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.Clear">
      <summary>
            Removes all variables, constraints, objectives and scenarios from this model instance.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.ContainsConstraint(System.String)">
      <summary>
            Contains this model instance a constraint named <paramref name="name" />?
            </summary>
      <param name="name">
            Name of the constraint to search for.
            </param>
      <returns>
        <c>true</c>, if the model contains a constraint with the given <paramref name="name" />. <c>false</c>, else.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.ContainsVariable(System.String)">
      <summary>
            Contains this model instance a variable named <paramref name="name" />?
            </summary>
      <param name="name">
            Name of the variable to search for.
            </param>
      <returns>
        <c>true</c>, if the model contains a variable with the given <paramref name="name" />. <c>false</c>, else.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.DeepClone">
      <summary>
            Creates a deep clone of this model by serializing and deserializing it.
            </summary>
      <returns>
            The cloned <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.GetBranchingPriority(System.String)">
      <summary>
            The get branching priority.
            </summary>
      <param name="variableName">
            The variable name.
            </param>
      <returns>
            The branching priority. 
            If no priority is specified, <c>0</c> is returned.
            </returns>
      <exception cref="T:System.ArgumentException">
            Exception is thrown if the model does not know a variable with name <paramref name="variableName" />.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.GetConstraint(System.String)">
      <summary>
            Returns the constraint named <paramref name="name" />, or <c>null</c> if this model instance contains no such constraint.
            </summary>
      <param name="name">
            Name of the constraint to search for.
            </param>
      <returns>
            The specified <see cref="T:OPTANO.Modeling.Optimization.Constraint" /></returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.GetObjective(System.String)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Objective" /> with name <paramref name="name" /></summary>
      <param name="name">
            The objective name. This can either be the <see cref="P:OPTANO.Modeling.Optimization.Objective.Name" /> that was used for the <see cref="T:OPTANO.Modeling.Optimization.Objective" /> when it was added to the <see cref="T:OPTANO.Modeling.Optimization.Model" />, OR the base64-name that was generated by the OPTANO.Modeling Framework.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Objective" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> mustn't be null or whitespace.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.GetVariable(System.String)">
      <summary>
            Returns the variable named <paramref name="name" />, or <c>null</c> if this model instance contains no such variable.
            </summary>
      <param name="name">
            Name of the variable to search for.
            </param>
      <returns>
            The variable with Name equal to <paramref name="name" /></returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.Read(System.IO.Stream,OPTANO.Modeling.Optimization.Enums.FileType)">
      <summary>
            Reads the specified file in the specified format and adds the content to the current model.
            Note that variable collections will be not restored. All variables will be <see cref="P:OPTANO.Modeling.Optimization.Model.UnhandledVariables" /> instead.
            </summary>
      <param name="filestream">
            The filestream.
            </param>
      <param name="fileType">
            The file type (<c>LP</c> or <c>MPS</c>).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.RemoveConstraint(System.String)">
      <summary>
            Removes the constraint named <paramref name="name" /> from this model instance, or does nothing if this model instance contains no such constraint.
            </summary>
      <param name="name">
            Name of the constraint to remove.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.RemoveConstraints(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Removes a set of constraints from this model instance.
            </summary>
      <param name="names">
            Names of the constraints to remove.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.RemoveObjective(System.String)">
      <summary>
            Removes the <see cref="T:OPTANO.Modeling.Optimization.Objective" /> with name <paramref name="name" /></summary>
      <param name="name">
            The objective name.
            </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> mustn't be null or whitespace.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.RemoveObjective(OPTANO.Modeling.Optimization.Objective)">
      <summary>
            Removes the given <paramref name="objective" />.
            </summary>
      <param name="objective">
            The objective to remove.
            </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="objective" /> mustn't be null.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.RemoveVariable(System.String)">
      <summary>
            Removes the variable named <paramref name="name" /> from this model instance, or does nothing if this model instance contains no such variable.
            </summary>
      <param name="name">
            Name of the variable to remove.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.RemoveVariables(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Removes a set of variables from this model instance.
            </summary>
      <param name="names">
            Names of the variables to remove.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.SetBranchingPriority(System.String,System.Nullable{System.Int32})">
      <summary>
            Sets the branching priority for the given variable.
            </summary>
      <param name="variableName">
            The variable name.
            </param>
      <param name="priority">
            The branching priority.
            Priority must be greater or equal than <c>0</c>.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.Write(System.IO.Stream,OPTANO.Modeling.Optimization.Enums.FileType)">
      <summary>
            Writes the model to the specified filestream.
            </summary>
      <param name="filestream">
            The filestream.
            </param>
      <param name="fileType">
            Type of the file.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.GetUnhandledVariableStatistics(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Variable},System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Variable})">
      <summary>
            Gets the variable statistics for variables that are not managed by a <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /></summary>
      <param name="unhandledVariables">
            The unhandled variables.
            </param>
      <param name="removedInPreprocess">
            The removed in preprocess.
            </param>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.GetVariableStatistics(OPTANO.Modeling.Optimization.Interfaces.IInternalVariableCollection,System.Collections.Generic.HashSet{OPTANO.Modeling.Optimization.Variable})">
      <summary>
            Computes additional variable statistics for a variable collection that registered to this model.
            </summary>
      <param name="variableCollection">
            The variable collection.
            </param>
      <param name="removedInPreprocess">
            The variables that were removed in the preprocessing.
            If null is passed, it is assumed that the solver does not support the computation of the removed variable set.
            </param>
      <returns>
            The <see cref="T:System.Collections.Generic.HashSet`1" />.
            </returns>
      <exception cref="T:System.ArgumentException">
            thrown, if <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> is not registered with the model.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.SetRemovedVariables(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Method can be called by the solver after the set of removed variables was computed during pre-processing.
            </summary>
      <param name="variableNames">
            The variable names.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.AddAlternativeConstraints(OPTANO.Modeling.Optimization.Constraint,System.Collections.Generic.List{OPTANO.Modeling.Optimization.Variable},System.Double)">
      <summary>
            Helper method to add alternative constraints.
            </summary>
      <param name="constraint">
            The constraint.
            </param>
      <param name="variableList">
            The variable list.
            </param>
      <param name="bigM">
            The <c>bigM</c>.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.automaticAddingOfVariables(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Adds unknown variables in the <paramref name="expression" /> to the model, if <see cref="P:OPTANO.Modeling.Optimization.ModelScope.ModelBehavior" /> is <see cref="F:OPTANO.Modeling.Optimization.Enums.ModelBehavior.Auto" />.
            </summary>
      <param name="expression">
            The expression.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.RemoveAllSos(OPTANO.Modeling.Optimization.Enums.SOSType)">
      <summary>
            Removes all SOS with the given <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSType" />.
            </summary>
      <param name="type">
            The type.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Model.RestoreAllSos(System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double}},OPTANO.Modeling.Optimization.Enums.SOSType)">
      <summary>
            Inserts the given sets as SOS with <see cref="T:OPTANO.Modeling.Optimization.Enums.SOSType" /><paramref name="type" /> without recreating the Dictionaries.
            Only use in <see cref="M:OPTANO.Modeling.Optimization.ModelTransformation.RestoreCurrentModel" />.
            </summary>
      <param name="sos">
            The sets to restore.
            </param>
      <param name="type">
            The type for all sets.
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.AreAllConstraintsLinear">
      <summary>
            Have all constraints in this model instance linear expressions?
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.AreAllVariablesBinary">
      <summary>
            Are all variables in this model instance of type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />?
            A <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variable is a special case of an <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Integer" /> variable, where the bounds are in the range of <c>[0, 1]</c>.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.AreAllVariablesContinuous">
      <summary>
            Are variables in this model instance of type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Continuous" />?
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.AreAllVariablesInteger">
      <summary>
            Are all variables in this model instance of type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Integer" />?
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.Constraints">
      <summary>
            Constraints in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.ConstraintsCount">
      <summary>
            Gets the count of constraints in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.IsMultiObectiveModel">
      <summary>
            Gets a value indicating whether this <see cref="T:OPTANO.Modeling.Optimization.Model" /> contains multiple <see cref="T:OPTANO.Modeling.Optimization.Objective" /> fcuntions.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.IsMultiStageModel">
      <summary>
            Gets a value indicating whether this <see cref="T:OPTANO.Modeling.Optimization.Model" /> contains multiple optimization stages.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.IsObjectiveLinear">
      <summary>
            Has the objective in this model instance a linear expression
            </summary>
      <value>
        <c>true</c> if objective is linear, <c>false</c> if objective is null or non-linear</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.Name">
      <summary>
            Name of this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.NotifySolversIfModelChanges">
      <summary>
            If set to <c>true</c> (standard value), will communicate the changes made to this model directly to all solver instances that have previously solved this model.
            </summary>
      <value>
        <c>true</c> if model should notify all solvers; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.Objective">
      <summary>
            Objectives for this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.ObjectiveStagesCount">
      <summary>
            Gets the count of objective stages in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.Objectives">
      <summary>
            Gets the objectives.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.ObjectivesCount">
      <summary>
            Gets the count of objectives in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.OperatorConstraints">
      <summary>
            Gets the Operator Constraints in this model instance.
            The <see cref="P:OPTANO.Modeling.Optimization.Model.OperatorConstraints" /> will be transformed into supported constraints before a model is passed to the solver.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.PriorityLevels">
      <summary>
            Gets the distinct set of priority levels, ordered descending.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.SOS1Sets">
      <summary>
            Sets of <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S1" /> variables in this model instance.
            The <c>Value</c> of each entry indicates the weight for the variable in its SOS.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.SOS2Sets">
      <summary>
            Sets of <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" /> variables in this model instance.
            The <c>Value</c> of each entry indicates the weight for the variable in its SOS. 
            It is used to determine the variable ordering in a SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.SOS3Sets">
      <summary>
            Sets of <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S3" /> variables in this model instance.
            The <c>Value</c> of each entry indicates the weight for the variable in its SOS.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.UnhandledVariables">
      <summary>
            Gets all variables that are not handled by the variable collection that are registered to this model.
            </summary>
      <returns>
            The set of unhandled variables.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.VariableCollections">
      <summary>
            The get variable collection enumerator.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            An enumerable, that contains all variable collections that are registered to this model
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.VariableStatistics">
      <summary>
            Gets additional variable statistics for all variables that are registered to this model.
            Refer to the Model Feature section that is described in the OPTANO.Modeling User Documentation for further information.
            </summary>
      <returns>
            The <see cref="T:System.Collections.Generic.HashSet`1" />.
            All variable statistics
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.Variables">
      <summary>
            Variables in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.VariablesCount">
      <summary>
            Gets the count of variables in this model instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Model.RegisteredSolvers">
      <summary>
            The set of registered solvers.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.ModelTransformation">
      <summary>
            This class offers functionality to transform a model that contains special <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorExpression" />s or <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorConstraint" />s 
            as, e.g., 
            
            <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Max" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Floor" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Abs" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> 
            
            into a form where these expressions vanish in the sense that they are modelled through new <see cref="T:OPTANO.Modeling.Optimization.Variable" />s and <see cref="T:OPTANO.Modeling.Optimization.Constraint" />s.
            This transformation may re-establish linearity of the model.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.ModelTransformation.Solver">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.GenericSolverBase`1" /> that this <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> works on.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.#ctor(OPTANO.Modeling.Optimization.SolverBase)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.ModelTransformation" /> class.
            </summary>
      <param name="solver">
            The <see cref="T:OPTANO.Modeling.Optimization.GenericSolverBase`1" /> to work on. <paramref name="solver" /> is used to determine the <c>OperatorReplacements</c> that should be performed, e.g. <see cref="T:OPTANO.Modeling.Optimization.Enums.MinOperatorReplacement" />, ... .
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.RestoreCurrentModel">
      <summary>
            If the <c>User</c> specified to <see cref="P:OPTANO.Modeling.Optimization.ModelScope.RestoreUserModelAfterSolve" />, the <c>original</c><see cref="T:OPTANO.Modeling.Optimization.Model" /> (i.e. <see cref="T:OPTANO.Modeling.Optimization.Constraint" />s, <see cref="T:OPTANO.Modeling.Optimization.Variable" />s, ...) will be restored.
            </summary>
      <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformCurrentModel">
      <summary>
            Can transform the constraints of the model that contain OperatorExpressions as, e.g., Min into new expressions where these expressions are 
            replaced by new variables and constraints. This means that in the model also some implicit variables marking 
            new representing variables are set.
            Furthermore, the operator constraints can be translated into common <see cref="T:OPTANO.Modeling.Optimization.Constraint" />s, so that they can be handled by default MIP solvers.
            The resulting constraints will be added to the current model.
            Each individual operator (for expressions <c>and</c> constraints) can be controlled via the <see cref="T:System.Enum" /> properties in <see cref="T:OPTANO.Modeling.Optimization.SolverBase" />.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.AddAlternativeConstraints(OPTANO.Modeling.Optimization.Constraint,System.Collections.Generic.List{OPTANO.Modeling.Optimization.Constraint},OPTANO.Modeling.Optimization.Variable)">
      <summary>
            The add alternative constraints.
            </summary>
      <param name="constraint">
            The constraint.
            </param>
      <param name="returnList">
            The return list.
            </param>
      <param name="z">
            The z.
            </param>
      <exception cref="T:System.InvalidOperationException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.AddHelperConstraint(OPTANO.Modeling.Optimization.Expression,System.Double,System.Double)">
      <summary>
            Creates a new <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> and adds it to the <see cref="P:OPTANO.Modeling.Optimization.SolverBase.CurrentModel" />.
            The <see cref="P:OPTANO.Modeling.Optimization.Constraint.Name" /> is stored in <see cref="P:OPTANO.Modeling.Optimization.ModelTransformation.HelperConstraintNames" />.
            Make sure to create all <c>helper</c><see cref="T:OPTANO.Modeling.Optimization.Variable" />s that are used in the <paramref name="expression" /> via the <see cref="M:OPTANO.Modeling.Optimization.ModelTransformation.AddHelperVariable(System.Double,System.Double,OPTANO.Modeling.Optimization.Enums.VariableType)" />, in order to make sure that all <c>helper</c> variables are a) known to the <see cref="P:OPTANO.Modeling.Optimization.SolverBase.CurrentModel" /> and b) removed when the <c>original state</c> of that model is restored.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <param name="lowerBound">
            The lower bound.
            </param>
      <param name="upperBound">
            The upper bound.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.AddHelperVariable(System.Double,System.Double,OPTANO.Modeling.Optimization.Enums.VariableType)">
      <summary>
            Creates a new <c>helper</c> variable.
            If <see cref="P:OPTANO.Modeling.Optimization.ModelScope.ModelBehavior" /> is <see cref="F:OPTANO.Modeling.Optimization.Enums.ModelBehavior.Manual" />, the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> will be added to <see cref="P:OPTANO.Modeling.Optimization.SolverBase.CurrentModel" />.
            In any case, the <see cref="P:OPTANO.Modeling.Optimization.Variable.Name" /> is added to <see cref="P:OPTANO.Modeling.Optimization.ModelTransformation.HelperVariableNames" />.
            </summary>
      <param name="lowerbound">
            The lower bound.
            </param>
      <param name="upperbound">
            The upper bound.
            </param>
      <param name="type">
            The type.
            </param>
      <returns>
            The helper <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.AddTransformedOperator(System.String,System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Constraint})">
      <summary>
            The add transformed operator.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="constraints">
            The constraints.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.ClearRepresentingVariables">
      <summary>
            Sets all <see cref="P:OPTANO.Modeling.Optimization.Operators.Max.RepresentingVariable" /> fields for all Expression types that have that property to null (i.e. Min, Max, Ceil, Floor, Abs)
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.ResolveAbsDefault(OPTANO.Modeling.Optimization.Operators.Interfaces.IAbs,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            The resolve abs default.
            </summary>
      <param name="abs">
            The abs.
            </param>
      <param name="expAbsNormalized">
            The exp abs normalized.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.ResolveCeilDefault(OPTANO.Modeling.Optimization.Operators.Interfaces.ICeil,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            The resolve ceil default.
            </summary>
      <param name="ceil">
            The ceil.
            </param>
      <param name="expCeilNormalized">
            The exp ceil normalized.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.ResolveFloorDefault(OPTANO.Modeling.Optimization.Operators.Interfaces.IFloor,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            The resolve floor default.
            </summary>
      <param name="floor">
            The floor.
            </param>
      <param name="expFloorNormalized">
            The exp floor normalized.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.ResolveMaxDefault(OPTANO.Modeling.Optimization.Operators.Interfaces.IMax,System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression})">
      <summary>
            The resolve max default.
            </summary>
      <param name="max">
            The max.
            </param>
      <param name="expMaxArguments">
            The exp max arguments.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.ResolveMinDefault(OPTANO.Modeling.Optimization.Operators.Interfaces.IMin,System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression})">
      <summary>
            The resolve min default.
            </summary>
      <param name="min">
            The min.
            </param>
      <param name="expMinArguments">
            The exp min arguments.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformConstraint(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            Transforms a single constraint recursively by replacing special operator expressions by new variables and
             adding new constraints to internalmodel. 
            For the original <paramref name="constraint" />, the <see cref="P:OPTANO.Modeling.Optimization.Constraint.Expression" /> will be replaced with the transformed <see cref="T:OPTANO.Modeling.Optimization.Expression" />.
            The original <see cref="T:OPTANO.Modeling.Optimization.Expression" /> is stored in <see cref="P:OPTANO.Modeling.Optimization.ModelTransformation.OriginalConstraintExpressions" />, using the <see cref="P:OPTANO.Modeling.Optimization.Constraint.Name" /> of <paramref name="constraint" /></summary>
      <param name="constraint">
            The constraint
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformObjectives(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Objective})">
      <summary>
            Transforms each single objective recursively by replacing special operator expressions by new variables and
             adding new constraints to internalmodel. 
            </summary>
      <param name="objectives">
            The objectives
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformOperatorConstraint(OPTANO.Modeling.Optimization.Operators.OperatorConstraint)">
      <summary>
            Transforms a single <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorConstraint" /> into a List of Constraints.
            </summary>
      <param name="constraint">
            The OperatorConstraint
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformOperatorExpressionsInOperatorConstraint(OPTANO.Modeling.Optimization.Operators.OperatorConstraint)">
      <summary>
            The transform operator expressions in operator constraint.
            </summary>
      <param name="operatorConstraint">
            The operator constraint.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.Visit(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Visitor for expressions, i.e., here the expression of a constraint is walked through recursively and replacements 
            are performed
            </summary>
      <param name="exp">
            The expression
            </param>
      <returns>
            The expression with replaced components
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitAbs(OPTANO.Modeling.Optimization.Operators.Abs)">
      <summary>
            Visit an Abs OperatorExpression and replace it by a new variable and the constraints that will
            be included in internalmodel. The representing variable of the Abs object will be set.
            If possible, bounds on the representing variable are inherited from the corresponding expression. 
            Todo: Attention: In case of infinite bounds, constraints are added with double.MaxValue instead of infinite constants
            </summary>
      <param name="abs">
            The Abs object
            </param>
      <returns>
            The expression with replaced terms
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitCeil(OPTANO.Modeling.Optimization.Operators.Ceil)">
      <summary>
            Visit a Ceil OperatorExpression and replace it by a new variable and the constraints that will
            be included in internalmodel. The representing variable of the Ceil object will be set
            </summary>
      <param name="ceil">
            The ceil object
            </param>
      <returns>
            The expression with replaced terms
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitConstant(OPTANO.Modeling.Optimization.ConstantExpression)">
      <summary>
            Visitor for Constant. This method is just a dummy and returns the input.
            </summary>
      <param name="constantExpression">
            the constant expression
            </param>
      <returns>
            the input constantExpression
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitFloor(OPTANO.Modeling.Optimization.Operators.Floor)">
      <summary>
            Visit a Floor OperatorExpression and replace it by a new variable and the constraints that will
            be included in internalmodel. The representing variable of the Floor object will be set
            </summary>
      <param name="floor">
            The Floor object
            </param>
      <returns>
            The expression with replaced terms
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitMax(OPTANO.Modeling.Optimization.Operators.Max)">
      <summary>
            Visit a Max OperatorExpression and replace it by a new variable and the constraints that will
            be included in internalmodel. The representing variable of the Max object will be set and in case of a max of more than
            two expressions a reformulation in terms of a recursion of two-arguments max-expressions is performed. 
            TODO: For the resulting implicit max-Expressions only the representing variable on the highest level is stored yet
            ---&gt; find a solution telling the user about every new variable . 
            </summary>
      <param name="max">
            The Max object
            </param>
      <returns>
            The expression with replaced terms
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitMin(OPTANO.Modeling.Optimization.Operators.Min)">
      <summary>
            Visit a Min OperatorExpression and replace it by a new variable and the constraints that will
            be included in internalmodel. The representing variable of the Min object will be set and in case of a min of more than
            two expressions a reformulation in terms of a recursion of two-arguments min-expressions is performed. 
            TODO: For the resulting implicit min-Expressions only the representing variable on the highest level is stored yet
            ---&gt; find a solution telling the user about every new variable . 
            </summary>
      <param name="min">
            The Min object
            </param>
      <returns>
            The expression with replaced terms
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitNot(OPTANO.Modeling.Optimization.Operators.Not)">
      <summary>
            Transforms a <see cref="T:OPTANO.Modeling.Optimization.Operators.Not" /> into a list of Constraints representing a the negated Constraint.
            </summary>
      <param name="notOperator" />
      <returns>
            The resulting constraints.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitOr(OPTANO.Modeling.Optimization.Operators.Or)">
      <summary>
            Transforms an <see cref="T:OPTANO.Modeling.Optimization.Operators.Or" /> into a list of Constraints to form an or condition.
            </summary>
      <param name="or">
            The or
            </param>
      <returns>
            The resulting constraints.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitPlus(OPTANO.Modeling.Optimization.Operators.Plus)">
      <summary>
            Visitor for Plus
            </summary>
      <param name="plus">
            A Plus OperatorExpression
            </param>
      <returns>
            A Plus-Expression with replaced components
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitSubExpressionsAndCheckChange(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression})">
      <summary>
            Visits all given <paramref name="subExpreesions" />. If <c>at least one</c> subexpression was changed during its <see cref="M:OPTANO.Modeling.Optimization.ModelTransformation.Visit(OPTANO.Modeling.Optimization.Expression)" />, an <see cref="T:System.Collections.Generic.IEnumerable`1" /> is returned, that contains all <paramref name="subExpreesions" /> (i.e. changed <c>AND</c> unchanged ones).
            If <c>no</c> subexpression was changed, <c>null</c> is returned.
            </summary>
      <param name="subExpreesions">
            The subepressions of an <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorExpression" /></param>
      <returns>
        <c>null</c>, if no subexpression was manipulated when it was visited.
            All <see cref="M:OPTANO.Modeling.Optimization.ModelTransformation.Visit(OPTANO.Modeling.Optimization.Expression)" />ed <paramref name="subExpreesions" />, else.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitTerm(OPTANO.Modeling.Optimization.Term)">
      <summary>
            Visitor for Term. This method is just a dummy and returns the input
            </summary>
      <param name="term">
            the term
            </param>
      <returns>
            the input term
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitTimes(OPTANO.Modeling.Optimization.Operators.Times)">
      <summary>
            Visitor for Times.
            </summary>
      <param name="times">
            A Times OperatorExpression
            </param>
      <returns>
            A Times-Expression with replaced components 
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.VisitWhere(OPTANO.Modeling.Optimization.Operators.Where)">
      <summary>
            Transforms a <see cref="T:OPTANO.Modeling.Optimization.Operators.Where" /> into a list of Constraints to form a where.
            </summary>
      <param name="where" />
      <returns>
            The resulting constraints.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.maxOfAllowedExpressionsDC(OPTANO.Modeling.Optimization.Variable,System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression},System.Double)">
      <summary>
            Helper routine for VisitMax. recursivley reformulate z = max(argumentexpressions) by a divide and conquer Ansatz
            until only max-expressions of two arguments are left. If possible, bounds on the 
            representing variables are inherited from the corresponding expressions. If not :
            Attention: Any expression that can not be estimated by finite bounds will receive bounds double.NegativeInfinity and 
            double.PositiveInfinity.
            Todo: In that case the new constraints will work with the constants +/- double.MaxValue!!!
            ToDo: Using skip and take for the division is dirty. IEnumerable does not guarantee ordering 
            -&gt; potentially use Except to make sure no element was used twice
            </summary>
      <param name="z">
            the representing variable for the max object in this call
            </param>
      <param name="argumentexpressions">
            the arguments of the corresponding max in this call
            </param>
      <param name="bigM">
            Large number, used if the bounds of the variables of the expressions are non-finite
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.minOfAllowedExpressionsDC(OPTANO.Modeling.Optimization.Variable,System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression},System.Double)">
      <summary>
            Helper routine for VisitMin. recursivley reformulate z = min(argumentexpressions) by a divide and conquer Ansatz
            until only min-expressions of two arguments are left. If possible, bounds on the 
            representing variables are inherited from the corresponding expressions. If not :
            Attention: Any expression that can not be estimated by finite bounds will receive bounds double.NegativeInfinity and 
            double.PositiveInfinity.
            Todo: In that case the new constraints will work with the constants +/- double.MaxValue!!!
            ToDo: Using skip and take for the division is dirty. IEnumerable does not guarantee ordering -&gt; potentially use Except to make sure no element was used twice
            </summary>
      <param name="z">
            the representing variable for the min object in this call
            </param>
      <param name="argumentexpressions">
            the arguments of the corresponding min in this call
            </param>
      <param name="bigM">
            Large number, used if the bounds of the variables of the expressions are non-finite
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformSosType1(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Creates helper constraints + variables that are equivalent to the given SOS.
            </summary>
      <param name="sos1">
            The SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S1" />.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformSosType2(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Creates helper constraints + variables that are equivalent to the given SOS.
            </summary>
      <param name="sos2">
            The SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S2" />.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.ModelTransformation.TransformSosType3(System.Collections.Generic.Dictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Creates helper constraints + variables that are equivalent to the given SOS.
            </summary>
      <param name="sos3">
            The SOS of type <see cref="F:OPTANO.Modeling.Optimization.Enums.SOSType.S3" />.
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelTransformation.HelperConstraintNames">
      <summary>
            Gets or sets the helper constraint names.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelTransformation.HelperVariableNames">
      <summary>
            Gets or sets the helper variable names.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelTransformation.OriginalConstraintExpressions">
      <summary>
            Gets or sets the original constraint expressions.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.ModelTransformation.OriginalObjectiveExpressions">
      <summary>
            Gets or sets the original objective expressions.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Objective">
      <summary>
            Represents an objective function.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Objective._absoluteTolerance">
      <summary>
            The absolute tolerance backing field.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Objective._relativeTolerance">
      <summary>
            The relative tolerance backing field.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Objective.#ctor(OPTANO.Modeling.Optimization.Expression,System.String,OPTANO.Modeling.Optimization.Enums.ObjectiveSense,System.Int32,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Objective" /> class.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <param name="name">
            The name.
            </param>
      <param name="sense">
            The sense.
            </param>
      <param name="priorityLevel">
            The priority Level. The higher the level, the earlier this objective will be considered durin hierarchical optimization.
            
            All objectives with the same level will be combined, using the <c>weighted average</c>.
            </param>
      <param name="weight">
            The weight for computing the <c>weighted average</c>.
            </param>
      <param name="relativeTolerance">
            The relative Tolerance.
            
            During <c>hierarchical optimization</c> it will be ensured that the objective function value will not be worse than <c>max(<paramref name="absoluteTolerance" />, optimalSolutionValue * <paramref name="relativeTolerance" />)</c>, i.e.: the <c>WEAKER</c> of the two tolerances will be used.
            </param>
      <param name="absoluteTolerance">
            The absolute Tolerance.
            
            During <c>hierarchical optimization</c> it will be ensured that the objective function value will not be worse than <c>max(<paramref name="absoluteTolerance" />, optimalSolutionValue * <paramref name="relativeTolerance" />)</c>, i.e.: the <c>WEAKER</c> of the two tolerances will be used.
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Objective.AbsoluteTolerance">
      <summary>
            Gets or sets the absolute tolerance during hierarchical optimization.
            If <paramref name="value" /> is <c>null</c> or <c><paramref name="value" /> &lt; <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" /></c>, <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" /> is returned.
            
            Ensures that this objective value will not change more than <c><see cref="P:OPTANO.Modeling.Optimization.Objective.AbsoluteTolerance" /> times z*</c> in further iterations (when <c>z*</c> is the optimal value for this <see cref="T:OPTANO.Modeling.Optimization.Objective" />).
            </summary>
      <exception cref="T:System.ArgumentException">
            Requires <paramref name="value" /> &gt;= 0.
            </exception>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Objective.Expression">
      <summary>
            Gets or sets the Expression of this objective.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Objective.Name">
      <summary>
            Gets the unique name of this objective.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Objective.OriginalName">
      <summary>
            Gets the name that was originally passed as ctor parameter by the user.
            Used to retrieve <see cref="T:OPTANO.Modeling.Optimization.Objective" /> from <see cref="T:OPTANO.Modeling.Optimization.Model" /> by <see cref="P:OPTANO.Modeling.Optimization.Objective.Name" />, if user only knows "his" string.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Objective.PriorityLevel">
      <summary>
            Gets or sets the priority level for <c>multiobjective optimization</c>.
            
            All <see cref="T:OPTANO.Modeling.Optimization.Objective" />s with the same <see cref="P:OPTANO.Modeling.Optimization.Objective.PriorityLevel" /> are grouped together and <c>combined</c>, using the specified <see cref="P:OPTANO.Modeling.Optimization.Objective.Weight" />.
            
            During the solution process, the <see cref="T:OPTANO.Modeling.Optimization.Objective" />s are ordered descending by <see cref="P:OPTANO.Modeling.Optimization.Objective.PriorityLevel" />. In each iteration, the current <see cref="T:OPTANO.Modeling.Optimization.Objective" /> z (which can be a combination of several <see cref="T:OPTANO.Modeling.Optimization.Objective" />s in a priority level) is optimized. Then, a <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> is added to the <see cref="T:OPTANO.Modeling.Optimization.Model" /> which ensures that <c>z &gt;= z*</c> for all further optimizations of <see cref="T:OPTANO.Modeling.Optimization.Objective" />s in <c>lower</c><see cref="P:OPTANO.Modeling.Optimization.Objective.PriorityLevel" />s.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Objective.RelativeTolerance">
      <summary>
            Gets or sets the relative tolerance during hierarchical optimization.
            If <paramref name="value" /> is <c>null</c> or <c><paramref name="value" /> &lt; <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" /></c>, <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EPSILON" /> is returned.
            
            Ensures that this objective value will not change more than <c><see cref="P:OPTANO.Modeling.Optimization.Objective.RelativeTolerance" /> times z*</c> in further iterations (when <c>z*</c> is the optimal value for this <see cref="T:OPTANO.Modeling.Optimization.Objective" />).
            </summary>
      <exception cref="T:System.ArgumentException">
            Requires <paramref name="value" /> &gt;= 0.
            </exception>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Objective.Sense">
      <summary>
            Gets or sets the sense of this objective.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Objective.Weight">
      <summary>
            Gets or sets the weight for this objective for <c>multiobjective optimization</c>.
            
            During a multiobjective optimization, all <see cref="T:OPTANO.Modeling.Optimization.Objective" />s in the same <see cref="P:OPTANO.Modeling.Optimization.Objective.PriorityLevel" /> are summed up with respect to their <see cref="P:OPTANO.Modeling.Optimization.Objective.Weight" />.
            
            I.e. <c>z' = (w1 * z1 + w2 * z2 + ... wk * zk)</c>.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Objective.NormalizationFactor">
      <summary>
            Gets the normalization factor that is required to normalize <see cref="P:OPTANO.Modeling.Optimization.Objective.Expression" /> so that <c><see cref="P:OPTANO.Modeling.Optimization.Objective.Weight" /> &gt;= 0</c> and <see cref="P:OPTANO.Modeling.Optimization.Objective.Sense" /> is <see cref="F:OPTANO.Modeling.Optimization.Enums.ObjectiveSense.Minimize" />.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.IOperator">
      <summary>
            Defines an interface for an operator as, e.g., <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Plus" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Times" />, etc.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Interfaces.IOperator.Evaluate(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Evaluates the specified expressions using the specified variableValues.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The result.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.IOperator.PreservesLinearity">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with terms.
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.OperatorExpression">
      <summary>
            An operator expression connects (a number of) <see cref="T:OPTANO.Modeling.Optimization.Expression" />s, using an operator as, e.g., <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Plus" />, <see cref="T:OPTANO.Modeling.Optimization.Operators.Times" />, etc.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Operators.OperatorExpression._expressions">
      <summary>
            The _expressions.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.OperatorExpression.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression},System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.OperatorExpression" /> class.
            </summary>
      <param name="expressions">
            The expressions.
            </param>
      <param name="min">
            The minimal number of elements in expressions
            </param>
      <param name="max">
            The maximal number of elements in expressions
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.OperatorExpression.Expressions">
      <summary>
            Gets the expressions.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.OperatorExpression.PreservesLinearity">
      <summary>
            Gets a value indicating whether the <see cref="T:OPTANO.Modeling.Optimization.Expression" /> preserves linearity.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.OperatorExpression.Terms">
      <summary>
            Gets the terms.
            </summary>
      <value>The terms.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.OperatorExpression.Variables">
      <summary>
            Gets the variables.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.IAbs">
      <summary>
            Describes the interface for the Abs operation
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.IAbs.BigM">
      <summary>
            Gets or sets the big m.
            Often used to provide a <c>finite</c> bound on a <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> that does not restrict any of the <see cref="T:OPTANO.Modeling.Optimization.Variable" />s in the <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.IAbs.RepresentingVariable">
      <summary>
            Gets or sets the representing variable.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Abs">
      <summary>
            Represents the Operator for an absolute value
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Abs.#ctor(OPTANO.Modeling.Optimization.Expression,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Abs" /> class.
            </summary>
      <param name="expression">
            An expression.
            </param>
      <param name="bigM">
            Large number, only used if the bounds of the variables of the expressions are non-finite
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Abs.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            The evaluate recursive.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The <see cref="T:System.Double" />.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Abs.BigM">
      <summary>
            Gets or sets a number which is used transforming the abs-expression into expressions, which can be handled by the solvers.
            It should be chosen large enough, so that the solution space is not cut. 
            But choosing this value too large, it can cause numerical errors.
            It's not used in cases, where only terms are used as operators, containing variables with finite bounds. 
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Abs.IsLinear">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with linear expressions. Linearity can be 
            re-established when modelling through linear constraints with new variables.
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Abs.PreservesLinearity">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with terms. Linearity can be
            re-established when modelling through linear constraints with new variables.
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Abs.RepresentingVariable">
      <summary>
            Gets or sets a variable that can later be set to the representing variable when a model transformation for removing Abs- 
            expressions is applied.  
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.ICeil">
      <summary>
            Describes the interface for the Ceil operation
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.ICeil.RepresentingVariable">
      <summary>
            Gets or sets the representing variable.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Ceil">
      <summary>
            Represents the Operator for a ceil roundoff
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Ceil.#ctor(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Ceil" /> class.
            </summary>
      <param name="expression">
            An expression.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Ceil.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Evaluates the <c>value</c> of the stored <see cref="T:OPTANO.Modeling.Optimization.Expression" /> using the <paramref name="variableValues" /> and returns <see cref="M:System.Math.Ceiling(System.Double)" />(<c>value</c>).
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The result.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Ceil.IsLinear">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with linear expressions. Linearity can be 
            re-established when modelling through linear constraints with a new variable.
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Ceil.PreservesLinearity">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with terms. Linearity can be 
            re-established when modelling through constraints with new variables.
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Ceil.RepresentingVariable">
      <summary>
            A variable that can later be set to the representing variable when a model transformation for removing Ceil- 
            expressions is applied.  
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.IFloor">
      <summary>
            Describes the interface for the Floor operation
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.IFloor.RepresentingVariable">
      <summary>
            Gets or sets the representing variable.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Floor">
      <summary>
            Represents the Operator for a floor roundoff
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Floor.#ctor(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Floor" /> class.
            </summary>
      <param name="expression">
            An expression.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Floor.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Evaluates the <c>value</c> of the stored <see cref="T:OPTANO.Modeling.Optimization.Expression" /> using the <paramref name="variableValues" /> and returns <see cref="M:System.Math.Floor(System.Double)" />(<c>value</c>).
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The result.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Floor.IsLinear">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with linear expressions. Linearity can be 
            re-established when modelling through linear constraints with a new variable.
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Floor.PreservesLinearity">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with terms. Linearity can be 
            re-established when modelling through constraints with new variables.
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Floor.RepresentingVariable">
      <summary>
            A variable that can later be set to the representing variable when a model transformation for removing Floor- 
            expressions is applied.  
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.IMax">
      <summary>
            Describes the interface for the max operation
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.IMax.BigM">
      <summary>
            Gets or sets the big m.
            Often used to provide a <c>finite</c> bound on a <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> that does not restrict any of the <see cref="T:OPTANO.Modeling.Optimization.Variable" />s in the <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.IMax.RepresentingVariable">
      <summary>
            Gets or sets the representing variable.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.IMin">
      <summary>
            Describes the interface for the min operation
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.IMin.BigM">
      <summary>
            Gets or sets the big m.
            Often used to provide a <c>finite</c> bound on a <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> that does not restrict any of the <see cref="T:OPTANO.Modeling.Optimization.Variable" />s in the <see cref="T:OPTANO.Modeling.Optimization.Constraint" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Interfaces.IMin.RepresentingVariable">
      <summary>
            Gets or sets the representing variable.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.IPlus">
      <summary>
            Describes the interface for the plus operation
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Interfaces.ITimes">
      <summary>
            Describes the interface for the times operation
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Max">
      <summary>
            Represents the Operator for a maximum
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Max.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression},System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Max" /> class.
            </summary>
      <param name="expressions">
            The expressions.
            </param>
      <param name="bigM">
            Large number, only used if the bounds of the variables of the expressions are non-finite
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Max.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Evaluates the <c>value</c> of all stored <see cref="T:OPTANO.Modeling.Optimization.Expression" />s using the <paramref name="variableValues" /> and returns the <see cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />(<c>value</c>).
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The result.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Max.BigM">
      <summary>
            Gets or sets the big M.
            A number which is used transforming the max-expression into expressions, which can be handled by the solvers.
            It should be choosen large enough, so that the solution space is not cut. 
            But choosing this value too large, it can cause numerical errors.
            It's not used in cases, where only terms are used as operators, containing variables with finite bounds. 
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Max.IsLinear">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with linear expressions. Linearity can 
            be re-established when modelling through linear constraints with new variables, i.e., z=max(expression1,expression2) and w \in \{ 0,1\} 
            for two expressions 
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Max.PreservesLinearity">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with terms. Linearity can be  
            re-established when modelling through linear constraints with new variables, i.e., z=max(expression1,expression2) and w \in \{ 0,1\}
            for two expresssions 
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Max.RepresentingVariable">
      <summary>
            A variable that can later be set to the representing variable when a model transformation for removing Max- 
            expressions is applied.  
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Min">
      <summary>
            Represents the Operator for a minimum
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Min.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression},System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Min" /> class. 
            </summary>
      <param name="expressions">
            The expressions.
            </param>
      <param name="bigM">
            Large number, only used if the bounds of the variables of the expressions are non-finite
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Min.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Evaluates the <c>value</c> of all stored <see cref="T:OPTANO.Modeling.Optimization.Expression" />s using the <paramref name="variableValues" /> and returns the <see cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />(<c>value</c>).
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The result.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Min.BigM">
      <summary>
            Gets or sets the big M.
            A number which is used transforming the min-expression into expressions, which can be handled by the solvers.
            It should be choosen large enough, so that the solution space is not cut. 
            But choosing this value too large, it can cause numerical errors.
            It's not used in cases, where only terms are used as operators, containing variables with finite bounds. 
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Min.IsLinear">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with linear expressions. Linearity can be re-established 
            when modelling through linear constraints with new variables, i.e., z=min(expression1,expression2) and w \in \{ 0,1\} 
            for two expressions.   
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Min.PreservesLinearity">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with terms. Linearity can be 
            re-established when modelling through linear constraints with new variables, i.e., z=min(expression1,expression2) and w \in \{ 0,1\}
            for two expresssions 
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Min.RepresentingVariable">
      <summary>
            A variable that can later be set to the representing variable when a model transformation for removing Min- 
            expressions is applied.  
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Plus">
      <summary>
            Represents the Operator for an addition
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Plus" /> class.
            </summary>
      <param name="expressions">
            The expressions.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.#ctor(OPTANO.Modeling.Optimization.Term,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Plus" /> class.
            </summary>
      <param name="term1">
            The first term.
            </param>
      <param name="term2">
            The second term.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.op_Addition(OPTANO.Modeling.Optimization.Operators.Plus,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="plus">The plus.</param>
      <param name="expression">The expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.op_Addition(OPTANO.Modeling.Optimization.Operators.Plus,System.Double)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="plus">The plus.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.op_Addition(System.Double,OPTANO.Modeling.Optimization.Operators.Plus)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="constant">The constant.</param>
      <param name="plus">The plus.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.op_Addition(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Operators.Plus)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="expression">The expression.</param>
      <param name="plus">The plus.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.op_Addition(OPTANO.Modeling.Optimization.Operators.Plus,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="plus">The plus.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.op_Addition(OPTANO.Modeling.Optimization.Term,OPTANO.Modeling.Optimization.Operators.Plus)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="term">The term.</param>
      <param name="plus">The plus.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.op_Addition(OPTANO.Modeling.Optimization.Operators.Plus,OPTANO.Modeling.Optimization.Operators.Plus)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="plus1">The first plus.</param>
      <param name="plus2">The second plus.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Evaluates the <c>value</c> of all stored <see cref="T:OPTANO.Modeling.Optimization.Expression" />s using the <paramref name="variableValues" /> and returns the <see cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />(<c>value</c>).
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The result.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Plus.MergeConstantExpressions(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression})">
      <summary>
            Merges all <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" />s into a single constant expression.
            Only applied if at least 1 non-constant expression is contained in <paramref name="expressions" />, in oder to fulfill the CodeContract ("at least 2 factors for a <see cref="T:OPTANO.Modeling.Optimization.Operators.Plus" /> operator").
            </summary>
      <param name="expressions">
            The expressions.
            </param>
      <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Plus.IsLinear">
      <summary>
            Gets a value indicating whether this instance is linear.
            </summary>
      <value>
        <c>true</c> if this instance is linear; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Plus.PreservesLinearity">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with terms.
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Operators.Times">
      <summary>
            Represents the Operator for a multiplication
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Times.#ctor(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Operators.Times" /> class.
            </summary>
      <param name="expressions">
            The expressions.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Times.op_Multiply(OPTANO.Modeling.Optimization.Operators.Times,OPTANO.Modeling.Optimization.Operators.Times)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="times1">The left factor.</param>
      <param name="times2">The right factor.</param>
      <returns>The result of the operator as single <see cref="T:OPTANO.Modeling.Optimization.Operators.Times" />.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Times.op_Multiply(OPTANO.Modeling.Optimization.Operators.Times,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="times">The left expression.</param>
      <param name="expression2">The right expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Times.op_Multiply(OPTANO.Modeling.Optimization.Expression,OPTANO.Modeling.Optimization.Operators.Times)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="expression1">The left expression.</param>
      <param name="expression2">The right expression.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Times.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Times.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Evaluates the <c>value</c> of all stored <see cref="T:OPTANO.Modeling.Optimization.Expression" />s using the <paramref name="variableValues" /> and returns the <c>product</c> of all <c>values</c>.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The result.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Operators.Times.MergeConstantExpressions(System.Collections.Generic.IEnumerable{OPTANO.Modeling.Optimization.Expression})">
      <summary>
            Merges all <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" />s into a single constant expression.
            Only applied if at least 1 non-constant expression is contained in <paramref name="expressions" />, in oder to fulfill the CodeContract ("at least 2 factors for a <see cref="T:OPTANO.Modeling.Optimization.Operators.Times" /> operator").
            </summary>
      <param name="expressions">
            The expressions.
            </param>
      <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Times.IsLinear">
      <summary>
            Gets or sets a value indicating whether this instance is linear.
            </summary>
      <value>
        <c>true</c> if this instance is linear; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Operators.Times.PreservesLinearity">
      <summary>
            Gets a value indicating whether this operator always preserves linearity when used with terms.
            </summary>
      <value>
        <c>true</c> if linearity is preserved otherwise, <c>false</c>.</value>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase">
      <summary>
            The base class for all generic VariableCollection classes
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.GenericVariableCollectionBase._internalVariableCollection">
      <summary>
            Variable Collection that is used internally.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.GenericVariableCollectionBase.GetLongNameFromIndex(System.Object[])">
      <summary>
            If the model uses short names, the long name is generated from the given <paramref name="index" />.
            Else, the name of the variable for the given <paramref name="index" /> is returned.
            </summary>
      <param name="index">
            The index.
            If the variable for the index has not been created yet, an exception will be thrown.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
            The long name for the variable at <c>this[index]</c>.
            <exception cref="T:System.ArgumentException">
            Thrown, if the <paramref name="index" /> is not yet known.
            </exception></member>
    <member name="M:OPTANO.Modeling.Optimization.GenericVariableCollectionBase.SetVariableValues(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Sets the value property for each variable in this <see cref="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase" /> to the corresponding value in the <paramref name="values" />. The matching happens by string comparison of the name of the variable.
            </summary>
      <param name="values">
            The values for the variables (e.g. coming from a solution)
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.GenericVariableCollectionBase.ExistingIndices">
      <summary>
            Gets the existing indices.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" /> with all already known indices.
            I.e. all indices that have already been used to access this <see cref="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase" />.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.GenericVariableCollectionBase.IndexValidationStyle">
      <summary>
            Changes the behavior of a <see cref="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase" />. If set to <c>true</c> the <see cref="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase" /> will validate if an <c>index</c> belongs to the sets the <see cref="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase" /> is based on.
            The check is computationally expensive and should only be performed when you debug a model.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.GenericVariableCollectionBase.Name">
      <summary>
            Gets the name of the <see cref="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.GenericVariableCollectionBase.ValidIndices">
      <summary>
            Gets an <see cref="T:System.Collections.IEnumerable" /> that iterates over all valid index combinations for this <see cref="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase" />.
            </summary>
      <returns>The valid indices.</returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.GenericVariableCollectionBase.Variables">
      <summary>
            Gets an <see cref="T:System.Collections.IEnumerable" /> that contains all <c>existing</c><see cref="T:OPTANO.Modeling.Optimization.Variable" />s in this <see cref="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase" />.
            I.e. all variables that were generated when this <see cref="T:OPTANO.Modeling.Optimization.GenericVariableCollectionBase" /> was accessed with the variables <c>index</c>.
            </summary>
      <returns>The variables.</returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection`1">
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your <see cref="T:OPTANO.Modeling.Optimization.Variable" />s more intuitively
            </summary>
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your Variables more intuitively. 
            It groups variable with the same meaning. 
            In a mathematical model a VariableCollection is represented by a single symbol (like <c>x</c>); a variable by a symbol with indices (like <c>x_{i,j}</c>).
            Some (optional) generators are used to calculate parameters for each of the VariableCollection's variable:
            
            * DebugNameGenerator
            
            * LowerBoundGenerator
            
            * UpperBoundGenerator
            
            * BranchingPriorityGenerator
            
            </summary>
      <typeparam name="T">
            Element type for the 1st index set.
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`1.#ctor(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.IEnumerable{`0},System.String,System.Func{`0,System.Text.StringBuilder},System.Func{`0,System.Double},System.Func{`0,System.Double},OPTANO.Modeling.Optimization.Enums.VariableType,System.Func{`0,System.Nullable{System.Int32}},System.Func{`0,OPTANO.Modeling.Optimization.Enums.BranchingDirection})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`1" /> class.
            </summary>
      <param name="model">
            The <see cref="T:OPTANO.Modeling.Optimization.Model" /> this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`1" /> belongs to.
            A <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`1" /> needs to belong to exactly one <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </param>
      <param name="indexSet1">
            The index set with elements of type <typeparamref name="T" /></param>
      <param name="name">
            The name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in the given <paramref name="model" />.
            If <paramref name="name" /> equals <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" />, a <c>base64</c> index will be generated automatically.
            </param>
      <param name="debugNameGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`1" /> and produces a <see cref="T:System.Text.StringBuilder" /> as output.
            The generator will be used when <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>true</c>.
            The <see cref="T:System.String" /> that is produced by the <see cref="T:System.Text.StringBuilder" /> will be prepended to the unique variable name. 
            The objective is to make the generated <see cref="T:OPTANO.Modeling.Optimization.Model" /> more readable, especially when trying to fix bugs.
            By default, the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>false</c> in order to reduce the amount of RAM required to store variable names.
            </param>
      <param name="lowerBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`1" /> and defines a lower bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>0</c> will be used as default lower bound for every variable.
            </param>
      <param name="upperBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`1" /> and defines an upper bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>double.PositiveInfinity</c> will be used as default upper bound for every non-binary variable.
            For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables, <c>1</c> will be used as upper bound.
            </param>
      <param name="type">
            The variable type. For type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />, all bounds need to be in the range of <c>[0, 1]</c>.
            </param>
      <param name="branchingPriorityGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
      <param name="branchingDirectionGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`1.CallDelegateFunciton``1(System.Func{`0,``0},System.Object[])">
      <summary>
            Returns a delegate function call.
            </summary>
      <param name="func">
            The function to be called with the given index
            </param>
      <param name="index">
            The index.
            Should be of the same length as the number of input parameters for the <paramref name="func" />.
            </param>
      <typeparam name="TTargetType">
            The return type of the <paramref name="func" /></typeparam>
      <returns>
            The result of func(index).
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection`1.Item(`0)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <c>index</c>.
            </summary>
      <param name="element1">
            Element of the index <c>1st</c> index set.
            </param>
      <returns>
            The variable for the given <c>index</c></returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection`2">
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your <see cref="T:OPTANO.Modeling.Optimization.Variable" />s more intuitively
            </summary>
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your Variables more intuitively. 
            It groups variable with the same meaning. 
            In a mathematical model a VariableCollection is represented by a single symbol (like <c>x</c>); a variable by a symbol with indices (like <c>x_{i,j}</c>).
            Some (optional) generators are used to calculate parameters for each of the VariableCollection's variable:
            
            * DebugNameGenerator
            
            * LowerBoundGenerator
            
            * UpperBoundGenerator
            
            * BranchingPriorityGenerator
            
            </summary>
      <typeparam name="T">
            Element type for the 1st index set.
            </typeparam>
      <typeparam name="T2">
            Element type for the 2nd index set.
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`2.#ctor(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.String,System.Func{`0,`1,System.Text.StringBuilder},System.Func{`0,`1,System.Double},System.Func{`0,`1,System.Double},OPTANO.Modeling.Optimization.Enums.VariableType,System.Func{`0,`1,System.Nullable{System.Int32}},System.Func{`0,`1,OPTANO.Modeling.Optimization.Enums.BranchingDirection})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`2" /> class. 
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`2" /> class.
            </summary>
      <param name="model">
            The <see cref="T:OPTANO.Modeling.Optimization.Model" /> this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`2" /> belongs to.
            A <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`2" /> needs to belong to exactly one <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </param>
      <param name="indexSet1">
            The index set with elements of type <typeparamref name="T" /></param>
      <param name="indexSet2">
            The index set with elements of type <typeparamref name="T2" /></param>
      <param name="name">
            The name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in the given <paramref name="model" />.
            If <paramref name="name" /> equals <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" />, a <c>base64</c> index will be generated automatically.
            </param>
      <param name="debugNameGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`2" /> and produces a <see cref="T:System.Text.StringBuilder" /> as output.
            The generator will be used when <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>true</c>.
            The <see cref="T:System.String" /> that is produced by the <see cref="T:System.Text.StringBuilder" /> will be prepended to the unique variable name. 
            The objective is to make the generated <see cref="T:OPTANO.Modeling.Optimization.Model" /> more readable, especially when trying to fix bugs.
            By default, the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>false</c> in order to reduce the amount of RAM required to store variable names.
            </param>
      <param name="lowerBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`2" /> and defines a lower bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>0</c> will be used as default lower bound for every variable.
            </param>
      <param name="upperBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`2" /> and defines an upper bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>double.PositiveInfinity</c> will be used as default upper bound for every non-binary variable.
            For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables, <c>1</c> will be used as upper bound.
            </param>
      <param name="type">
            The variable type. For type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />, all bounds need to be in the range of <c>[0, 1]</c>.
            </param>
      <param name="branchingPriorityGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
      <param name="branchingDirectionGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`2.CallDelegateFunciton``1(System.Func{`0,`1,``0},System.Object[])">
      <summary>
            Returns a delegate function call.
            </summary>
      <param name="func">
            The function to be called with the given index
            </param>
      <param name="index">
            The index.
            Should be of the same length as the number of input parameters for the <paramref name="func" />.
            </param>
      <typeparam name="TTargetType">
            The return type of the <paramref name="func" /></typeparam>
      <returns>
            The result of func(index).
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection`2.Item(`0,`1)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <c>index</c>.
            </summary>
      <param name="element1">
            Element of the index <c>1st</c> index set.
            </param>
      <param name="element2">
            Element of the index <c>2nd</c> index set.
            </param>
      <returns>
            The variable for the given <c>index</c></returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection`3">
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your <see cref="T:OPTANO.Modeling.Optimization.Variable" />s more intuitively
            </summary>
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your Variables more intuitively. 
            It groups variable with the same meaning. 
            In a mathematical model a VariableCollection is represented by a single symbol (like <c>x</c>); a variable by a symbol with indices (like <c>x_{i,j}</c>).
            Some (optional) generators are used to calculate parameters for each of the VariableCollection's variable:
            
            * DebugNameGenerator
            
            * LowerBoundGenerator
            
            * UpperBoundGenerator
            
            * BranchingPriorityGenerator
            
            </summary>
      <typeparam name="T">
            Element type for the 1st index set.
            </typeparam>
      <typeparam name="T2">
            Element type for the 2nd index set.
            </typeparam>
      <typeparam name="T3">
            Element type for the 3rd index set.
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`3.#ctor(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.String,System.Func{`0,`1,`2,System.Text.StringBuilder},System.Func{`0,`1,`2,System.Double},System.Func{`0,`1,`2,System.Double},OPTANO.Modeling.Optimization.Enums.VariableType,System.Func{`0,`1,`2,System.Nullable{System.Int32}},System.Func{`0,`1,`2,OPTANO.Modeling.Optimization.Enums.BranchingDirection})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`3" /> class. 
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`3" /> class.
            </summary>
      <param name="model">
            The <see cref="T:OPTANO.Modeling.Optimization.Model" /> this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`3" /> belongs to.
            A <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`3" /> needs to belong to exactly one <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </param>
      <param name="indexSet1">
            The index set with elements of type <typeparamref name="T" /></param>
      <param name="indexSet2">
            The index set with elements of type <typeparamref name="T2" /></param>
      <param name="indexSet3">
            The index set with elements of type <typeparamref name="T3" /></param>
      <param name="name">
            The name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in the given <paramref name="model" />.
            If <paramref name="name" /> equals <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" />, a <c>base64</c> index will be generated automatically.
            </param>
      <param name="debugNameGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`3" /> and produces a <see cref="T:System.Text.StringBuilder" /> as output.
            The generator will be used when <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>true</c>.
            The <see cref="T:System.String" /> that is produced by the <see cref="T:System.Text.StringBuilder" /> will be prepended to the unique variable name. 
            The objective is to make the generated <see cref="T:OPTANO.Modeling.Optimization.Model" /> more readable, especially when trying to fix bugs.
            By default, the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>false</c> in order to reduce the amount of RAM required to store variable names.
            </param>
      <param name="lowerBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`3" /> and defines a lower bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>0</c> will be used as default lower bound for every variable.
            </param>
      <param name="upperBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`3" /> and defines an upper bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>double.PositiveInfinity</c> will be used as default upper bound for every non-binary variable.
            For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables, <c>1</c> will be used as upper bound.
            </param>
      <param name="type">
            The variable type. For type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />, all bounds need to be in the range of <c>[0, 1]</c>.
            </param>
      <param name="branchingPriorityGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
      <param name="branchingDirectionGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`3.CallDelegateFunciton``1(System.Func{`0,`1,`2,``0},System.Object[])">
      <summary>
            Returns a delegate function call.
            </summary>
      <param name="func">
            The function to be called with the given index
            </param>
      <param name="index">
            The index.
            Should be of the same length as the number of input parameters for the <paramref name="func" />.
            </param>
      <typeparam name="TTargetType">
            The return type of the <paramref name="func" /></typeparam>
      <returns>
            The result of func(index).
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection`3.Item(`0,`1,`2)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <c>index</c>.
            </summary>
      <param name="element1">
            Element of the index <c>1st</c> index set.
            </param>
      <param name="element2">
            Element of the index <c>2nd</c> index set.
            </param>
      <param name="element3">
            Element of the index <c>3rd</c> index set.
            </param>
      <returns>
            The variable for the given <c>index</c></returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection`4">
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your <see cref="T:OPTANO.Modeling.Optimization.Variable" />s more intuitively
            </summary>
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your Variables more intuitively. 
            It groups variable with the same meaning. 
            In a mathematical model a VariableCollection is represented by a single symbol (like <c>x</c>); a variable by a symbol with indices (like <c>x_{i,j}</c>).
            Some (optional) generators are used to calculate parameters for each of the VariableCollection's variable:
            
            * DebugNameGenerator
            
            * LowerBoundGenerator
            
            * UpperBoundGenerator
            
            * BranchingPriorityGenerator
            
            </summary>
      <typeparam name="T">
            Element type for the 1st index set.
            </typeparam>
      <typeparam name="T2">
            Element type for the 2nd index set.
            </typeparam>
      <typeparam name="T3">
            Element type for the 3rd index set.
            </typeparam>
      <typeparam name="T4">
            Element type for the 4th index set.
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`4.#ctor(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.String,System.Func{`0,`1,`2,`3,System.Text.StringBuilder},System.Func{`0,`1,`2,`3,System.Double},System.Func{`0,`1,`2,`3,System.Double},OPTANO.Modeling.Optimization.Enums.VariableType,System.Func{`0,`1,`2,`3,System.Nullable{System.Int32}},System.Func{`0,`1,`2,`3,OPTANO.Modeling.Optimization.Enums.BranchingDirection})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`4" /> class. 
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`4" /> class.
            </summary>
      <param name="model">
            The <see cref="T:OPTANO.Modeling.Optimization.Model" /> this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`4" /> belongs to.
            A <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`4" /> needs to belong to exactly one <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </param>
      <param name="indexSet1">
            The index set with elements of type <typeparamref name="T" /></param>
      <param name="indexSet2">
            The index set with elements of type <typeparamref name="T2" /></param>
      <param name="indexSet3">
            The index set with elements of type <typeparamref name="T3" /></param>
      <param name="indexSet4">
            The index set with elements of type <typeparamref name="T4" /></param>
      <param name="name">
            The name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in the given <paramref name="model" />.
            If <paramref name="name" /> equals <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" />, a <c>base64</c> index will be generated automatically.
            </param>
      <param name="debugNameGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`4" /> and produces a <see cref="T:System.Text.StringBuilder" /> as output.
            The generator will be used when <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>true</c>.
            The <see cref="T:System.String" /> that is produced by the <see cref="T:System.Text.StringBuilder" /> will be prepended to the unique variable name. 
            The objective is to make the generated <see cref="T:OPTANO.Modeling.Optimization.Model" /> more readable, especially when trying to fix bugs.
            By default, the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>false</c> in order to reduce the amount of RAM required to store variable names.
            </param>
      <param name="lowerBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`4" /> and defines a lower bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>0</c> will be used as default lower bound for every variable.
            </param>
      <param name="upperBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`4" /> and defines an upper bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>double.PositiveInfinity</c> will be used as default upper bound for every non-binary variable.
            For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables, <c>1</c> will be used as upper bound.
            </param>
      <param name="type">
            The variable type. For type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />, all bounds need to be in the range of <c>[0, 1]</c>.
            </param>
      <param name="branchingPriorityGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
      <param name="branchingDirectionGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`4.CallDelegateFunciton``1(System.Func{`0,`1,`2,`3,``0},System.Object[])">
      <summary>
            Returns a delegate function call.
            </summary>
      <param name="func">
            The function to be called with the given index
            </param>
      <param name="index">
            The index.
            Should be of the same length as the number of input parameters for the <paramref name="func" />.
            </param>
      <typeparam name="TTargetType">
            The return type of the <paramref name="func" /></typeparam>
      <returns>
            The result of func(index).
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection`4.Item(`0,`1,`2,`3)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <c>index</c>.
            </summary>
      <param name="element1">
            Element of the index <c>1st</c> index set.
            </param>
      <param name="element2">
            Element of the index <c>2nd</c> index set.
            </param>
      <param name="element3">
            Element of the index <c>3rd</c> index set.
            </param>
      <param name="element4">
            Element of the index <c>4th</c> index set.
            </param>
      <returns>
            The variable for the given <c>index</c></returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection`5">
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your <see cref="T:OPTANO.Modeling.Optimization.Variable" />s more intuitively
            </summary>
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your Variables more intuitively. 
            It groups variable with the same meaning. 
            In a mathematical model a VariableCollection is represented by a single symbol (like <c>x</c>); a variable by a symbol with indices (like <c>x_{i,j}</c>).
            Some (optional) generators are used to calculate parameters for each of the VariableCollection's variable:
            
            * DebugNameGenerator
            
            * LowerBoundGenerator
            
            * UpperBoundGenerator
            
            * BranchingPriorityGenerator
            
            </summary>
      <typeparam name="T">
            Element type for the 1st index set.
            </typeparam>
      <typeparam name="T2">
            Element type for the 2nd index set.
            </typeparam>
      <typeparam name="T3">
            Element type for the 3rd index set.
            </typeparam>
      <typeparam name="T4">
            Element type for the 4th index set.
            </typeparam>
      <typeparam name="T5">
            Element type for the 5th index set.
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`5.#ctor(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.String,System.Func{`0,`1,`2,`3,`4,System.Text.StringBuilder},System.Func{`0,`1,`2,`3,`4,System.Double},System.Func{`0,`1,`2,`3,`4,System.Double},OPTANO.Modeling.Optimization.Enums.VariableType,System.Func{`0,`1,`2,`3,`4,System.Nullable{System.Int32}},System.Func{`0,`1,`2,`3,`4,OPTANO.Modeling.Optimization.Enums.BranchingDirection})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`5" /> class. 
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`5" /> class.
            </summary>
      <param name="model">
            The <see cref="T:OPTANO.Modeling.Optimization.Model" /> this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`5" /> belongs to.
            A <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`5" /> needs to belong to exactly one <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </param>
      <param name="indexSet1">
            The index set with elements of type <typeparamref name="T" /></param>
      <param name="indexSet2">
            The index set with elements of type <typeparamref name="T2" /></param>
      <param name="indexSet3">
            The index set with elements of type <typeparamref name="T3" /></param>
      <param name="indexSet4">
            The index set with elements of type <typeparamref name="T4" /></param>
      <param name="indexSet5">
            The index set with elements of type <typeparamref name="T5" /></param>
      <param name="name">
            The name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in the given <paramref name="model" />.
            If <paramref name="name" /> equals <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" />, a <c>base64</c> index will be generated automatically.
            </param>
      <param name="debugNameGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`5" /> and produces a <see cref="T:System.Text.StringBuilder" /> as output.
            The generator will be used when <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>true</c>.
            The <see cref="T:System.String" /> that is produced by the <see cref="T:System.Text.StringBuilder" /> will be prepended to the unique variable name. 
            The objective is to make the generated <see cref="T:OPTANO.Modeling.Optimization.Model" /> more readable, especially when trying to fix bugs.
            By default, the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>false</c> in order to reduce the amount of RAM required to store variable names.
            </param>
      <param name="lowerBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`5" /> and defines a lower bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>0</c> will be used as default lower bound for every variable.
            </param>
      <param name="upperBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`5" /> and defines an upper bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>double.PositiveInfinity</c> will be used as default upper bound for every non-binary variable.
            For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables, <c>1</c> will be used as upper bound.
            </param>
      <param name="type">
            The variable type. For type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />, all bounds need to be in the range of <c>[0, 1]</c>.
            </param>
      <param name="branchingPriorityGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
      <param name="branchingDirectionGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`5.CallDelegateFunciton``1(System.Func{`0,`1,`2,`3,`4,``0},System.Object[])">
      <summary>
            Returns a delegate function call.
            </summary>
      <param name="func">
            The function to be called with the given index
            </param>
      <param name="index">
            The index.
            Should be of the same length as the number of input parameters for the <paramref name="func" />.
            </param>
      <typeparam name="TTargetType">
            The return type of the <paramref name="func" /></typeparam>
      <returns>
            The result of func(index).
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection`5.Item(`0,`1,`2,`3,`4)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <c>index</c>.
            </summary>
      <param name="element1">
            Element of the index <c>1st</c> index set.
            </param>
      <param name="element2">
            Element of the index <c>2nd</c> index set.
            </param>
      <param name="element3">
            Element of the index <c>3rd</c> index set.
            </param>
      <param name="element4">
            Element of the index <c>4th</c> index set.
            </param>
      <param name="element5">
            Element of the index <c>5th</c> index set.
            </param>
      <returns>
            The variable for the given <c>index</c></returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection`6">
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your <see cref="T:OPTANO.Modeling.Optimization.Variable" />s more intuitively
            </summary>
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your Variables more intuitively. 
            It groups variable with the same meaning. 
            In a mathematical model a VariableCollection is represented by a single symbol (like <c>x</c>); a variable by a symbol with indices (like <c>x_{i,j}</c>).
            Some (optional) generators are used to calculate parameters for each of the VariableCollection's variable:
            
            * DebugNameGenerator
            
            * LowerBoundGenerator
            
            * UpperBoundGenerator
            
            * BranchingPriorityGenerator
            
            </summary>
      <typeparam name="T">
            Element type for the 1st index set.
            </typeparam>
      <typeparam name="T2">
            Element type for the 2nd index set.
            </typeparam>
      <typeparam name="T3">
            Element type for the 3rd index set.
            </typeparam>
      <typeparam name="T4">
            Element type for the 4th index set.
            </typeparam>
      <typeparam name="T5">
            Element type for the 5th index set.
            </typeparam>
      <typeparam name="T6">
            Element type for the 6th index set.
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`6.#ctor(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.String,System.Func{`0,`1,`2,`3,`4,`5,System.Text.StringBuilder},System.Func{`0,`1,`2,`3,`4,`5,System.Double},System.Func{`0,`1,`2,`3,`4,`5,System.Double},OPTANO.Modeling.Optimization.Enums.VariableType,System.Func{`0,`1,`2,`3,`4,`5,System.Nullable{System.Int32}},System.Func{`0,`1,`2,`3,`4,`5,OPTANO.Modeling.Optimization.Enums.BranchingDirection})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`6" /> class. 
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`6" /> class.
            </summary>
      <param name="model">
            The <see cref="T:OPTANO.Modeling.Optimization.Model" /> this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`6" /> belongs to.
            A <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`6" /> needs to belong to exactly one <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </param>
      <param name="indexSet1">
            The index set with elements of type <typeparamref name="T" /></param>
      <param name="indexSet2">
            The index set with elements of type <typeparamref name="T2" /></param>
      <param name="indexSet3">
            The index set with elements of type <typeparamref name="T3" /></param>
      <param name="indexSet4">
            The index set with elements of type <typeparamref name="T4" /></param>
      <param name="indexSet5">
            The index set with elements of type <typeparamref name="T5" /></param>
      <param name="indexSet6">
            The index set with elements of type <typeparamref name="T6" /></param>
      <param name="name">
            The name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in the given <paramref name="model" />.
            If <paramref name="name" /> equals <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" />, a <c>base64</c> index will be generated automatically.
            </param>
      <param name="debugNameGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`6" /> and produces a <see cref="T:System.Text.StringBuilder" /> as output.
            The generator will be used when <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>true</c>.
            The <see cref="T:System.String" /> that is produced by the <see cref="T:System.Text.StringBuilder" /> will be prepended to the unique variable name. 
            The objective is to make the generated <see cref="T:OPTANO.Modeling.Optimization.Model" /> more readable, especially when trying to fix bugs.
            By default, the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>false</c> in order to reduce the amount of RAM required to store variable names.
            </param>
      <param name="lowerBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`6" /> and defines a lower bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>0</c> will be used as default lower bound for every variable.
            </param>
      <param name="upperBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`6" /> and defines an upper bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>double.PositiveInfinity</c> will be used as default upper bound for every non-binary variable.
            For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables, <c>1</c> will be used as upper bound.
            </param>
      <param name="type">
            The variable type. For type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />, all bounds need to be in the range of <c>[0, 1]</c>.
            </param>
      <param name="branchingPriorityGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
      <param name="branchingDirectionGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`6.CallDelegateFunciton``1(System.Func{`0,`1,`2,`3,`4,`5,``0},System.Object[])">
      <summary>
            Returns a delegate function call.
            </summary>
      <param name="func">
            The function to be called with the given index
            </param>
      <param name="index">
            The index.
            Should be of the same length as the number of input parameters for the <paramref name="func" />.
            </param>
      <typeparam name="TTargetType">
            The return type of the <paramref name="func" /></typeparam>
      <returns>
            The result of func(index).
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection`6.Item(`0,`1,`2,`3,`4,`5)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <c>index</c>.
            </summary>
      <param name="element1">
            Element of the index <c>1st</c> index set.
            </param>
      <param name="element2">
            Element of the index <c>2nd</c> index set.
            </param>
      <param name="element3">
            Element of the index <c>3rd</c> index set.
            </param>
      <param name="element4">
            Element of the index <c>4th</c> index set.
            </param>
      <param name="element5">
            Element of the index <c>5th</c> index set.
            </param>
      <param name="element6">
            Element of the index <c>6th</c> index set.
            </param>
      <returns>
            The variable for the given <c>index</c></returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection`7">
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your <see cref="T:OPTANO.Modeling.Optimization.Variable" />s more intuitively
            </summary>
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your Variables more intuitively. 
            It groups variable with the same meaning. 
            In a mathematical model a VariableCollection is represented by a single symbol (like <c>x</c>); a variable by a symbol with indices (like <c>x_{i,j}</c>).
            Some (optional) generators are used to calculate parameters for each of the VariableCollection's variable:
            
            * DebugNameGenerator
            
            * LowerBoundGenerator
            
            * UpperBoundGenerator
            
            * BranchingPriorityGenerator
            
            </summary>
      <typeparam name="T">
            Element type for the 1st index set.
            </typeparam>
      <typeparam name="T2">
            Element type for the 2nd index set.
            </typeparam>
      <typeparam name="T3">
            Element type for the 3rd index set.
            </typeparam>
      <typeparam name="T4">
            Element type for the 4th index set.
            </typeparam>
      <typeparam name="T5">
            Element type for the 5th index set.
            </typeparam>
      <typeparam name="T6">
            Element type for the 6th index set.
            </typeparam>
      <typeparam name="T7">
            Element type for the 7th index set.
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`7.#ctor(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.String,System.Func{`0,`1,`2,`3,`4,`5,`6,System.Text.StringBuilder},System.Func{`0,`1,`2,`3,`4,`5,`6,System.Double},System.Func{`0,`1,`2,`3,`4,`5,`6,System.Double},OPTANO.Modeling.Optimization.Enums.VariableType,System.Func{`0,`1,`2,`3,`4,`5,`6,System.Nullable{System.Int32}},System.Func{`0,`1,`2,`3,`4,`5,`6,OPTANO.Modeling.Optimization.Enums.BranchingDirection})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`7" /> class. 
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`7" /> class.
            </summary>
      <param name="model">
            The <see cref="T:OPTANO.Modeling.Optimization.Model" /> this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`7" /> belongs to.
            A <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`7" /> needs to belong to exactly one <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </param>
      <param name="indexSet1">
            The index set with elements of type <typeparamref name="T" /></param>
      <param name="indexSet2">
            The index set with elements of type <typeparamref name="T2" /></param>
      <param name="indexSet3">
            The index set with elements of type <typeparamref name="T3" /></param>
      <param name="indexSet4">
            The index set with elements of type <typeparamref name="T4" /></param>
      <param name="indexSet5">
            The index set with elements of type <typeparamref name="T5" /></param>
      <param name="indexSet6">
            The index set with elements of type <typeparamref name="T6" /></param>
      <param name="indexSet7">
            The index set with elements of type <typeparamref name="T7" /></param>
      <param name="name">
            The name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in the given <paramref name="model" />.
            If <paramref name="name" /> equals <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" />, a <c>base64</c> index will be generated automatically.
            </param>
      <param name="debugNameGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`7" /> and produces a <see cref="T:System.Text.StringBuilder" /> as output.
            The generator will be used when <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>true</c>.
            The <see cref="T:System.String" /> that is produced by the <see cref="T:System.Text.StringBuilder" /> will be prepended to the unique variable name. 
            The objective is to make the generated <see cref="T:OPTANO.Modeling.Optimization.Model" /> more readable, especially when trying to fix bugs.
            By default, the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>false</c> in order to reduce the amount of RAM required to store variable names.
            </param>
      <param name="lowerBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`7" /> and defines a lower bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>0</c> will be used as default lower bound for every variable.
            </param>
      <param name="upperBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`7" /> and defines an upper bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>double.PositiveInfinity</c> will be used as default upper bound for every non-binary variable.
            For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables, <c>1</c> will be used as upper bound.
            </param>
      <param name="type">
            The variable type. For type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />, all bounds need to be in the range of <c>[0, 1]</c>.
            </param>
      <param name="branchingPriorityGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
      <param name="branchingDirectionGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`7.CallDelegateFunciton``1(System.Func{`0,`1,`2,`3,`4,`5,`6,``0},System.Object[])">
      <summary>
            Returns a delegate function call.
            </summary>
      <param name="func">
            The function to be called with the given index
            </param>
      <param name="index">
            The index.
            Should be of the same length as the number of input parameters for the <paramref name="func" />.
            </param>
      <typeparam name="TTargetType">
            The return type of the <paramref name="func" /></typeparam>
      <returns>
            The result of func(index).
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection`7.Item(`0,`1,`2,`3,`4,`5,`6)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <c>index</c>.
            </summary>
      <param name="element1">
            Element of the index <c>1st</c> index set.
            </param>
      <param name="element2">
            Element of the index <c>2nd</c> index set.
            </param>
      <param name="element3">
            Element of the index <c>3rd</c> index set.
            </param>
      <param name="element4">
            Element of the index <c>4th</c> index set.
            </param>
      <param name="element5">
            Element of the index <c>5th</c> index set.
            </param>
      <param name="element6">
            Element of the index <c>6th</c> index set.
            </param>
      <param name="element7">
            Element of the index <c>7th</c> index set.
            </param>
      <returns>
            The variable for the given <c>index</c></returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection`8">
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your <see cref="T:OPTANO.Modeling.Optimization.Variable" />s more intuitively
            </summary>
      <summary>
            This is a <c>strongly typed</c> helper class that allows you to model your Variables more intuitively. 
            It groups variable with the same meaning. 
            In a mathematical model a VariableCollection is represented by a single symbol (like <c>x</c>); a variable by a symbol with indices (like <c>x_{i,j}</c>).
            Some (optional) generators are used to calculate parameters for each of the VariableCollection's variable:
            
            * DebugNameGenerator
            
            * LowerBoundGenerator
            
            * UpperBoundGenerator
            
            * BranchingPriorityGenerator
            
            </summary>
      <typeparam name="T">
            Element type for the 1st index set.
            </typeparam>
      <typeparam name="T2">
            Element type for the 2nd index set.
            </typeparam>
      <typeparam name="T3">
            Element type for the 3rd index set.
            </typeparam>
      <typeparam name="T4">
            Element type for the 4th index set.
            </typeparam>
      <typeparam name="T5">
            Element type for the 5th index set.
            </typeparam>
      <typeparam name="T6">
            Element type for the 6th index set.
            </typeparam>
      <typeparam name="T7">
            Element type for the 7th index set.
            </typeparam>
      <typeparam name="T8">
            Element type for the 8th index set.
            </typeparam>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`8.#ctor(OPTANO.Modeling.Optimization.Model,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.Collections.Generic.IEnumerable{`7},System.String,System.Func{`0,`1,`2,`3,`4,`5,`6,`7,System.Text.StringBuilder},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,System.Double},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,System.Double},OPTANO.Modeling.Optimization.Enums.VariableType,System.Func{`0,`1,`2,`3,`4,`5,`6,`7,System.Nullable{System.Int32}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,OPTANO.Modeling.Optimization.Enums.BranchingDirection})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`8" /> class. 
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`8" /> class.
            </summary>
      <param name="model">
            The <see cref="T:OPTANO.Modeling.Optimization.Model" /> this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`8" /> belongs to.
            A <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`8" /> needs to belong to exactly one <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </param>
      <param name="indexSet1">
            The index set with elements of type <typeparamref name="T" /></param>
      <param name="indexSet2">
            The index set with elements of type <typeparamref name="T2" /></param>
      <param name="indexSet3">
            The index set with elements of type <typeparamref name="T3" /></param>
      <param name="indexSet4">
            The index set with elements of type <typeparamref name="T4" /></param>
      <param name="indexSet5">
            The index set with elements of type <typeparamref name="T5" /></param>
      <param name="indexSet6">
            The index set with elements of type <typeparamref name="T6" /></param>
      <param name="indexSet7">
            The index set with elements of type <typeparamref name="T7" /></param>
      <param name="indexSet8">
            The index set with elements of type <typeparamref name="T8" /></param>
      <param name="name">
            The name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in the given <paramref name="model" />.
            If <paramref name="name" /> equals <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" />, a <c>base64</c> index will be generated automatically.
            </param>
      <param name="debugNameGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`8" /> and produces a <see cref="T:System.Text.StringBuilder" /> as output.
            The generator will be used when <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>true</c>.
            The <see cref="T:System.String" /> that is produced by the <see cref="T:System.Text.StringBuilder" /> will be prepended to the unique variable name. 
            The objective is to make the generated <see cref="T:OPTANO.Modeling.Optimization.Model" /> more readable, especially when trying to fix bugs.
            By default, the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>false</c> in order to reduce the amount of RAM required to store variable names.
            </param>
      <param name="lowerBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`8" /> and defines a lower bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>0</c> will be used as default lower bound for every variable.
            </param>
      <param name="upperBoundGenerator">
            A function that takes an <c>index</c> for the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection`8" /> and defines an upper bound for the respective <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the generator is <c>null</c>, <c>double.PositiveInfinity</c> will be used as default upper bound for every non-binary variable.
            For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables, <c>1</c> will be used as upper bound.
            </param>
      <param name="type">
            The variable type. For type <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />, all bounds need to be in the range of <c>[0, 1]</c>.
            </param>
      <param name="branchingPriorityGenerator">
            A function that takes an element from each index set and returns the branching priority as integer (or <c>null</c>, if default priority shall be used).
            </param>
      <param name="branchingDirectionGenerator">
            A function that takes an element from each index set and returns the branching direction as <see cref="T:OPTANO.Modeling.Optimization.Enums.BranchingDirection" /> (or <c>null</c>, if default direction shall be used).
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection`8.CallDelegateFunciton``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0},System.Object[])">
      <summary>
            Returns a delegate function call.
            </summary>
      <param name="func">
            The function to be called with the given index
            </param>
      <param name="index">
            The index.
            Should be of the same length as the number of input parameters for the <paramref name="func" />.
            </param>
      <typeparam name="TTargetType">
            The return type of the <paramref name="func" /></typeparam>
      <returns>
            The result of func(index).
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection`8.Item(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <c>index</c>.
            </summary>
      <param name="element1">
            Element of the index <c>1st</c> index set.
            </param>
      <param name="element2">
            Element of the index <c>2nd</c> index set.
            </param>
      <param name="element3">
            Element of the index <c>3rd</c> index set.
            </param>
      <param name="element4">
            Element of the index <c>4th</c> index set.
            </param>
      <param name="element5">
            Element of the index <c>5th</c> index set.
            </param>
      <param name="element6">
            Element of the index <c>6th</c> index set.
            </param>
      <param name="element7">
            Element of the index <c>7th</c> index set.
            </param>
      <param name="element8">
            Element of the index <c>8th</c> index set.
            </param>
      <returns>
            The variable for the given <c>index</c></returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Interfaces.StatusInfo">
      <summary>
            Class that represent the current status of a solver that is solving a problem instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Interfaces.StatusInfo.Incumbent">
      <summary>
            Gets or sets the best known solution value.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Interfaces.StatusInfo.LogMessage">
      <summary>
            Gets or sets the log message.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Interfaces.StatusInfo.NodeCount">
      <summary>
            Gets or sets the current explored node count.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Interfaces.StatusInfo.SolutionCount">
      <summary>
            Gets or sets the current count of feasible solutions found.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Interfaces.StatusInfo.SolverTime">
      <summary>
            Gets or sets the elapsed solver time in seconds
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Interfaces.StatusInfo.VariableValues">
      <summary>
            Gets or sets the variable values.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.ModelStatus">
      <summary>
            Status of a solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.ModelStatus.Unknown">
      <summary>
            Status of the solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance is unknown, e.g. because the <see cref="N:OPTANO.Modeling.Optimization.Solver" /> has too little time to prove the <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.ModelStatus.Unbounded">
      <summary>
            The solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance is <c>unbounded</c>.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.ModelStatus.Infeasible">
      <summary>
            The solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance is <c>infeasible</c>.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.ModelStatus.Feasible">
      <summary>
            The solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance is <c>feasible</c>.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.ModelStatus.InfOrUnbd">
      <summary>
            The solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance is <c>infeasible or unbounded</c>.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.SetupHelpers">
      <summary>
            Helper class.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.SetupHelpers.SetPathForSolverLib(System.String)">
      <summary>
            Set PATH for the solver library.
            </summary>
      <param name="solvername">
            The solvername.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.SolutionStatus">
      <summary>
            Status of a <see cref="T:OPTANO.Modeling.Optimization.Solution" /> instance.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.SolutionStatus.NoSolutionValues">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" /> instance contains <c>no</c><see cref="T:OPTANO.Modeling.Optimization.Variable" /> and <see cref="T:OPTANO.Modeling.Optimization.Objective" /> values, e.g. because the solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance is <c>infeasible</c>.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.SolutionStatus.FeasibleContinuousRelaxation">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" /> instance contains <see cref="T:OPTANO.Modeling.Optimization.Variable" /> and <see cref="T:OPTANO.Modeling.Optimization.Objective" /> values feasible for the <c>continuous relaxation</c> of the solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.SolutionStatus.OptimalContinuousRelaxation">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" /> instance contains <see cref="T:OPTANO.Modeling.Optimization.Variable" /> and <see cref="T:OPTANO.Modeling.Optimization.Objective" /> values optimal for the <c>continuous relaxation</c> of the solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.SolutionStatus.Feasible">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" /> instance contains <see cref="T:OPTANO.Modeling.Optimization.Variable" /> and <see cref="T:OPTANO.Modeling.Optimization.Objective" /> values <c>feasible</c> for the solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.SolutionStatus.ProbablyLocalOptimal">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" /> instance contains <see cref="T:OPTANO.Modeling.Optimization.Variable" /> and <see cref="T:OPTANO.Modeling.Optimization.Objective" /> values <c>probably locally optimal</c> for the solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance with the used <see cref="T:OPTANO.Modeling.Optimization.Interfaces.ISolver" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.SolutionStatus.LocalOptimal">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" /> instance contains <see cref="T:OPTANO.Modeling.Optimization.Variable" /> and <see cref="T:OPTANO.Modeling.Optimization.Objective" /> values <c>local optimal</c> for the solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance with the used <see cref="T:OPTANO.Modeling.Optimization.Interfaces.ISolver" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.SolutionStatus.Optimal">
      <summary>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" /> instance contains <see cref="T:OPTANO.Modeling.Optimization.Variable" /> and <see cref="T:OPTANO.Modeling.Optimization.Objective" /> values <c>optimal</c> for the solved <see cref="T:OPTANO.Modeling.Optimization.Model" /> instance.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.SolverAttribute">
      <summary>
            The solver attribute. Used to annotate implementations of the <see cref="T:OPTANO.Modeling.Optimization.Interfaces.ISolver" /> interface.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.SolverAttribute.SolverConfiguration">
      <summary>
            Gets or sets the solver configuration type.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.SolverAttribute.SolverName">
      <summary>
            Gets or sets the solver name.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.SolverAttribute.Version">
      <summary>
            Gets or sets the version.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solution">
      <summary>
            Represents a solution of a <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </summary>
      <author>fseidel, skramkowski</author>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solution._conflictingSet">
      <summary>
            The conflicting set.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solution._model">
      <summary>
            The solved model instance.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solution._modelStatus">
      <summary>
            Status of the solved model instance.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solution._overallWallTime">
      <summary>
            Overall wall clock time taken for solving.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solution._dualVariableValues">
      <summary>
            The dual value for every variable by name.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solution._objectiveValues">
      <summary>
            The value for every objective (by name).
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solution._status">
      <summary>
            The solution status.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solution._variableValues">
      <summary>
            The value for every variable by name.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solution.#ctor(OPTANO.Modeling.Optimization.Model,System.TimeSpan,OPTANO.Modeling.Optimization.Solver.ModelStatus,OPTANO.Modeling.Optimization.Solver.SolutionStatus,System.Collections.Generic.IDictionary{System.String,System.Double},System.Collections.Generic.IDictionary{System.String,System.Double},System.Collections.Generic.IDictionary{System.String,System.Double},OPTANO.Modeling.Optimization.ConflictingSet,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Solution" /> class.
            </summary>
      <param name="model">
            The model.
            </param>
      <param name="overallWallTime">
            Overall wall clock time taken for solving.
            </param>
      <param name="modelStatus">
            Status of the solved model instance.
            </param>
      <param name="status">
            Status of the new solution instance.
            </param>
      <param name="variableValues">
            Name and solution value for each variable in the solved model instance, or <c>null</c> if the status of this solution instance is <c>NoSolutionValues</c>.
            </param>
      <param name="dualVariableValues">
            Name and solution value for each dual variable in the solved model instance, or <c>null</c> if the status of this solution instance is <c>NoSolutionValues</c>.
            </param>
      <param name="objectiveValues">
            Name and solution value for each objective in the solved model instance, or <c>null</c> if the status of this solution instance is <c>NoSolutionValues</c>.
            </param>
      <param name="conflictingSet">
            The irreducible infeasible set (IIS).
            </param>
      <param name="numberOfExploredNodes">
            The number of explored nodes.
            </param>
      <exception cref="T:System.ArgumentNullException">
            Model mustn't be <c>null</c>.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solution.ClearValues">
      <summary>
            Removes the variable values and objective values from this solution instance and sets the status to <c>NoSolutionValues</c>.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solution.CompareTo(OPTANO.Modeling.Optimization.Solution)">
      <summary>
            Compares the objective values of this solution instance to <paramref name="other" />s.
            </summary>
      <param name="other">
            Solution instance to compare to.
            </param>
      <returns>
            If the objective values are compared, the return value indicates dominance of solution quality (i.e. zero indicates indifference).
            </returns>
      <exception cref="T:System.NotSupportedException">
            If this solution instance has status <c>NoSolutionValues</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            If <paramref name="other" /> has status <c>NoSolutionValues</c> or the solutions' objective names do not fit to each other.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solution.Equals(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Indicates whether the variable values of this solution instance are equal to <paramref name="otherVariableValues" />.
            </summary>
      <param name="otherVariableValues">
            The variable values to compare to.
            </param>
      <returns>
        <c>true</c>, if all values are equal. <c>false</c>, else.
            </returns>
      <exception cref="T:System.NotSupportedException">
            If this solution instance has status <c>NoSolutionValues</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            If the solutions' variable names do not fit to each other.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solution.Equals(OPTANO.Modeling.Optimization.Solution)">
      <summary>
            Indicates whether the objective values of this solution instance are equal to <paramref name="other" />s.
            </summary>
      <param name="other">
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" /> to compare to.
            </param>
      <returns>
        <c>true</c>, if all objective values are equal. <c>false</c>, else.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            If this solution instance has status <c>NoSolutionValues</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            If <paramref name="other" /> has status <c>NoSolutionValues</c> or the solutions' objective names do not fit to each other.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solution.GetObjectiveValue(System.String)">
      <summary>
            Returns the solution value of the objective named <paramref name="name" />, or <c>null</c> if the status of this solution instance is <c>NoSolutionValues</c>.
            </summary>
      <param name="name">
            Name of the objective.
            </param>
      <returns>
            The objective value.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solution.GetVariableValue(System.String)">
      <summary>
            Returns the solution value of the variable named <paramref name="name" />, or <c>null</c> if the status of this solution instance is <c>NoSolutionValues</c>.
            </summary>
      <param name="name">
            Name of the variable.
            </param>
      <returns>
            The variable value.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solution.SetVariableValuesInModel">
      <summary>
            Copys the solution values into the <see cref="P:OPTANO.Modeling.Optimization.Model.Variables" />, if automatic copying is enabled.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.BestBound">
      <summary>
            Gets or sets the best bound
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.ConflictingSet">
      <summary>
            Gets the conflicting set. To enable the computation of the IIS, make sure to enable it in the respective <see cref="T:OPTANO.Modeling.Optimization.SolverConfiguration" />.
            Note that not all solvers support this computation.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.DualVariableValues">
      <summary>
            Unique name and solution value for each dual variable in the solved model instance, or <c>null</c> if the status of this solution instance is <c>NoSolutionValues</c>.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.Gap">
      <summary>
            Gets the solution gap
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.ModelName">
      <summary>
            Gets the name of the model.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.ModelStatus">
      <summary>
            Gets the model status.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.NumberOfExploredNodes">
      <summary>
            Gets or sets the number of explored nodes.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.ObjectiveValues">
      <summary>
            Unique name and solution value for each objective in the solved model instance, or <c>null</c> if the status of this solution instance is <c>NoSolutionValues</c>.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.OverallWallTime">
      <summary>
            Gets the overall wall time.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.Status">
      <summary>
            Status of this solution instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solution.VariableValues">
      <summary>
            Unique name and solution value for each variable in the solved model instance, or <c>null</c> if the status of this solution instance is <c>NoSolutionValues</c>.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.SolverConfiguration">
      <summary>
            Defines common parameters for <see cref="T:OPTANO.Modeling.Optimization.Interfaces.ISolver" /> instances.
            </summary>
      <author>skramkowski</author>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverConfiguration._mipGap">
      <summary>
            Backing field for relative MIP Gap
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverConfiguration._mipGapAbs">
      <summary>
            Backing field for absolute MIP Gap
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverConfiguration._optimalityTolerance">
      <summary>
            The _optimality tolerance.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SolverConfiguration._timeLimit">
      <summary>
            The _time limit.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverConfiguration.CalculateDuals">
      <summary>
            Gets or sets a value indicating whether duals shall be calculated or not.
            </summary>
      <value>
        <c>true</c> if duals should be calculated; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverConfiguration.MIPGap">
      <summary>
            Relative MIP optimality gap (MIP only). The MIP solver will terminate (with an optimal result) when the relative gap between the lower and upper objective bound is less than MIPGap.
            </summary>
      <value>
            Sets a relative tolerance on the gap between the best integer objective and the objective of the best node remaining. When the value
            
            <c>|bestnode-bestinteger|/(1e-10+|bestinteger|)</c>
            
            falls below the value of this parameter, the mixed integer optimization is stopped.
            For example, to instruct CPLEX to stop as soon as it has found a feasible integer solution proved to be within five percent of optimal, set the relative mipgap tolerance to <c>0.05</c>.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverConfiguration.MIPGapAbs">
      <summary>
            Absolute MIP optimality gap (MIP only). The MIP solver will terminate (with an optimal result) when the absolute gap between the lower and upper objective bound is less than MIPGapAbs.
            </summary>
      <value>
            The MIP gap abs.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverConfiguration.OptimalityTolerance">
      <summary>
            Dual feasibility tolerance. Reduced costs must all be smaller than OptimalityTol in the improving direction in order for a model to be declared optimal.
            </summary>
      <value>
            The optimality tolerance.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.SolverConfiguration.TimeLimit">
      <summary>
            Limits the total time expended (in seconds). Time measurement could differ in different solvers.
            For <c>GurobiSolvers</c>, the value <c>0</c> is interpreted as <c>"default"</c> and converted to <see cref="F:System.Double.PositiveInfinity" />.
            </summary>
      <value>
            The time limit.
            </value>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.SumExpressionBuilder">
      <summary>
            This is a helper class to support efficiently building Expressions from a collection of Terms
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SumExpressionBuilder._constant">
      <summary>
            The _constant.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SumExpressionBuilder._terms">
      <summary>
            The terms.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.SumExpressionBuilder._otherExpressions">
      <summary>
            All more complex expressions, that are not simple terms to sum over.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SumExpressionBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.SumExpressionBuilder" /> class.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SumExpressionBuilder.Add(OPTANO.Modeling.Optimization.Term)">
      <summary>
            Adds the specified term.
            </summary>
      <param name="term">
            The term.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SumExpressionBuilder.Add(OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Adds the specified expression.
            </summary>
      <param name="expression">
            The expression.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SumExpressionBuilder.Add(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Adds the specified variable.
            </summary>
      <param name="variable">
            The variable.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SumExpressionBuilder.Add(System.Double)">
      <summary>
            Adds the specified constant.
            </summary>
      <param name="constant">
            The constant.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SumExpressionBuilder.Clear">
      <summary>
            Clears this instance.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SumExpressionBuilder.ToExpression">
      <summary>
            Converts a list of terms to an expression by summing them up
            </summary>
      <returns>the resulting Expression</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.SumExpressionBuilder.Add(OPTANO.Modeling.Optimization.Expression,System.Boolean)">
      <summary>
            Adds the specified expression.
            Set <paramref name="normalize" /> when using the <see cref="T:OPTANO.Modeling.Optimization.SumExpressionBuilder" /> during normalization of expressions in order to prevent loops.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <param name="normalize">
            The normalize.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Term">
      <summary>
            A term represents a variable and a coefficient which belongs to this variable (e.g. <c>2*x</c>).
            Note that Terms are immutable.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Term._factor">
      <summary>
            The immutable factor.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Term._variable">
      <summary>
            The _variable.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.#ctor(OPTANO.Modeling.Optimization.Variable,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Term" /> class.
            </summary>
      <param name="variable">
            The variable.
            </param>
      <param name="factor">
            The constant.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> mustn't be <c>null</c></exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Addition(System.Double,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="constant">The constant.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Addition(OPTANO.Modeling.Optimization.Term,System.Double)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="term">The term.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Addition(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="variable">The variable.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Addition(OPTANO.Modeling.Optimization.Term,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="term">The term.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Addition(OPTANO.Modeling.Optimization.Term,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="term">The first term.</param>
      <param name="term2">The second term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Implicit(OPTANO.Modeling.Optimization.Variable)~OPTANO.Modeling.Optimization.Term">
      <summary>
            Performs an implicit conversion from <see cref="T:OPTANO.Modeling.Optimization.Variable" /> to <see cref="T:OPTANO.Modeling.Optimization.Term" />.
            </summary>
      <param name="variable">The variable.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Multiply(System.Double,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="factor">The factor.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Multiply(OPTANO.Modeling.Optimization.Term,System.Double)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="term">The term.</param>
      <param name="factor">The factor.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Multiply(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="variable">The variable.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Multiply(OPTANO.Modeling.Optimization.Term,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="term">The term.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Multiply(OPTANO.Modeling.Optimization.Term,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="term">The term.</param>
      <param name="term2">The term2.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Subtraction(System.Double,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="constant">The constant.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Subtraction(OPTANO.Modeling.Optimization.Term,System.Double)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="term">The term.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Subtraction(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="variable">The variable.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Subtraction(OPTANO.Modeling.Optimization.Term,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="term">The term.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_Subtraction(OPTANO.Modeling.Optimization.Term,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="term">The term.</param>
      <param name="term2">The term2.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.op_UnaryNegation(OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Term.EvaluateRecursive(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            The evaluate recursive.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The <see cref="T:System.Double" />.
            </returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Term.Factor">
      <summary>
            Gets the factor.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Term.IsLinear">
      <summary>
            Gets or sets a value indicating whether this instance is linear.
            </summary>
      <value>
        <c>true</c> if this instance is linear; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Term.Terms">
      <summary>
            Gets the terms.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Term.Variable">
      <summary>
            Gets the variable.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Term.Variables">
      <summary>
            Gets the variables.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Variable">
      <summary>
            Represents a variable in an <see cref="T:OPTANO.Modeling.Optimization.Interfaces.IModel" />.
            </summary>
      <author>lbeckmann</author>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Variable._lowerBound">
      <summary>
            Backing field for the lower bound.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Variable._type">
      <summary>
            Backing field for the variable type.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Variable._upperBound">
      <summary>
            Backing field for the upper bound.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.#ctor(System.String,System.Double,System.Double,OPTANO.Modeling.Optimization.Enums.VariableType)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> class.
            A <see cref="T:OPTANO.Modeling.Optimization.Variable" /> holds an optimization decision. 
            </summary>
      <param name="name">
            The name for the <see cref="T:OPTANO.Modeling.Optimization.Variable" />.
            If the name <c>IsNullOrWhiteSpace</c>, a unique <c>base64</c> index will be used as name.
            </param>
      <param name="lowerbound">
            The lowerbound. Default: <c>0</c></param>
      <param name="upperbound">
            The upperbound. Default: <c><see cref="F:System.Double.PositiveInfinity" /></c>. For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" />: <see cref="F:System.Double.PositiveInfinity" /> is converted to <c>1</c></param>
      <param name="type">
            The <see cref="T:OPTANO.Modeling.Optimization.Enums.VariableType" /> of the variable. Be aware that <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables require bounds in the range of <c>[0, 1]</c></param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Addition(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="variable">The first variable.</param>
      <param name="variable2">The second variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Addition(OPTANO.Modeling.Optimization.Variable,System.Double)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="variable">The variable.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Addition(System.Double,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator +.
            </summary>
      <param name="constant">The constant.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Division(OPTANO.Modeling.Optimization.Variable,System.Double)">
      <summary>
            Implements the operator /.
            </summary>
      <param name="variable">The variable.</param>
      <param name="constant">The constant.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Equality(OPTANO.Modeling.Optimization.Variable,System.Double)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="variable">The variable.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Equality(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="var1">The first variable.</param>
      <param name="var2">The second variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Equality(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="variable">The variable.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_GreaterThanOrEqual(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="variable">The variable.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_GreaterThanOrEqual(OPTANO.Modeling.Optimization.Variable,System.Double)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="variable">The variable.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Inequality(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Please use &lt;= and &gt;= to model !=
            </summary>
      <param name="variable">The variable.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Inequality(OPTANO.Modeling.Optimization.Variable,System.Double)">
      <summary>
            Please use &lt;= and &gt;= to model !=
            </summary>
      <param name="variable">The variable.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Inequality(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="var1">The first variable.</param>
      <param name="var2">The second variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_LessThanOrEqual(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Term)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="variable">The variable.</param>
      <param name="term">The term.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_LessThanOrEqual(OPTANO.Modeling.Optimization.Variable,System.Double)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="variable">The variable.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Multiply(OPTANO.Modeling.Optimization.Variable,System.Double)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="variable">The variable.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Multiply(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.ConstantExpression)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="variable">The variable.</param>
      <param name="cons">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Multiply(OPTANO.Modeling.Optimization.ConstantExpression,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="cons">The constant.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Multiply(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="variable1">The first variable.</param>
      <param name="variable2">The second variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Multiply(System.Double,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator *.
            </summary>
      <param name="constant">The constant.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Subtraction(OPTANO.Modeling.Optimization.Variable,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="variable">The first variable.</param>
      <param name="variable2">The second variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Subtraction(OPTANO.Modeling.Optimization.Variable,System.Double)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="variable">The variable.</param>
      <param name="constant">The constant.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_Subtraction(System.Double,OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="constant">The constant.</param>
      <param name="variable">The variable.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.op_UnaryNegation(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Implements the operator -.
            </summary>
      <param name="variable">The variable.</param>
      <returns>
            A term with the factor of -1 and the variable given.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.Equals(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            Compares this instance to the specified other.
            </summary>
      <param name="other">
            The other.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to compare with this instance.
            </param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Variable.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Variable.BranchingPriority">
      <summary>
            Gets or sets the branching priority. <c>Lower</c> numbers indicate <c>higher</c> Priority.
            <c>null</c> indicates that the solver's default priority should be used.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Variable.BranchingDirection">
      <summary>
            Gets or sets the branching direction
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Variable.LowerBound">
      <summary>
            Lower bound of this variable.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Variable.Name">
      <summary>
            Gets the unique name of this variable.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Variable.Type">
      <summary>
            Gets or sets the <see cref="T:OPTANO.Modeling.Optimization.Enums.VariableType" /> of this variable.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Variable.UpperBound">
      <summary>
            Upper bound of this variable.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Variable.Value">
      <summary>
            Gets or sets the value for this variable. This field can be used to assign solution values from a solver to the variables in the original model.
            Furthermore, it can be used to provide a start solution to the solver.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Variable.RegisteredModels">
      <summary>
            Gets or sets the registered models.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection">
      <summary>
            This is essentially a helper class that allows you to model your <see cref="T:OPTANO.Modeling.Optimization.Variable" />s more intuitively. 
            It groups <see cref="T:OPTANO.Modeling.Optimization.Variable" />s with the same meaning. 
            In a mathematical model a VariableCollection is represented by a single symbol (like <c>x</c>); a variable by a symbol with indices (like <c>x_{i,j}</c>).
            Some (optional) generators are used to calculate parameters for each of the VariableCollection's variable:
            
            * DebugNameGenerator
            
            * LowerBoundGenerator
            
            * UpperBoundGenerator
            
            * BranchingPriorityGenerator
            
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection.BoundGenerator">
      <summary>
            A delegate which takes an array of objects (making up the index) and returns a bound to be used for a variable
            </summary>
      <param name="index">The index.</param>
      <returns />
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection.BranchingPriorityGenerator">
      <summary>
            A delegate which takes an array of objects (making up the index) and returns the branching priority to be used for a variable.
            <c>Lower</c> numbers indicate <c>higher</c> Priority.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection.BranchingDirectionGenerator">
      <summary>
            A delegate which takes an array of objects (making up the index) and returns the branching direction to be used for a variable.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.VariableCollection.DebugNameGenerator">
      <summary>
            A delegate which takes an array of objects (making up the index) and returns a stringbuilder which holds a unique id for this index.
            The <see cref="T:System.String" /> will only be evaluated and stored if <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>true</c>. Otherwise, a unique <c>base64</c> index is generated for every <see cref="T:OPTANO.Modeling.Optimization.Variable" /> in order to save memory.
            </summary>
      <param name="index">The index.</param>
      <returns>a unique id for this index</returns>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._branchingPriorityGenerator">
      <summary>
            The branching priority generator.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._branchingDirectionGenerator">
      <summary>
            The branching direction generator.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._name">
      <summary>
            The name.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._debugNameGenerator">
      <summary>
            The debug name generator.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._lowerBoundGenerator">
      <summary>
            The lower bound generator.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._model">
      <summary>
            The model.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._sets">
      <summary>
            The index sets.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._type">
      <summary>
            The variable type.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._upperBoundGenerator">
      <summary>
            The upper bound generator.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._variables">
      <summary>
            The created variables, accessible by index.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._hashSets">
      <summary>
            A hashed version of the index sets.
            Will not be updated after the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> is initialzed.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.VariableCollection._indexValidationStyle">
      <summary>
            The _index validation style.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection.#ctor(OPTANO.Modeling.Optimization.Model,System.String,OPTANO.Modeling.Optimization.VariableCollection.DebugNameGenerator,OPTANO.Modeling.Optimization.VariableCollection.BoundGenerator,OPTANO.Modeling.Optimization.VariableCollection.BoundGenerator,OPTANO.Modeling.Optimization.Enums.VariableType,OPTANO.Modeling.Optimization.VariableCollection.BranchingPriorityGenerator,OPTANO.Modeling.Optimization.VariableCollection.BranchingDirectionGenerator,System.Collections.IEnumerable[])">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> class.
            </summary>
      <param name="model">
            The model.
            </param>
      <param name="name">
            The name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in the given <paramref name="model" />.
            If <paramref name="name" /><c>IsNullOrWhiteSpace</c>, a <c>base64</c> index will be generated automatically.
            </param>
      <param name="debugNameGenerator">
            A delegate that takes an <c>object[]</c> as input and produces a <see cref="T:System.Text.StringBuilder" /> as output.
            The generator will be used when <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is <c>true</c>.
            The string that is produced by the StringBuilder will be prepended to the unique variable name. 
            The objective is to make the generated <see cref="T:OPTANO.Modeling.Optimization.Model" /> more readable, especially when trying to fix bugs.
            By default, the <see cref="P:OPTANO.Modeling.Optimization.ModelScope.EnableFullNames" /> is set to <c>false</c> in order to reduce the amount of RAM required to store variable names.
            </param>
      <param name="lowerBoundGenerator">
            A generator function for the lower bound.
            If <c>null</c> is passed, <c>0</c> will be used as default lower bound for every variable.
            </param>
      <param name="upperBoundGenerator">
            A generator function for the upper bound.
            If <c>null</c> is passed, <c>double.PositiveInfinity</c> will be used as default upper bound for every non-binary variable.
            For <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> variables, <c>1</c> will be used as upper bound.
            </param>
      <param name="variableType">
            The variable type.
            </param>
      <param name="branchingPriorityGenerator">
            The branching priority generator.
            Non-<c>null</c> result of the generator function will be passed as branching priority to the <see cref="N:OPTANO.Modeling.Optimization.Solver" />, if different priorities are supported.
            </param>
      <param name="branchingDirectionyGenerator">
            The branching direction generator.
            </param>
      <param name="sets">
            The index sets.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection.CreateAllVariables">
      <summary>
            Creates all variables that can possibly be created based on the elements currently in the sets.
            Be aware, this might create a major bunch of variables. It is usally used for internal testing.
            </summary>
      <returns>All variables in this VariableCollection.</returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection.GetLongNameFromIndex(System.Object[])">
      <summary>
            If the model uses short names, the long name is generated from the given <paramref name="index" />.
            Else, the name of the variable for the given <paramref name="index" /> is returned.
            </summary>
      <param name="index">
            The index.
            If the variable for the index has not been created yet, an exception will be thrown.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
            The long name for the variable at <c>this[index]</c>.
            <exception cref="T:System.ArgumentException">
            Thrown, if the <paramref name="index" /> is not yet known.
            </exception></member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection.SetVariableValues(System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            Sets the <see cref="P:OPTANO.Modeling.Optimization.Variable.Value" /> for each <see cref="T:OPTANO.Modeling.Optimization.Variable" /> in this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> to the corresponding <c>value</c> in the <paramref name="values" />. The matching happens by string comparison with the <see cref="P:OPTANO.Modeling.Optimization.Variable.Name" />.
            Values will only be updated for <see cref="T:OPTANO.Modeling.Optimization.Variable" />s that are known to this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />. Other <see cref="T:System.Collections.KeyValuePairs" /> will be ignored. The same is true for Variables in this Collection, for which no matching element is contained in the <paramref name="values" />.
            </summary>
      <param name="values">
            The values for the variables (e.g. coming from a <see cref="T:OPTANO.Modeling.Optimization.Solution" />)
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection.Concat(System.Object,System.Collections.IEnumerable)">
      <summary>
            The concat.
            </summary>
      <param name="head">
            The head.
            </param>
      <param name="list">
            The list.
            </param>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection.CrossProduct(System.Collections.Generic.IEnumerable{System.Collections.IEnumerable})">
      <summary>
            The cross product.
            </summary>
      <param name="lists">
            The lists.
            </param>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection.Drop``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
      <summary>
            The drop.
            </summary>
      <param name="list">
            The list.
            </param>
      <param name="numToDrop">
            The num to drop.
            </param>
      <typeparam name="T" />
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
      <exception cref="T:System.ArgumentException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection.CreateHashSets(System.Collections.IEnumerable[])">
      <summary>
            Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> for every set from the <paramref name="index" />.
            The hash sets are used for <see cref="F:OPTANO.Modeling.Optimization.Enums.IndexValidationStyle.Heuristic" />
            Method is called every time if the <see cref="P:OPTANO.Modeling.Optimization.VariableCollection.IndexValidationStyle" /> is changed to <see cref="F:OPTANO.Modeling.Optimization.Enums.IndexValidationStyle.Heuristic" />.
            </summary>
      <param name="index">
            The index.
            </param>
      <returns>
            The <see cref="T:System.Collections.Generic.HashSet`1" /> array.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.VariableCollection.ValidateIndex(System.Object[])">
      <summary>
            The validate index.
            </summary>
      <param name="index">
            The index.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
      <exception cref="T:System.ArgumentException" />
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection.ExistingIndices">
      <summary>
            Gets the existing indices.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" /> with all already known indices.
            I.e. all indices that have already been used to access this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />.
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection.IndexValidationStyle">
      <summary>
            Gets or sets the <see cref="T:OPTANO.Modeling.Optimization.Enums.IndexValidationStyle" />.
            Changes the behavior of a <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />. If set to <c>true</c> the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> will validate if an <c>index</c> belongs to the sets the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> is based on.
            The check is computationally expensive and should only be performed when you debug a model.
            If the style is changed to <see cref="F:OPTANO.Modeling.Optimization.Enums.IndexValidationStyle.Heuristic" />, new hash sets will be generated from the current index sets. Otherwise, the hash sets will be cleared.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection.Name">
      <summary>
            Gets the name for this variable collection.
            It must be <c>unique</c> among all <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />s that are used in a single <see cref="T:OPTANO.Modeling.Optimization.Model" />.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection.ValidIndices">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that iterates over all valid index combinations for this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />.
            </summary>
      <returns>The valid indices.</returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection.Variables">
      <summary>
            Gets an <see cref="T:System.Collections.IEnumerable" /> that contains all <c>existing</c><see cref="T:OPTANO.Modeling.Optimization.Variable" />s in this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" />.
            I.e. all variables that were generated when this <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> was accessed with the variables <c>index</c>.
            </summary>
      <returns>The variables.</returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.VariableCollection.Item(System.Object[])">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> with the specified <paramref name="index" />.
            If the <see cref="T:OPTANO.Modeling.Optimization.VariableCollection" /> never was accessed with the <paramref name="index" />, a new variable will be generated.
            </summary>
      <param name="index">
            The index for the <see cref="T:OPTANO.Modeling.Optimization.Variable" /> that should be accessed.
            </param>
      <returns>
            The variable for the given <paramref name="index" /></returns>
    </member>
    <member name="T:OPTANO.Modeling.Common.ExtensionMethods">
      <summary>
            Holds all Extension methods that are used throughout the framework
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Common.ExtensionMethods.CharacterPairingsB64">
      <summary>
            The pairings of characters to replace in short index strings so that the solvers can handle the variable names.
            Make sure to not use chars at the same time on the left and right hand side (or insert a proper unification element). Replaing will be performed in ascending order.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Common.ExtensionMethods._nameChars">
      <summary>
            Character Dictionay for Base64
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Common.ExtensionMethods._nameCharValues">
      <summary>
            Backward-Dictionary for Base64
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.CartesianProduct``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Cartesians the product.
            </summary>
      <typeparam name="T">
            The element type
            </typeparam>
      <param name="sequences">
            The sequences.
            </param>
      <returns>
            The cartesian product of all <see cref="T:System.Collections.Generic.IEnumerable`1" />s.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.Clone``1(``0)">
      <summary>
            Clones an object by serializing and deserializing it, therefore it needs to be <see cref="T:System.Runtime.Serialization.ISerializable" />"/&gt;.
            </summary>
      <param name="source">
            The object to clone
            </param>
      <typeparam name="T">
            The type of the object to clone
            </typeparam>
      <returns>
            The <typeparamref name="T" />.
            </returns>
      <exception cref="T:System.ArgumentException">
            Throws an execption, if the object is not serializable.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.ConvertFromBase64Index(System.String)">
      <summary>
            Converts a short index string into a index number
            </summary>
      <param name="index64">
            short index string, similar to base64
            </param>
      <returns>
            index number
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.ConvertToBase64Index(System.Int64)">
      <summary>
            Converts the given <paramref name="index" /> into a short index string.
            </summary>
      <param name="index">
            Any valid index number
            </param>
      <returns>
            The short index string
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.ConvertToBase64Index(System.Int32)">
      <summary>
            Converts the given <paramref name="index" /> into a short index string.
            </summary>
      <param name="index">
            Any valid index number
            </param>
      <returns>
            The short index string
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Executes action on every element of source
            </summary>
      <typeparam name="T">
            The type.
            </typeparam>
      <param name="source">
            The source.
            </param>
      <param name="action">
            The action.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.IsInteger(System.Double)">
      <summary>
            Determines whether the specified value is an integer value
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
        <c>true</c> if the specified value is long; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.MultiplyElements(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Multiplies the elements and returns the result.
            </summary>
      <param name="source">
            The source.
            </param>
      <returns>
            The product of all elements in the <paramref name="source" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.SanitizeName(System.String)">
      <summary>
            Replaces all characters that might lead to conflicts when <paramref name="name" /> is passed to MIP Solvers.
            Current set of characters that are replaced:
            <c>'+'</c> with <c>'['</c><c>'-'</c> with <c>']'</c><c>'\'</c> with <c>'}'</c>
            For a complete list, see <see cref="F:OPTANO.Modeling.Common.ExtensionMethods.CharacterPairingsB64" />. 
            Note that the <paramref name="name" /> will not be checked for already existing occurrences of the target characters, so that the operation might not be reversible.
            </summary>
      <param name="name">
            The name.
            </param>
      <returns>
            The sanitized name.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.ThrowIfArgumentIsNull``1(``0,System.String)">
      <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if the object is <c>null</c>.
            </summary>
      <param name="value">
            The <see cref="T:System.Object" /> to check
            </param>
      <param name="argument">
            The name of the <c>parameter</c> in which <paramref name="value" /> was passed.
            </param>
      <typeparam name="T">
            The type of <paramref name="value" />.
            </typeparam>
      <exception cref="T:System.ArgumentNullException">
            Thrown, if <paramref name="value" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.ReplaceUnsupportedCharacters(System.String,System.Boolean)">
      <summary>
            bi-directional replacement of unwanted characters in short index strings
            </summary>
      <param name="shortName64">
            The short index string in base 64.
            </param>
      <param name="forward">
            If 
            <value>
            true
            </value>
            , 
            <value>
            +, -, /
            </value>
            are replaced with 
            <value>
            [, ], }
            </value>
            Else, the replacing is reversed.
            All pairings are defined in the <see cref="F:OPTANO.Modeling.Common.ExtensionMethods.CharacterPairingsB64" /> field
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.RemoveUnsupportedCharacters(System.String)">
      <summary>
            Removes unsupported charaters and only leaves letters, numbers and underscore. 
            </summary>
      <param name="text">text to filter</param>
      <returns>
      </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.ExtensionMethods.TruncateToLength(System.String,System.Int32)">
      <summary>
            Cuts a string to the given legth if text is longer
            </summary>
      <param name="text">Given Text</param>
      <param name="limit">maximum length</param>
      <returns>cutted text</returns>
    </member>
    <member name="T:OPTANO.Modeling.Common.EnumerationExtensions">
      <summary>
            Handy extension methods for Flags-Enums.
            Taken from http://hugoware.net/blog/enums-flags-and-csharp
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Common.EnumerationExtensions.Has``1(System.Enum,``0)">
      <summary>
            Checks if the value contains the provided type.
            It is <c>NOT</c> validated whether type.GetType() == typeof(T). Only the respective int-casts are compared!
            </summary>
      <param name="type">
            The extended <see cref="T:System.Enum" />.
            </param>
      <param name="value">
            The flag to check for.
            </param>
      <typeparam name="T">
            The flag enum type, that you want to check against.
            </typeparam>
      <returns>
            True, if the <see cref="!:value" />-flag is set in the <see cref="!:type" />-Enum. 
            It is <c>NOT</c> validated whether type.GetType() == typeof(T). Only the respective int-casts are compared!
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Common.HelperMethods">
      <summary>
            The helper methods.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Common.HelperMethods.GetStringConcat(System.String,System.String[])">
      <summary>
            Gets a <see cref="T:System.Text.StringBuilder" /> that contains the concatination of <paramref name="index" />.
            </summary>
      <param name="prefix">
            The prefix that preceds every index.
            </param>
      <param name="index">
            The strings to concat.
            </param>
      <returns>
            The <see cref="T:System.Text.StringBuilder" />.
            A <see cref="T:System.Text.StringBuilder" /> that conacts the <paramref name="prefix" /> and all indices, separated by <c>'_'</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Prefix must not be <c>NullOrWhiteSpace</c>.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Common.HelperMethods.GetUnassignedBitDifference``1">
      <summary>
            Some FICO XPRESS Config-Enums represent bit-flags. However, not all bits are currently used.
            This may change with later APIs. This method computes the total value of all unused bits, based on a bit array that has log(\"largest int-value\", 2) many fields.
            </summary>
      <typeparam name="TFlagsEnum">
            The enum to compute the value for. Make sure that the enum has the <c>Flags</c> Attribute set and that <c>all int-Values</c> are actual powers of 2.
            </typeparam>
      <returns>
            The sum affected by the unused bit-fields.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown, if one of the values in <typeparamref name="TFlagsEnum" /> is not a power of 2.
            </exception>
    </member>
    <member name="T:OPTANO.Modeling.Common.ICloneable`1">
      <summary>
            Supports cloning, which creates a new instance of the same type with the same value as an existing instance.
            </summary>
      <typeparam name="T">
            The type of the original instance.
            </typeparam>
      <author>skramkowski</author>
    </member>
    <member name="M:OPTANO.Modeling.Common.ICloneable`1.Clone">
      <summary>
            Creates a new object of type <typeparamref name="T" /> that is a copy of the current instance.
            </summary>
      <returns>A new object of type <typeparamref name="T" /> that is a copy of this instance.</returns>
      <remarks>Clone can be implemented either as a deep copy or a shallow copy. In a deep copy, all objects are duplicated; whereas, in a shallow copy, only the top-level objects are duplicated and the lower levels contain references.</remarks>
    </member>
    <member name="T:OPTANO.Modeling.Common.NetDataContractAttribute">
      <summary>
            The net data contract attribute.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Common.NetDataContractAttribute.NetDataContractSerializerOperationBehavior">
      <summary>
            The net data contract serializer operation behavior.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Common.NetDataContractAttribute.NetDataContractSerializerOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Common.NetDataContractAttribute.NetDataContractSerializerOperationBehavior" /> class.
            </summary>
      <param name="operationDescription">
            The operation description.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Common.NetDataContractAttribute.NetDataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.String,System.String,System.Collections.Generic.IList{System.Type})">
      <summary>
            The create serializer.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="name">
            The name.
            </param>
      <param name="ns">
            The ns.
            </param>
      <param name="knownTypes">
            The known types.
            </param>
      <returns>
            The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.NetDataContractAttribute.NetDataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
      <summary>
            The create serializer.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="name">
            The name.
            </param>
      <param name="ns">
            The ns.
            </param>
      <param name="knownTypes">
            The known types.
            </param>
      <returns>
            The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Common.NetDataContractAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>
            The add binding parameters.
            </summary>
      <param name="description">
            The description.
            </param>
      <param name="parameters">
            The parameters.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Common.NetDataContractAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>
            The apply client behavior.
            </summary>
      <param name="description">
            The description.
            </param>
      <param name="proxy">
            The proxy.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Common.NetDataContractAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>
            The apply dispatch behavior.
            </summary>
      <param name="description">
            The description.
            </param>
      <param name="dispatch">
            The dispatch.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Common.NetDataContractAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>
            The validate.
            </summary>
      <param name="description">
            The description.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Common.NetDataContractAttribute.ReplaceDataContractSerializerOperationBehavior(System.ServiceModel.Description.OperationDescription)">
      <summary>
            The replace data contract serializer operation behavior.
            </summary>
      <param name="description">
            The description.
            </param>
    </member>
    <member name="T:OPTANO.Modeling.Common.ArrayEqualityComparer">
      <summary>
             This EqualityComparer can compare if an array of objects is equal to another array of objects by comparing the contained objects itself
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Common.ArrayEqualityComparer.Equals(System.Object[],System.Object[])">
      <summary>
            Determines whether the specified arrays are equal.
            </summary>
      <returns>
            true if the specified arrays are equal; otherwise, false.
            </returns>
      <param name="x">
            The first array to compare.
            </param>
      <param name="y">
            The second array to compare.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Common.ArrayEqualityComparer.GetHashCode(System.Object[])">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <returns>
            A hash code for the specified object.
            </returns>
      <param name="obj">
            The <see cref="T:System.Object" /> for which a hash code is to be returned.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.
            </exception>
    </member>
    <member name="T:OPTANO.Modeling.Common.RemoteOnlyMessagePropagationFilter">
      <summary>
            The remote only message propagation filter.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Common.RemoteOnlyMessagePropagationFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Common.RemoteOnlyMessagePropagationFilter" /> class.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Common.RemoteOnlyMessagePropagationFilter.ShouldMessagePropagate(System.ServiceModel.Channels.Message,System.ServiceModel.PeerMessageOrigination)">
      <summary>
            The should message propagate.
            </summary>
      <param name="message">
            The message.
            </param>
      <param name="origination">
            The origination.
            </param>
      <returns>
            The <see cref="T:System.ServiceModel.PeerMessagePropagation" />.
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection">
      <summary>
            Defines settings for OPTANO.Modeling
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.OptimizationConfigSectionSectionName">
      <summary>
            The XML name of the OptimizationConfigSection Configuration Section.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.OptimizationConfigSectionSectionPath">
      <summary>
            The XML path of the OptimizationConfigSection Configuration Section.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.XmlnsPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.Xmlns" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.ModelElementPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.ModelElement" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.SolverItemsPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.SolverItems" /> property.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.IsReadOnly">
      <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.Instance">
      <summary>
            Gets the OptimizationConfigSection instance.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.Xmlns">
      <summary>
            Gets the XML namespace of this Configuration Section.
            </summary>
      <remarks>
            This property makes sure that if the configuration file contains the XML namespace,
            the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
            </remarks>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.ModelElement">
      <summary>
            Gets or sets defines settings for all models you will create within this application.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.OptimizationConfigSection.SolverItems">
      <summary>
            Gets or sets the solvers collection allows you to specify settings for solvers you want to use within this application.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Configuration.ModelElement">
      <summary>
            Defines settings for all models you will create in within this application.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.ModelBehaviorPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.ModelBehavior" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.EnableFullNamesPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.EnableFullNames" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.ComputeRemovedVariablesPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.ComputeRemovedVariables" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.EpsilonPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.Epsilon" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.CopySolutionToModelPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.CopySolutionToModel" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.IndexValidationStylePropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.IndexValidationStyle" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.MinOperatorReplacementPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.MinOperatorReplacement" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.MaxOperatorReplacementPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.MaxOperatorReplacement" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.CeilOperatorReplacementPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.CeilOperatorReplacement" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.FloorOperatorReplacementPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.FloorOperatorReplacement" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.AbsOperatorReplacementPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.AbsOperatorReplacement" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.NotConstraintReplacementPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.NotConstraintReplacement" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.WhereConstraintReplacementPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.WhereConstraintReplacement" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.OrConstraintReplacementPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.OrConstraintReplacement" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.Sos1HandlingOverridePropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.Sos1HandlingOverride" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.Sos2HandlingOverridePropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.Sos2HandlingOverride" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.Sos3HandlingOverridePropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.Sos3HandlingOverride" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.ModelElement.RestoreUserModelAfterSolvePropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.RestoreUserModelAfterSolve" /> property.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.ModelElement.IsReadOnly">
      <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.ModelBehavior">
      <summary>
            Gets or sets 'auto' will turn on automatic variable adding, i.e. when you add constraints and objectives the variables in them will be added automatically, but never automatically removed (default), 'manual' will turn this feature off and you need to add variables manually to the model
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.EnableFullNames">
      <summary>
            Gets or sets enables the Model to export full extended variable and constraint names to solvers and writers. Default is false. Using full names requires more memory. 
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.ComputeRemovedVariables">
      <summary>
            Gets or sets computes a set of variables that are removed in preprocessing of the the solver. Default is false. This computation requires an additional step and takes some time and memory. 
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.Epsilon">
      <summary>
            Gets or sets epsilon for double comparison
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.CopySolutionToModel">
      <summary>
            Gets or sets true: Will copy the solution to the model variables after every Solve(), default: true
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.IndexValidationStyle">
      <summary>
            Gets or sets sets the mode to validate indices of a VariableCollection; "heuristic" preserves the index set when a new VariableCollection is creates; Disabled disables all validations; Complete updates the index sets with every variable created
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.MinOperatorReplacement">
      <summary>
            Gets or sets the MinOperatorReplacement.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.MaxOperatorReplacement">
      <summary>
            Gets or sets the MaxOperatorReplacement.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.CeilOperatorReplacement">
      <summary>
            Gets or sets the CeilOperatorReplacement.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.FloorOperatorReplacement">
      <summary>
            Gets or sets the FloorOperatorReplacement.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.AbsOperatorReplacement">
      <summary>
            Gets or sets the AbsOperatorReplacement.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.NotConstraintReplacement">
      <summary>
            Gets or sets the NotConstraintReplacement.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.WhereConstraintReplacement">
      <summary>
            Gets or sets the WhereConstraintReplacement.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.OrConstraintReplacement">
      <summary>
            Gets or sets ###
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.Sos1HandlingOverride">
      <summary>
            Gets or sets ###
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.Sos2HandlingOverride">
      <summary>
            Gets or sets ###
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.Sos3HandlingOverride">
      <summary>
            Gets or sets ###
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.ModelElement.RestoreUserModelAfterSolve">
      <summary>
            Gets or sets ###
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Configuration.SolversCollection">
      <summary>
            The solvers collection allows you to specify settings for solvers you want to use within this application.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.SolversCollection.SolverElementPropertyName">
      <summary>
            The XML name of the individual <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> instances in this collection.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.SolversCollection.IsElementName(System.String)">
      <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement" /> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
      <param name="elementName">The name of the element to verify.</param>
      <returns>
        <see langword="true" /> if the element exists in the collection; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.SolversCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>
            Gets the element key for the specified configuration element.
            </summary>
      <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
      <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
      <requires inheritedFrom="M:System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)" inheritedFromTypeName="ConfigurationElementCollection" csharp="element != null" vb="element &lt;&gt; Nothing">element != null</requires>
      <ensures inheritedFrom="M:System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)" inheritedFromTypeName="ConfigurationElementCollection" csharp="Contract.Result&lt;decimal&gt;() != null" vb="Contract.Result(Of Object)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.SolversCollection.CreateNewElement">
      <summary>
            Creates a new <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" />.
            </summary>
      <returns>
            A new <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" />.
            </returns>
      <ensures inheritedFrom="M:System.Configuration.ConfigurationElementCollection.CreateNewElement" inheritedFromTypeName="ConfigurationElementCollection" csharp="Contract.Result&lt;decimal&gt;() != null" vb="Contract.Result(Of System.Configuration.ConfigurationElement)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.SolversCollection.Add(OPTANO.Modeling.Optimization.Configuration.SolverElement)">
      <summary>
            Adds the specified <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> to the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
      <param name="solver">The <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> to add.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.SolversCollection.Remove(OPTANO.Modeling.Optimization.Configuration.SolverElement)">
      <summary>
            Removes the specified <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> from the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
      <param name="solver">The <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> to remove.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.SolversCollection.GetItemAt(System.Int32)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> at the specified index.
            </summary>
      <param name="index">The index of the <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> to retrieve.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.SolversCollection.GetItemByKey(System.String)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> with the specified key.
            </summary>
      <param name="name">The key of the <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> to retrieve.</param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.SolversCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.SolversCollection.CollectionType">
      <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.</returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.SolversCollection.ElementName">
      <summary>
            Gets the name used to identify this collection of elements
            </summary>
      <getter>
        <ensures inheritedFrom="M:System.Configuration.ConfigurationElementCollection.get_ElementName" inheritedFromTypeName="ConfigurationElementCollection" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.SolversCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> at the specified index.
            </summary>
      <param name="index">The index of the <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> to retrieve.</param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.SolversCollection.Item(System.Object)">
      <summary>
            Gets the <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> with the specified key.
            </summary>
      <param name="name">The key of the <see cref="T:OPTANO.Modeling.Optimization.Configuration.SolverElement" /> to retrieve.</param>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Configuration.SolverElement">
      <summary>
            Specifies settings for a particular solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.SolverElement.NamePropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.SolverElement.Name" /> property.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Configuration.SolverElement.PathPropertyName">
      <summary>
            The XML name of the <see cref="P:OPTANO.Modeling.Optimization.Configuration.SolverElement.Path" /> property.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Configuration.SolverElement.IsReadOnly">
      <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.SolverElement.Name">
      <summary>
            Gets or sets the name of a specific solver ("Cplex" is the default)
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Configuration.SolverElement.Path">
      <summary>
            Gets or sets specifies the path to the native dll of this solver.  You can also use relative paths, like "..\..\cplex.dll"
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer">
      <summary>
            The free mps lexer.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14">
      <summary>
            The df a 14.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14.#ctor(Antlr.Runtime.BaseRecognizer)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14" /> class.
            </summary>
      <param name="recognizer">
            The recognizer.
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14.Description">
      <summary>
            Gets the description.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4">
      <summary>
            The df a 4.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4.#ctor(Antlr.Runtime.BaseRecognizer)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4" /> class.
            </summary>
      <param name="recognizer">
            The recognizer.
            </param>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4.Description">
      <summary>
            Gets the description.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.BOUNDKEY">
      <summary>
            The boundkey.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.BOUNDSINDICATORCARD">
      <summary>
            The boundsindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.CHARACTER">
      <summary>
            The character.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.COLUMNINDICATORCARD">
      <summary>
            The columnindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DIGIT">
      <summary>
            The digit.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DIGITS">
      <summary>
            The digits.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.ENDATAINDICATORCARD">
      <summary>
            The endataindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.ENDMARKER">
      <summary>
            The endmarker.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.EOF">
      <summary>
            The eof.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.IDENTIFIER">
      <summary>
            The identifier.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.KEYWORDFREE">
      <summary>
            The keywordfree.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.KEYWORDMARKER">
      <summary>
            The keywordmarker.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.LETTER">
      <summary>
            The letter.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.LINE_COMMENT">
      <summary>
            The lin e_ comment.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.NAMEINDICATORCARD">
      <summary>
            The nameindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.NUMERICALVALUE">
      <summary>
            The numericalvalue.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.RANGESINDICATORCARD">
      <summary>
            The rangesindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.RHSINDICATORCARD">
      <summary>
            The rhsindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.ROWINDICATORCARD">
      <summary>
            The rowindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.ROWTYPE">
      <summary>
            The rowtype.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.SOSINDICATORCARD">
      <summary>
            The sosindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.SOSTYPE">
      <summary>
            The sostype.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.STARTMARKER">
      <summary>
            The startmarker.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.WS">
      <summary>
            The ws.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_acceptS">
      <summary>
            The df a 14_accept s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_eofS">
      <summary>
            The df a 14_eof s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_eotS">
      <summary>
            The df a 14_eot s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_maxS">
      <summary>
            The df a 14_max s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_minS">
      <summary>
            The df a 14_min s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_specialS">
      <summary>
            The df a 14_special s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_acceptS">
      <summary>
            The df a 4_accept s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_eofS">
      <summary>
            The df a 4_eof s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_eotS">
      <summary>
            The df a 4_eot s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_maxS">
      <summary>
            The df a 4_max s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_minS">
      <summary>
            The df a 4_min s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_specialS">
      <summary>
            The df a 4_special s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_accept">
      <summary>
            The df a 14_accept.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_eof">
      <summary>
            The df a 14_eof.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_eot">
      <summary>
            The df a 14_eot.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_max">
      <summary>
            The df a 14_max.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_min">
      <summary>
            The df a 14_min.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_special">
      <summary>
            The df a 14_special.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_transition">
      <summary>
            The df a 14_transition.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA14_transitionS">
      <summary>
            The df a 14_transition s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_accept">
      <summary>
            The df a 4_accept.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_eof">
      <summary>
            The df a 4_eof.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_eot">
      <summary>
            The df a 4_eot.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_max">
      <summary>
            The df a 4_max.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_min">
      <summary>
            The df a 4_min.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_special">
      <summary>
            The df a 4_special.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_transition">
      <summary>
            The df a 4_transition.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.DFA4_transitionS">
      <summary>
            The df a 4_transition s.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.dfa14">
      <summary>
            The dfa 14.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.dfa4">
      <summary>
            The dfa 4.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer" /> class.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.#ctor(Antlr.Runtime.ICharStream)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer" /> class.
            </summary>
      <param name="input">
            The input.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.#ctor(Antlr.Runtime.ICharStream,Antlr.Runtime.RecognizerSharedState)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer" /> class.
            </summary>
      <param name="input">
            The input.
            </param>
      <param name="state">
            The state.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.EmitErrorMessage(System.String)">
      <summary>
            The emit error message.
            </summary>
      <param name="s">
            The s.
            </param>
      <exception cref="T:System.Exception" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mBOUNDKEY">
      <summary>
            The m boundkey.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mBOUNDSINDICATORCARD">
      <summary>
            The m boundsindicatorcard.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mCHARACTER">
      <summary>
            The m character.
            </summary>
      <exception cref="T:Antlr.Runtime.MismatchedSetException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mCOLUMNINDICATORCARD">
      <summary>
            The m columnindicatorcard.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mDIGIT">
      <summary>
            The m digit.
            </summary>
      <exception cref="T:Antlr.Runtime.MismatchedSetException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mDIGITS">
      <summary>
            The m digits.
            </summary>
      <exception cref="T:Antlr.Runtime.MismatchedSetException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mENDATAINDICATORCARD">
      <summary>
            The m endataindicatorcard.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mENDMARKER">
      <summary>
            The m endmarker.
            </summary>
      <exception cref="T:Antlr.Runtime.NoViableAltException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mIDENTIFIER">
      <summary>
            The m identifier.
            </summary>
      <exception cref="T:Antlr.Runtime.NoViableAltException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mKEYWORDFREE">
      <summary>
            The m keywordfree.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mKEYWORDMARKER">
      <summary>
            The m keywordmarker.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mLETTER">
      <summary>
            The m letter.
            </summary>
      <exception cref="T:Antlr.Runtime.MismatchedSetException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mLINE_COMMENT">
      <summary>
            The m lin e_ comment.
            </summary>
      <exception cref="T:Antlr.Runtime.MismatchedSetException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mNAMEINDICATORCARD">
      <summary>
            The m nameindicatorcard.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mNUMERICALVALUE">
      <summary>
            The m numericalvalue.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mRANGESINDICATORCARD">
      <summary>
            The m rangesindicatorcard.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mRHSINDICATORCARD">
      <summary>
            The m rhsindicatorcard.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mROWINDICATORCARD">
      <summary>
            The m rowindicatorcard.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mROWTYPE">
      <summary>
            The m rowtype.
            </summary>
      <exception cref="T:Antlr.Runtime.MismatchedSetException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mSOSINDICATORCARD">
      <summary>
            The m sosindicatorcard.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mSOSTYPE">
      <summary>
            The m sostype.
            </summary>
      <exception cref="T:Antlr.Runtime.NoViableAltException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mSTARTMARKER">
      <summary>
            The m startmarker.
            </summary>
      <exception cref="T:Antlr.Runtime.NoViableAltException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mTokens">
      <summary>
            The m tokens.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.mWS">
      <summary>
            The m ws.
            </summary>
      <exception cref="T:Antlr.Runtime.MismatchedSetException" />
      <exception cref="T:Antlr.Runtime.EarlyExitException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.InitializeCyclicDFAs">
      <summary>
            The initialize cyclic df as.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSLexer.GrammarFileName">
      <summary>
            Gets the grammar file name.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser">
      <summary>
            The free mps parser.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.block_return">
      <summary>
            The block_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.block_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.bounds_return">
      <summary>
            The bounds_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.bounds_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.boundsdatacard_return">
      <summary>
            The boundsdatacard_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.boundsdatacard_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.boundsdatacards_return">
      <summary>
            The boundsdatacards_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.boundsdatacards_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columndatacard_return">
      <summary>
            The columndatacard_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columndatacard_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columndatacards_return">
      <summary>
            The columndatacards_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columndatacards_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columns_return">
      <summary>
            The columns_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columns_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.endata_return">
      <summary>
            The endata_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.endata_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.endmarker_return">
      <summary>
            The endmarker_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.endmarker_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.memberdeclarationcard_return">
      <summary>
            The memberdeclarationcard_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.memberdeclarationcard_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.modell_return">
      <summary>
            The modell_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.modell_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.name_return">
      <summary>
            The name_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.name_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.ranges_return">
      <summary>
            The ranges_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.ranges_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rangesdatacard_return">
      <summary>
            The rangesdatacard_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rangesdatacard_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rangesdatacards_return">
      <summary>
            The rangesdatacards_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rangesdatacards_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhs_return">
      <summary>
            The rhs_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhs_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhsdatacard_return">
      <summary>
            The rhsdatacard_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhsdatacard_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhsdatacards_return">
      <summary>
            The rhsdatacards_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhsdatacards_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rowdatacard_return">
      <summary>
            The rowdatacard_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rowdatacard_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rows_return">
      <summary>
            The rows_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rows_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.setdeclarationcard_return">
      <summary>
            The setdeclarationcard_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.setdeclarationcard_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.sos_return">
      <summary>
            The sos_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.sos_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.startmarker_return">
      <summary>
            The startmarker_return.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.startmarker_return.Tree">
      <summary>
            Gets or sets the tree.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.BOUNDKEY">
      <summary>
            The boundkey.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.BOUNDSINDICATORCARD">
      <summary>
            The boundsindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.CHARACTER">
      <summary>
            The character.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.COLUMNINDICATORCARD">
      <summary>
            The columnindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.DIGIT">
      <summary>
            The digit.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.DIGITS">
      <summary>
            The digits.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.ENDATAINDICATORCARD">
      <summary>
            The endataindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.ENDMARKER">
      <summary>
            The endmarker.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.EOF">
      <summary>
            The eof.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.IDENTIFIER">
      <summary>
            The identifier.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.KEYWORDFREE">
      <summary>
            The keywordfree.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.KEYWORDMARKER">
      <summary>
            The keywordmarker.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.LETTER">
      <summary>
            The letter.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.LINE_COMMENT">
      <summary>
            The lin e_ comment.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.NAMEINDICATORCARD">
      <summary>
            The nameindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.NUMERICALVALUE">
      <summary>
            The numericalvalue.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.RANGESINDICATORCARD">
      <summary>
            The rangesindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.RHSINDICATORCARD">
      <summary>
            The rhsindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.ROWINDICATORCARD">
      <summary>
            The rowindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.ROWTYPE">
      <summary>
            The rowtype.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.SOSINDICATORCARD">
      <summary>
            The sosindicatorcard.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.SOSTYPE">
      <summary>
            The sostype.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.STARTMARKER">
      <summary>
            The startmarker.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.WS">
      <summary>
            The ws.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_BOUNDKEY_in_boundsdatacard499">
      <summary>
            The follo w_ boundke y_in_boundsdatacard 499.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_BOUNDSINDICATORCARD_in_bounds182">
      <summary>
            The follo w_ boundsindicatorcar d_in_bounds 182.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_BOUNDSINDICATORCARD_in_boundsdatacard510">
      <summary>
            The follo w_ boundsindicatorcar d_in_boundsdatacard 510.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_COLUMNINDICATORCARD_in_columns133">
      <summary>
            The follo w_ columnindicatorcar d_in_columns 133.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_ENDATAINDICATORCARD_in_endata216">
      <summary>
            The follo w_ endataindicatorcar d_in_endata 216.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_ENDMARKER_in_endmarker639">
      <summary>
            The follo w_ endmarke r_in_endmarker 639.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_EOF_in_modell77">
      <summary>
            The follo w_ eo f_in_modell 77.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_boundsdatacard504">
      <summary>
            The follo w_ identifie r_in_boundsdatacard 504.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_boundsdatacard515">
      <summary>
            The follo w_ identifie r_in_boundsdatacard 515.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_columndatacard313">
      <summary>
            The follo w_ identifie r_in_columndatacard 313.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_columndatacard317">
      <summary>
            The follo w_ identifie r_in_columndatacard 317.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_columndatacard326">
      <summary>
            The follo w_ identifie r_in_columndatacard 326.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_endmarker633">
      <summary>
            The follo w_ identifie r_in_endmarker 633.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_memberdeclarationcard571">
      <summary>
            The follo w_ identifie r_in_memberdeclarationcard 571.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_name93">
      <summary>
            The follo w_ identifie r_in_name 93.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_rangesdatacard437">
      <summary>
            The follo w_ identifie r_in_rangesdatacard 437.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_rangesdatacard448">
      <summary>
            The follo w_ identifie r_in_rangesdatacard 448.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_rangesdatacard457">
      <summary>
            The follo w_ identifie r_in_rangesdatacard 457.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_rhsdatacard373">
      <summary>
            The follo w_ identifie r_in_rhsdatacard 373.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_rhsdatacard384">
      <summary>
            The follo w_ identifie r_in_rhsdatacard 384.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_rhsdatacard393">
      <summary>
            The follo w_ identifie r_in_rhsdatacard 393.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_rowdatacard235">
      <summary>
            The follo w_ identifie r_in_rowdatacard 235.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_IDENTIFIER_in_startmarker612">
      <summary>
            The follo w_ identifie r_in_startmarker 612.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_KEYWORDFREE_in_name98">
      <summary>
            The follo w_ keywordfre e_in_name 98.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_KEYWORDMARKER_in_endmarker636">
      <summary>
            The follo w_ keywordmarke r_in_endmarker 636.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_KEYWORDMARKER_in_startmarker614">
      <summary>
            The follo w_ keywordmarke r_in_startmarker 614.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_NAMEINDICATORCARD_in_name89">
      <summary>
            The follo w_ nameindicatorcar d_in_name 89.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_NUMERICALVALUE_in_boundsdatacard519">
      <summary>
            The follo w_ numericalvalu e_in_boundsdatacard 519.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_NUMERICALVALUE_in_columndatacard321">
      <summary>
            The follo w_ numericalvalu e_in_columndatacard 321.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_NUMERICALVALUE_in_columndatacard330">
      <summary>
            The follo w_ numericalvalu e_in_columndatacard 330.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_NUMERICALVALUE_in_memberdeclarationcard573">
      <summary>
            The follo w_ numericalvalu e_in_memberdeclarationcard 573.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_NUMERICALVALUE_in_rangesdatacard452">
      <summary>
            The follo w_ numericalvalu e_in_rangesdatacard 452.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_NUMERICALVALUE_in_rangesdatacard461">
      <summary>
            The follo w_ numericalvalu e_in_rangesdatacard 461.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_NUMERICALVALUE_in_rhsdatacard388">
      <summary>
            The follo w_ numericalvalu e_in_rhsdatacard 388.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_NUMERICALVALUE_in_rhsdatacard397">
      <summary>
            The follo w_ numericalvalu e_in_rhsdatacard 397.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_RANGESINDICATORCARD_in_ranges166">
      <summary>
            The follo w_ rangesindicatorcar d_in_ranges 166.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_RANGESINDICATORCARD_in_rangesdatacard443">
      <summary>
            The follo w_ rangesindicatorcar d_in_rangesdatacard 443.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_RHSINDICATORCARD_in_rhs150">
      <summary>
            The follo w_ rhsindicatorcar d_in_rhs 150.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_RHSINDICATORCARD_in_rhsdatacard379">
      <summary>
            The follo w_ rhsindicatorcar d_in_rhsdatacard 379.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_ROWINDICATORCARD_in_rows113">
      <summary>
            The follo w_ rowindicatorcar d_in_rows 113.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_ROWTYPE_in_rowdatacard232">
      <summary>
            The follo w_ rowtyp e_in_rowdatacard 232.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_SOSINDICATORCARD_in_sos198">
      <summary>
            The follo w_ sosindicatorcar d_in_sos 198.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_SOSTYPE_in_endmarker628">
      <summary>
            The follo w_ sostyp e_in_endmarker 628.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_SOSTYPE_in_setdeclarationcard553">
      <summary>
            The follo w_ sostyp e_in_setdeclarationcard 553.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_SOSTYPE_in_startmarker609">
      <summary>
            The follo w_ sostyp e_in_startmarker 609.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_STARTMARKER_in_startmarker617">
      <summary>
            The follo w_ startmarke r_in_startmarker 617.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_block_in_block594">
      <summary>
            The follo w_block_in_block 594.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_block_in_columndatacards253">
      <summary>
            The follo w_block_in_columndatacards 253.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_bounds_in_modell68">
      <summary>
            The follo w_bounds_in_modell 68.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_boundsdatacard_in_boundsdatacards296">
      <summary>
            The follo w_boundsdatacard_in_boundsdatacards 296.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_boundsdatacards_in_bounds184">
      <summary>
            The follo w_boundsdatacards_in_bounds 184.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_columndatacard_in_block590">
      <summary>
            The follo w_columndatacard_in_block 590.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_columndatacard_in_columndatacards249">
      <summary>
            The follo w_columndatacard_in_columndatacards 249.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_columndatacards_in_columns136">
      <summary>
            The follo w_columndatacards_in_columns 136.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_columns_in_modell61">
      <summary>
            The follo w_columns_in_modell 61.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_endata_in_modell74">
      <summary>
            The follo w_endata_in_modell 74.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_endmarker_in_block598">
      <summary>
            The follo w_endmarker_in_block 598.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_memberdeclarationcard_in_sos203">
      <summary>
            The follo w_memberdeclarationcard_in_sos 203.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_name_in_modell57">
      <summary>
            The follo w_name_in_modell 57.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_ranges_in_modell65">
      <summary>
            The follo w_ranges_in_modell 65.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_rangesdatacard_in_rangesdatacards282">
      <summary>
            The follo w_rangesdatacard_in_rangesdatacards 282.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_rangesdatacards_in_ranges168">
      <summary>
            The follo w_rangesdatacards_in_ranges 168.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_rhs_in_modell63">
      <summary>
            The follo w_rhs_in_modell 63.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_rhsdatacard_in_rhsdatacards267">
      <summary>
            The follo w_rhsdatacard_in_rhsdatacards 267.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_rhsdatacards_in_rhs152">
      <summary>
            The follo w_rhsdatacards_in_rhs 152.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_rowdatacard_in_rows117">
      <summary>
            The follo w_rowdatacard_in_rows 117.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_rows_in_modell59">
      <summary>
            The follo w_rows_in_modell 59.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_set_in_setdeclarationcard555">
      <summary>
            The follo w_set_in_setdeclarationcard 555.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_setdeclarationcard_in_sos201">
      <summary>
            The follo w_setdeclarationcard_in_sos 201.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_sos_in_modell71">
      <summary>
            The follo w_sos_in_modell 71.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.FOLLOW_startmarker_in_block587">
      <summary>
            The follo w_startmarker_in_block 587.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.tokenNames">
      <summary>
            The token names.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.adaptor">
      <summary>
            The adaptor.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.#ctor(Antlr.Runtime.ITokenStream)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser" /> class.
            </summary>
      <param name="input">
            The input.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.#ctor(Antlr.Runtime.ITokenStream,Antlr.Runtime.RecognizerSharedState)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser" /> class.
            </summary>
      <param name="input">
            The input.
            </param>
      <param name="state">
            The state.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.block">
      <summary>
            The block.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.block_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.EarlyExitException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.bounds">
      <summary>
            The bounds.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.bounds_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.boundsdatacard">
      <summary>
            The boundsdatacard.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.boundsdatacard_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.NoViableAltException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.boundsdatacards">
      <summary>
            The boundsdatacards.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.boundsdatacards_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.EarlyExitException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columndatacard">
      <summary>
            The columndatacard.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columndatacard_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columndatacards">
      <summary>
            The columndatacards.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columndatacards_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.EarlyExitException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columns">
      <summary>
            The columns.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.columns_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.endata">
      <summary>
            The endata.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.endata_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.endmarker">
      <summary>
            The endmarker.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.endmarker_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.memberdeclarationcard">
      <summary>
            The memberdeclarationcard.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.memberdeclarationcard_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.modell">
      <summary>
            The modell.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.modell_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.name">
      <summary>
            The name.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.name_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.ranges">
      <summary>
            The ranges.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.ranges_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rangesdatacard">
      <summary>
            The rangesdatacard.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rangesdatacard_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.NoViableAltException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rangesdatacards">
      <summary>
            The rangesdatacards.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rangesdatacards_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.EarlyExitException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhs">
      <summary>
            The rhs.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhs_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhsdatacard">
      <summary>
            The rhsdatacard.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhsdatacard_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.NoViableAltException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhsdatacards">
      <summary>
            The rhsdatacards.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rhsdatacards_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.EarlyExitException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rowdatacard">
      <summary>
            The rowdatacard.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rowdatacard_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rows">
      <summary>
            The rows.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.rows_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.EarlyExitException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.setdeclarationcard">
      <summary>
            The setdeclarationcard.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.setdeclarationcard_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.MismatchedSetException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.sos">
      <summary>
            The sos.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.sos_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.EarlyExitException" />
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.startmarker">
      <summary>
            The startmarker.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.startmarker_return" />.
            </returns>
      <exception cref="T:Antlr.Runtime.RecognitionException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.InitializeCyclicDFAs">
      <summary>
            The initialize cyclic df as.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.GrammarFileName">
      <summary>
            Gets the grammar file name.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.TokenNames">
      <summary>
            Gets the token names.
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Importer.MPS.FreeMPSParser.TreeAdaptor">
      <summary>
            Gets or sets the tree adaptor.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback">
      <summary>
            The branch callback.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback._cplexSolver">
      <summary>
            The _cplex solver.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback._directions">
      <summary>
            The _directions.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback._numVars">
      <summary>
            The _num vars.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback._values">
      <summary>
            The _values.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback.#ctor(OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback" /> class.
            </summary>
      <param name="cplexSolver">
            The CPLEX solver.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback.Main">
      <summary>
            Cplex callback, which is called when Cplex is in branching mode.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback.GetBranches">
      <summary>
            Gets the path to the current node, on which Cplex branches.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solver.Cplex.CplexBranches" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.BranchCallback.GetPreviousBranches">
      <summary>
            Gets the previous branches for the current node.
            </summary>
      <returns>
            The <see cref="!:IEnumerable" />.
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver">
      <summary>
            Represents a CPLEX solver instance for mathematical programming problems.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.DllLocation">
      <summary>
            The dll location.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.ConstraintsInCplex">
      <summary>
            The constraints in cplex.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Cplex">
      <summary>
            The cplex.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CplexAborter">
      <summary>
            The cplex aborter.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CplexBranchCallback">
      <summary>
            The cplex branch callback.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Ev">
      <summary>
            The ev.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.NumExprVisitor">
      <summary>
            The num expr visitor.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.VariablesInCplex">
      <summary>
            The variables in cplex.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.#ctor(OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolverConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver" /> class.
            In order to use the <see cref="T:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver" /> in your project, make sure to reference the <c>ILOG.CPLEX.dll</c> and <c>ILOG.Concert.DLL</c> from the CPLEX installation folder.
            </summary>
      <param name="configuration">
            The configuration.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Abort">
      <summary>
            If this <see cref="N:OPTANO.Modeling.Optimization.Solver" /> instance <see cref="!:CplexSolver.IsBusy" />, abort the run as soon as possible, or do nothing if this solver instance is not busy.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.ClearLastModel">
      <summary>
            Deletes the internal datastructures of this <see cref="N:OPTANO.Modeling.Optimization.Solver" /> instance.
            </summary>
      <exception cref="T:System.InvalidOperationException">If this <see cref="N:OPTANO.Modeling.Optimization.Solver" /> instance <see cref="!:CplexSolver.IsBusy" />.</exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Dispose">
      <summary>
            Disposes this solver instance.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.RemoveConstraint(System.String)">
      <summary>
            Removes the <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> with <see cref="P:OPTANO.Modeling.Optimization.Constraint.Name" /><c>==</c><paramref name="name" />.
            </summary>
      <param name="name">
            The name of the <see cref="T:OPTANO.Modeling.Optimization.Constraint" /> to remove.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CPXchgprobname(System.IntPtr,System.IntPtr,System.String)">
      <summary>
            The cp xchgprobname.
            </summary>
      <param name="env">
            The env.
            </param>
      <param name="lp">
            The lp.
            </param>
      <param name="probname">
            The probname.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CPXcloseCPLEX(System.IntPtr@)">
      <summary>
            The cp xclose cplex.
            </summary>
      <param name="env">
            The env.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CPXcreateprob(System.IntPtr,System.Int32@,System.String)">
      <summary>
            The cp xcreateprob.
            </summary>
      <param name="env">
            The env.
            </param>
      <param name="status">
            The status.
            </param>
      <param name="name">
            The name.
            </param>
      <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CPXfreeprob(System.IntPtr,System.IntPtr@)">
      <summary>
            The cp xfreeprob.
            </summary>
      <param name="env">
            The env.
            </param>
      <param name="lp">
            The lp.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CPXgeterrorstring(System.IntPtr,System.Int32,System.Text.StringBuilder)">
      <summary>
            The cp xgeterrorstring.
            </summary>
      <param name="env">
            The env.
            </param>
      <param name="errcode">
            The errcode.
            </param>
      <param name="buffer">
            The buffer.
            </param>
      <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CPXopenCPLEX(System.Int32@)">
      <summary>
            The cp xopen cplex.
            </summary>
      <param name="statusP">
            The status p.
            </param>
      <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CPXpreslvwrite(System.IntPtr,System.IntPtr,System.String,System.Double@)">
      <summary>
            The cp xpreslvwrite.
            </summary>
      <param name="env">
            The env.
            </param>
      <param name="lp">
            The lp.
            </param>
      <param name="filenameStr">
            The filename str.
            </param>
      <param name="objoffP">
            The objoff p.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CPXreadcopyprob(System.IntPtr,System.IntPtr,System.String,System.String)">
      <summary>
            The cp xreadcopyprob.
            </summary>
      <param name="env">
            The env.
            </param>
      <param name="lp">
            The lp.
            </param>
      <param name="filenameStr">
            The filename str.
            </param>
      <param name="filetypeStr">
            The filetype str.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.CPXwriteprob(System.IntPtr,System.IntPtr,System.String,System.String)">
      <summary>
            The cp xwriteprob.
            </summary>
      <param name="env">
            The env.
            </param>
      <param name="lp">
            The lp.
            </param>
      <param name="filename">
            The filename.
            </param>
      <param name="filetype">
            The filetype.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.OnBranched(OPTANO.Modeling.Optimization.Solver.Cplex.CplexBranchingEventArgs)">
      <summary>
            Raises the <see cref="E:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Branched" /> event.
            </summary>
      <param name="e">
            The <see cref="T:OPTANO.Modeling.Optimization.Solver.Cplex.CplexBranchingEventArgs" /> instance containing the event data.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Dispose(System.Boolean)">
      <summary>
            The dispose.
            </summary>
      <param name="freeManagedObjectsAlso">
        <c>true</c>, if managed objects should also be disposed.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.ResolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            The resolve adapter specific.
            </summary>
      <param name="prioLevel">
            The prio level.
            </param>
      <param name="variableValues">
            The variable values.
            </param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />.
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.RebuildSolverModelAdapterSpecific(System.Int32)">
      <summary>
            Model is already built up and up to date due to <see cref="T:OPTANO.Modeling.Optimization.Solver.Interfaces.ICanManipulateANativeSolver" />.
            </summary>
      <param name="prioLevel">
            The prio level.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.BuildSolverModelAdapterSpecific(System.Int32)">
      <summary>
            Initializes the solver instance and then builds the <see cref="T:ILOG.CPLEX.CpxModel" />.
            </summary>
      <param name="prioLevel">
            The prio level.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.InitializeSolverInstance">
      <summary>
            Initializes the solver instance.
            I.e. sets <see cref="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Cplex" /> and configures the callbacks.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.SetConfigurationAdapterSpecific">
      <summary>
            Sets the configuration parameters in <see cref="F:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Cplex" /> environment.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.GetType(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            The get type.
            </summary>
      <param name="variable">
            The variable.
            </param>
      <returns>
            The <see cref="T:ILOG.Concert.NumVarType" />.
            </returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.AddConstraint(OPTANO.Modeling.Optimization.Constraint)">
      <summary>
            The add constraint.
            </summary>
      <param name="constraint">
            The constraint.
            </param>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.AddObjective(OPTANO.Modeling.Optimization.Objective)">
      <summary>
            The add objective.
            </summary>
      <param name="objective">
            The objective.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.AddSOSSetsFromModel">
      <summary>
            The add sos sets from model.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.AddVariable(OPTANO.Modeling.Optimization.Variable)">
      <summary>
            The add variable.
            </summary>
      <param name="variable">
            The variable.
            </param>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.InitialzeCplexModel(System.Int32)">
      <summary>
            Builds up the internal <see cref="T:ILOG.CPLEX.CpxModel" />.
            </summary>
      <param name="prioLevel">
            The prio Level to determine the current objective.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.SetBranchingPriorityAdapterSpecific">
      <summary>
            Set the <see cref="P:OPTANO.Modeling.Optimization.Variable.BranchingPriority" /> adapter specific.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.SetBranchingDirectionAdapterSpecific">
      <summary>
            Sets the <see cref="T:OPTANO.Modeling.Optimization.Enums.BranchingDirection" /> adapter specific.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.ComputeIIS">
      <summary>
            The compute iis.
            </summary>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.ConflictingSet" />.
            </returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.ConfigureCallbacks">
      <summary>
            The configure callbacks.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.GetDualValues(System.Collections.Generic.Dictionary{System.String,System.Double}@)">
      <summary>
            The get dual values.
            </summary>
      <param name="dualValues">
            The dual values.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.SetBestBoundForSolution(OPTANO.Modeling.Optimization.Solution)">
      <summary>
            The set best bound for solution.
            </summary>
      <param name="solution">
            The solution.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.SetCutOff(System.Double,System.Int32)">
      <summary>
            The set cut off.
            </summary>
      <param name="cutoff">
            The cutoff.
            </param>
      <param name="prioLevel">
            The prio Level to determine the objective.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.SetStartingValues(System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            The set starting values.
            </summary>
      <param name="variableValues">
            The variable values.
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.SolveAdapterSpecific(System.Int32,System.Collections.Generic.IDictionary{OPTANO.Modeling.Optimization.Variable,System.Double})">
      <summary>
            Solves the <see cref="P:OPTANO.Modeling.Optimization.SolverBase.CurrentModel" />.
            Optimizes if <see cref="P:OPTANO.Modeling.Optimization.SolverBase.CurrentModel" /> contains at least one <see cref="T:OPTANO.Modeling.Optimization.Objective" />.
            </summary>
      <param name="prioLevel">
            The priority level to solve for.
            </param>
      <param name="variableValues">
            Initial values for all or a subset of variables in the <see cref="T:OPTANO.Modeling.Optimization.Model" /></param>
      <returns>
            The <see cref="T:OPTANO.Modeling.Optimization.Solution" />. Note that the solution does not always contain values, since the <paramref name="model" /> might be <see cref="F:OPTANO.Modeling.Optimization.Solver.ModelStatus.Infeasible" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            If this solver instance not supports solving.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            If this solver instance is busy.
            </exception>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Output">
      <summary>
            Gets or sets the output textwriter. By setting this property you are able to redirect the solver's output.
            </summary>
      <value>
            The output.
            </value>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.OutputFile">
      <summary>
            Gets or sets the output file name. Based on the file extension an .lp file or .mps file will be written.
            </summary>
      <value>
            The output file.
            </value>
    </member>
    <member name="E:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Branched">
      <summary>
            Occurs when Cplex branches on a node.
            </summary>
    </member>
    <member name="E:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolver.Status">
      <summary>
            The status callback during the solution process.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolverConfiguration">
      <summary>
            Configuration for a Cplex solver instance
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolverConfiguration.OutputFile">
      <summary>
            Specifies the output file to which a CPLEX model gets written before solving it
            </summary>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Cplex124.CplexSolverConfiguration.TreeMemoryLimit">
      <summary>
            Sets an absolute upper bound on the size in <c>megabytes</c> uncompressed of the branch and cut tree.
            If this limit is exceeded Cplex terminates optimization
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor">
      <summary>
            This is a helper class to create an expression for the CPLEXSolver visiting all nodes of an OPTANO.Modeling <see cref="T:OPTANO.Modeling.Optimization.Expression" /></summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor._cplex">
      <summary>
            The _cplex.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor._variablesInCplex">
      <summary>
            The _variables in cplex.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor.#ctor(System.Collections.Generic.Dictionary{System.String,ILOG.Concert.INumVar},ILOG.CPLEX.Cplex)">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor" /> class. 
            Initializes a new instance of of the <see cref="T:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor" /> class.
            Constructor used for creating an expression-visitor for CPLEX.
            </summary>
      <param name="variables">
            All variables of a model in CPLEX
            </param>
      <param name="cplex">
            The corresponding model in CPLEX
            </param>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor.TimesQuadratic(System.Double,ILOG.Concert.INumVar[])">
      <summary>
            Builds up an expression, which is possibly quadratic: factor * var1 (* var2)
            </summary>
      <param name="factor">
            A constant
            </param>
      <param name="vars">
            The variables of the quadratic expression
            </param>
      <returns>
            The quadratic expression for CPLEX
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor.TimesScalar(System.Double,OPTANO.Modeling.Optimization.Expression)">
      <summary>
            Builds up an expression consisting of an expression * factor
            </summary>
      <param name="factor">
            A constant
            </param>
      <param name="expr">
            An <see cref="T:OPTANO.Modeling.Optimization.Expression" /></param>
      <returns>
            The expression for CPLEX
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor.VisitConstant(OPTANO.Modeling.Optimization.ConstantExpression)">
      <summary>
            Returns a new expression for CPLEX representing a constant
            </summary>
      <param name="constantExpression">
            A <see cref="T:OPTANO.Modeling.Optimization.ConstantExpression" /></param>
      <returns>
            The expression representing a constant
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor.VisitPlus(OPTANO.Modeling.Optimization.Operators.Interfaces.IPlus)">
      <summary>
            Returns a new expression for CPLEX created as sum of all operands(INumExpr)
            </summary>
      <param name="plus">
            An <see cref="T:OPTANO.Modeling.Optimization.Expression" /> as <see cref="T:OPTANO.Modeling.Optimization.Operators.Plus" /></param>
      <returns>
            The expression for CPLEX
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor.VisitTerm(OPTANO.Modeling.Optimization.Term)">
      <summary>
            Returns a new expression for CPLEX representing a Term
            </summary>
      <param name="term">
            The term.
            </param>
      <returns>
            The expression representing a Term
            </returns>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor.VisitTimes(OPTANO.Modeling.Optimization.Operators.Interfaces.ITimes)">
      <summary>
            Returns an expression for CPLEX created as product of a factor and an expresion(INumExpr) or as quadratic expression.
            There is no general times operator supported for expressions in CPLEX.
            </summary>
      <param name="times">
            An <see cref="T:OPTANO.Modeling.Optimization.Expression" /> as <see cref="T:OPTANO.Modeling.Optimization.Operators.Times" /></param>
      <returns>
            The expression for CPLEX
            </returns>
    </member>
    <member name="P:OPTANO.Modeling.Optimization.Solver.Cplex124.NumExprVisitor.AddedVariables">
      <summary>
            Gets or sets the added variables.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Cplex124.StatusCallback">
      <summary>
            The status callback.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.StatusCallback._statusInfoSubject">
      <summary>
            The _status info subject.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.StatusCallback._variablesInCplex">
      <summary>
            The _variables in cplex.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Cplex124.StatusCallback._lastIncumbent">
      <summary>
            The _last incumbent.
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.StatusCallback.#ctor(System.Action{OPTANO.Modeling.Optimization.Solver.Interfaces.StatusInfo},System.Collections.Generic.Dictionary{System.String,ILOG.Concert.INumVar})">
      <summary>
            Initializes a new instance of the <see cref="T:OPTANO.Modeling.Optimization.Solver.Cplex124.StatusCallback" /> class.
            </summary>
      <param name="statusInfoSubject">
            The status info subject.
            </param>
      <param name="variablesInCplex">
            The variables in cplex.
            </param>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Cplex124.StatusCallback.Main">
      <summary>
            The main.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Gurobi.GurobiConstants">
      <summary>
            The gurobi constants to identify <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Integer" />, <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Binary" /> and <see cref="F:OPTANO.Modeling.Optimization.Enums.VariableType.Continuous" />.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.GurobiConstants.BINARY">
      <summary>
            The binary handle.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.GurobiConstants.CONTINUOUS">
      <summary>
            The continuous handle.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.GurobiConstants.INTEGER">
      <summary>
            The integer handle.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.GurobiConstants.MAXIMIZE">
      <summary>
            The maximize constant for gurobi.
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.GurobiConstants.MINIMIZE">
      <summary>
            The minimize constant for gurobi.
            </summary>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Gurobi.ReflectionHelper">
      <summary>
            Helps to get or set properties by reflection.
            Methods are taken from this post:
            http://dotnetfollower.com/wordpress/2012/12/c-how-to-set-or-get-value-of-a-private-or-internal-property-through-the-reflection/
            </summary>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Gurobi.ReflectionHelper.GetFieldValue(System.Object,System.String)">
      <summary>
            Gets the <c>value</c> for the specified <paramref name="fieldName" />, using Reflection.
            </summary>
      <param name="obj">
            The object.
            </param>
      <param name="fieldName">
            The field name.
            </param>
      <returns>
            The property value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown, if <paramref name="obj" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown, if <paramref name="fieldName" /> is not a property of <paramref name="obj.GetType()" />.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Gurobi.ReflectionHelper.SetFieldValue(System.Object,System.String,System.Object)">
      <summary>
            Sets the <c>value</c> for the specified <paramref name="fieldName" /> to <paramref name="value" />, using Reflection.
            </summary>
      <param name="obj">
            The object.
            </param>
      <param name="fieldName">
            The field name.
            </param>
      <param name="value">
            The value to set.
            </param>
      <exception cref="T:System.ArgumentNullException">
            Thrown, if <paramref name="obj" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown, if <paramref name="fieldName" /> is not a property of <paramref name="obj.GetType()" />.
            </exception>
    </member>
    <member name="M:OPTANO.Modeling.Optimization.Solver.Gurobi.ReflectionHelper.GetFieldInfo(System.Type,System.String)">
      <summary>
            The get field info.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="fieldName">
            The field name.
            </param>
      <returns>
            The <see cref="T:System.Reflection.FieldInfo" />.
            </returns>
    </member>
    <member name="T:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus">
      <summary>
            The Status of the Gurobi solver
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.Cutoff">
      <summary>
            Cutoff
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.Infeasible">
      <summary>
            Infeasible
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.InfOrUnbd">
      <summary>
            Infinity or Unbounded
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.Interrupted">
      <summary>
            Interrupted
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.IterationLimit">
      <summary>
            IterationLimit
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.Loaded">
      <summary>
            Loaded
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.NodeLimit">
      <summary>
            NodeLimit
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.Numeric">
      <summary>
            Numeric
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.Optimal">
      <summary>
            Optimal
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.SolutionLimit">
      <summary>
            SolutionLimit
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.TimeLimit">
      <summary>
            TimeLimit
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.Unbounded">
      <summary>
            Unbounded
            </summary>
    </member>
    <member name="F:OPTANO.Modeling.Optimization.Solver.Gurobi.SolverStatus.Suboptimal">
      <summary>
            Suboptimal
            </summary>
    </member>
  </members>
</doc>